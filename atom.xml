<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Cryptic – Blog</title>
  <link href="https://blog.cryptic.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.cryptic.io"/>
  <generator uri="https://www.getzola.org/">Zola</generator>
  <updated>2021-05-11T00:00:00+00:00</updated>
  <id>https://blog.cryptic.io/atom.xml</id>
  <entry xml:lang="en">
    <title>Ripple V3</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-05-11T00:00:00+00:00</published>
    <updated>2021-05-11T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-ripple-v3/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-ripple-v3/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/05/11/ripple-v3.html</id>
        <link href="https://blog.mediocregopher.com/2021/05/11/ripple-v3.html"/>
        <title>Ripple V3</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-05-11T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-ripple-v3/</id>
    <content type="html">
        &lt;p&gt;
    &lt;b&gt;Movement:&lt;&#x2F;b&gt; Arrow keys or WASD&lt;br &#x2F;&gt;
    &lt;b&gt;Jump:&lt;&#x2F;b&gt; Space&lt;br &#x2F;&gt;
    &lt;b&gt;Goal:&lt;&#x2F;b&gt; Jump as many times as possible without touching a ripple!&lt;br &#x2F;&gt;
    &lt;br &#x2F;&gt;
    &lt;b&gt;Press Jump To Begin!&lt;&#x2F;b&gt;
&lt;&#x2F;p&gt;

&lt;p&gt;&lt;em&gt;Who can make the muddy water clear?&lt;br &#x2F;&gt;
Let it be still, and it will gradually become clear.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

&lt;canvas id=&quot;canvas&quot; style=&quot;border:1px dashed #AAA&quot; tabindex=&quot;0&quot;&gt;
Your browser doesn&#x27;t support canvas. At this point in the world that&#x27;s actually
pretty cool, well done!
&lt;&#x2F;canvas&gt;
&lt;p&gt;&lt;button onclick=&quot;reset()&quot;&gt;(R)eset&lt;&#x2F;button&gt;
&lt;span style=&quot;font-size: 2rem; margin-left: 1rem;&quot;&gt;Score:
    &lt;span style=&quot;font-weight: bold&quot; id=&quot;score&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;

&lt;script type=&quot;text&#x2F;javascript&quot;&gt;

const palette = [
    &quot;#264653&quot;,
    &quot;#2A9D8F&quot;,
    &quot;#E9C46A&quot;,
    &quot;#F4A261&quot;,
    &quot;#E76F51&quot;,
];

const width = 800;
const height = 600;

function hypotenuse(w, h) {
    return Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2));
}

let canvas = document.getElementById(&quot;canvas&quot;);
canvas.width = width;
canvas.height = height;

const whitelistedKeys = {
    &quot;ArrowUp&quot;: {},
    &quot;KeyW&quot;: {map: &quot;ArrowUp&quot;},
    &quot;ArrowLeft&quot;: {},
    &quot;KeyA&quot;: {map: &quot;ArrowLeft&quot;},
    &quot;ArrowRight&quot;: {},
    &quot;KeyD&quot;: {map: &quot;ArrowRight&quot;},
    &quot;ArrowDown&quot;: {},
    &quot;KeyS&quot;: {map: &quot;ArrowDown&quot;},
    &quot;Space&quot;: {},
    &quot;KeyR&quot;: {},
};

let keyboard = {};

canvas.addEventListener(&#x27;keydown&#x27;, (event) =&gt; {
    let keyInfo = whitelistedKeys[event.code];
    if (!keyInfo) return;

    let code = event.code;
    if (keyInfo.map) code = keyInfo.map;

    event.preventDefault();
    keyboard[code] = true;
});

canvas.addEventListener(&#x27;keyup&#x27;, (event) =&gt; {
    let keyInfo = whitelistedKeys[event.code];
    if (!keyInfo) return;

    let code = event.code;
    if (keyInfo.map) code = keyInfo.map;

    event.preventDefault();
    delete keyboard[code];
});


const C = 700; &#x2F;&#x2F; scales the overall speed of the radius
const T = 500; &#x2F;&#x2F; on which tick the radius change becomes linear

&#x2F;*
    f(x) = sqrt(C*x)                        when x &lt; T
           (C&#x2F;(2*sqrt(CT)))(x-T) + sqrt(CT) when x &gt;= T

    radius(x) = f(x) + playerRadius;
*&#x2F;

const F1 = (x) =&gt; Math.sqrt(C*x);
const F2C1 = C &#x2F; (2 * Math.sqrt(C*T));
const F2C2 = Math.sqrt(C * T);
const F2 = (x) =&gt; (F2C1 * (x - T)) + F2C2;
const F = (x) =&gt; {
    if (x &lt; T) return F1(x);
    return F2(x);
};

class Ripple {

    constructor(id, currTick, x, y, bounces, color) {
        this.id = id;
        this.tick = currTick;
        this.x = x;
        this.y = y;
        this.thickness = Math.pow(bounces+1, 1.25);
        this.color = color;
        this.winner = false;

        this.maxRadius = hypotenuse(x, y);
        this.maxRadius = Math.max(this.maxRadius, hypotenuse(width-x, y));
        this.maxRadius = Math.max(this.maxRadius, hypotenuse(x, height-y));
        this.maxRadius = Math.max(this.maxRadius, hypotenuse(width-x, height-y));
    }

    radius(currTick) {
        const x = currTick - this.tick;
        return F(x) + playerRadius;
    }

    draw(ctx, currTick) {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius(currTick), 0, Math.PI * 2, false);
        ctx.closePath();
        ctx.lineWidth = this.thickness;
        ctx.strokeStyle = this.winner ? &quot;#FF0000&quot; : this.color;
        ctx.stroke();
    }

    canGC(currTick) {
        return this.radius(currTick) &gt; this.maxRadius;
    }
}

const playerRadius = 10;
const playerMoveAccel = 0.5;
const playerMoveDecel = 0.7;
const playerMaxMoveSpeed = 4;
const playerJumpSpeed = 0.08;
const playerMaxHeight = 1;
const playerGravity = 0.01;

class Player{

    constructor(x, y, color) {
        this.x = x;
        this.y = y;
        this.z = 0;
        this.xVelocity = 0;
        this.yVelocity = 0;
        this.zVelocity = 0;
        this.color = color;
        this.falling = false;
        this.lastJumpHeight = 0;
        this.loser = false;
    }

    act() {
        if (keyboard[&quot;ArrowUp&quot;]) {
            this.yVelocity = Math.max(-playerMaxMoveSpeed, this.yVelocity - playerMoveAccel);
        } else if (keyboard[&quot;ArrowDown&quot;]) {
            this.yVelocity = Math.min(playerMaxMoveSpeed, this.yVelocity + playerMoveAccel);
        } else if (this.yVelocity &gt; 0) {
            this.yVelocity = Math.max(0, this.yVelocity - playerMoveDecel);
        } else if (this.yVelocity &lt; 0) {
            this.yVelocity = Math.min(0, this.yVelocity + playerMoveDecel);
        }

        this.y += this.yVelocity;
        if (this.y &lt; 0) this.y += height;
        else if (this.y &gt; height) this.y -= height;

        if (keyboard[&quot;ArrowLeft&quot;]) {
            this.xVelocity = Math.max(-playerMaxMoveSpeed, this.xVelocity - playerMoveAccel);
        } else if (keyboard[&quot;ArrowRight&quot;]) {
            this.xVelocity = Math.min(playerMaxMoveSpeed, this.xVelocity + playerMoveAccel);
        } else if (this.xVelocity &gt; 0) {
            this.xVelocity = Math.max(0, this.xVelocity - playerMoveDecel);
        } else if (this.xVelocity &lt; 0) {
            this.xVelocity = Math.min(0, this.xVelocity + playerMoveDecel);
        }

        this.x += this.xVelocity;
        if (this.x &lt; 0) this.x += width;
        else if (this.x &gt; width) this.x -= width;

        let jumpHeld = keyboard[&quot;Space&quot;];

        if (jumpHeld &amp;&amp; !this.falling &amp;&amp; this.z &lt; playerMaxHeight) {
            this.lastJumpHeight = 0;
            this.zVelocity = playerJumpSpeed;
        } else {
            this.zVelocity = Math.max(-playerJumpSpeed, this.zVelocity - playerGravity);
            this.falling = this.z &gt; 0;
        }

        let prevZ = this.z;
        this.z = Math.max(0, this.z + this.zVelocity);
        this.lastJumpHeight = Math.max(this.z, this.lastJumpHeight);
    }

    drawAt(ctx, atX, atY) {
        const y = atY - (this.z * 40);
        const radius = playerRadius * (this.z+1)

        &#x2F;&#x2F; draw main
        ctx.beginPath();
        ctx.arc(atX, y, radius, 0, Math.PI * 2, false);
        ctx.closePath();
        ctx.lineWidth = 0;
        ctx.fillStyle = this.color;
        ctx.fill();
        if (this.loser) {
            ctx.strokeStyle = &#x27;#FF0000&#x27;;
            ctx.lineWidth = 2;
            ctx.stroke();
        }

        &#x2F;&#x2F; draw shadow, if in the air
        if (this.z &gt; 0) {
            let radius = Math.max(0, playerRadius * (1.2 - this.z));
            ctx.beginPath();
            ctx.arc(atX, atY, radius, 0, Math.PI * 2, false);
            ctx.closePath();
            ctx.lineWidth = 0;
            ctx.fillStyle = this.color+&quot;33&quot;;
            ctx.fill();
        }
    }

    draw(ctx) {
        [-1, 0, 1].forEach((wScalar) =&gt; {
            const w = width * wScalar;
            [-1, 0, 1].forEach((hScalar) =&gt; {
                const h = height * hScalar;
                this.drawAt(ctx, this.x+w, this.y+h);
            })
        })
    }
}

class Game {

    constructor(canvas, scoreEl) {
        this.currTick = 0;
        this.player = new Player(width&#x2F;2, height&#x2F;2, palette[0]);
        this.state = &#x27;play&#x27;;
        this.score = 0;
        this.scoreEl = scoreEl;
        this.canvas = canvas;
        this.ctx = canvas.getContext(&quot;2d&quot;);
        this.ripples = [];
        this.nextRippleID = 0;
    }

    shouldReset() {
        return keyboard[&#x27;KeyR&#x27;];
    }

    newRippleID() {
        let id = this.nextRippleID;
        this.nextRippleID++;
        return id;
    }

    &#x2F;&#x2F; newRipple initializes and stores a new ripple at the given coordinates, as
    &#x2F;&#x2F; well as all sub-ripples which make up the initial ripple&#x27;s reflections.
    newRipple(x, y, bounces, color) {
        color = color ? color : palette[Math.floor(Math.random() * palette.length)];

        let ripplePos = [];
        let nextRipples = [];

        let addRipple = (x, y) =&gt; {
            for (let i in ripplePos) {
                if (ripplePos[i][0] == x &amp;&amp; ripplePos[i][1] == y) return;
            }

            let ripple = new Ripple(this.newRippleID(), this.currTick, x, y, bounces, color);
            nextRipples.push(ripple);
            ripplePos.push([x, y]);
            this.ripples.push(ripple);
        };

        &#x2F;&#x2F; add initial ripple, after this we deal with the sub-ripples.
        addRipple(x, y);

        while (bounces &gt; 0) {
            bounces--;
            let prevRipples = nextRipples;
            nextRipples = [];

            for (let i in prevRipples) {
                let prevX = prevRipples[i].x;
                let prevY = prevRipples[i].y;

                [-1, 0, 1].forEach((wScalar) =&gt; {
                    const w = this.canvas.width * wScalar;
                    [-1, 0, 1].forEach((hScalar) =&gt; {
                        const h = this.canvas.height * hScalar;
                        addRipple(prevX + w, prevY + h);
                    })
                })
            }
        }
    }

    &#x2F;&#x2F; playerRipplesState returns a mapping of rippleID -&gt; boolean, where each
    &#x2F;&#x2F; boolean indicates the ripple&#x27;s relation to the player at the moment. true
    &#x2F;&#x2F; indicates the player is outside the ripple, false indicates the player is
    &#x2F;&#x2F; within the ripple.
    playerRipplesState() {
        let state = {};
        for (let i in this.ripples) {
            let ripple = this.ripples[i];
            let rippleRadius = ripple.radius(this.currTick);
            let hs = Math.pow(ripple.x-this.player.x, 2) + Math.pow(ripple.y-this.player.y, 2);
            state[ripple.id] = hs &gt; Math.pow(rippleRadius + playerRadius, 2);
        }
        return state;
    }

    playerHasJumpedOverRipple(prev, curr) {
        for (const rippleID in prev) {
            if (!curr.hasOwnProperty(rippleID)) continue;
            if (curr[rippleID] != prev[rippleID]) return true;
        }
        return false;
    }

    update() {
        if (this.state != &#x27;play&#x27;) return;

        let playerPrevZ = this.player.z;
        this.player.act();

        if (playerPrevZ == 0 &amp;&amp; this.player.z &gt; 0) {
            &#x2F;&#x2F; player has jumped
            this.prevPlayerRipplesState = this.playerRipplesState();

        } else if (playerPrevZ &gt; 0 &amp;&amp; this.player.z == 0) {

            &#x2F;&#x2F; player has landed, don&#x27;t produce a ripple unless there are no
            &#x2F;&#x2F; existing ripples or the player jumped over an existing one.
            if (
                this.ripples.length == 0 ||
                this.playerHasJumpedOverRipple(
                    this.prevPlayerRipplesState,
                    this.playerRipplesState()
                )
            ) {
                &#x2F;&#x2F;let bounces = Math.floor((this.player.lastJumpHeight*1.8)+1);
                const bounces = 1;

                console.log(&quot;spawning ripple with bounces:&quot;, bounces);
                this.newRipple(this.player.x, this.player.y, bounces);
                this.score += bounces;
            }
        }

        if (this.player.z == 0) {
            for (let i in this.ripples) {
                let ripple = this.ripples[i];
                let rippleRadius = ripple.radius(this.currTick);
                if (rippleRadius &lt; playerRadius * 1.5) continue;
                let hs = Math.pow(ripple.x-this.player.x, 2) + Math.pow(ripple.y-this.player.y, 2);
                if (hs &gt; Math.pow(rippleRadius + playerRadius, 2)) {
                    continue;
                } else if (hs &lt;= Math.pow(rippleRadius - playerRadius, 2)) {
                    continue;
                } else {
                    console.log(&quot;game over&quot;, ripple);
                    ripple.winner = true;
                    this.player.loser = true;
                    this.state = &#x27;gameOver&#x27;;
                    &#x2F;&#x2F; deliberately don&#x27;t break here, in case multiple ripples hit
                    &#x2F;&#x2F; the player on the same frame
                }
            }
        }

        this.ripples = this.ripples.filter(ripple =&gt; !ripple.canGC(this.currTick));

        this.currTick++;
    }

    draw() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.ripples.forEach(ripple =&gt; ripple.draw(this.ctx, this.currTick));
        this.player.draw(this.ctx)
        this.scoreEl.innerHTML = this.score;
    }
}


const requestAnimationFrame =
    window.requestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.msRequestAnimationFrame;

let game = new Game(canvas, document.getElementById(&quot;score&quot;));

function reset() {
    game = new Game(canvas, document.getElementById(&quot;score&quot;));
}

function nextFrame() {
    if (game.shouldReset()) reset();

    game.update()
    game.draw()
    requestAnimationFrame(nextFrame);
}
requestAnimationFrame(nextFrame);

canvas.focus();

&lt;&#x2F;script&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;&#x2F;h2&gt;

&lt;p&gt;The previous version was two easy to break, even with the requirement of jumping
over a ripple to generate a new one and increase your score. This led to the
following major changes:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The game now incorporates asteroid&#x2F;pacman mechanics. Rather than bouncing off
walls, the player and ripples will instead come out the opposite wall they
travel through.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Jump height no longer affects score or the “strength” of a ripple.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Declarative Dev Environments</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2021-05-10T00:00:00+00:00</published>
    <updated>2021-05-10T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-declarative-dev-environments/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-declarative-dev-environments/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/declarative-dev-environments/</id>
        <link href="https://marcopolo.io/code/declarative-dev-environments/"/>
        <title>Declarative Dev Environments</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2021-05-10T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-declarative-dev-environments/</id>
    <content type="html">
        &lt;p&gt;I don&#x27;t install development tools globally. I don&#x27;t have &lt;code&gt;node&lt;&#x2F;code&gt; added to my
&lt;code&gt;PATH&lt;&#x2F;code&gt; in my &lt;code&gt;~&#x2F;.zshrc&lt;&#x2F;code&gt; file, and running &lt;code&gt;cargo&lt;&#x2F;code&gt; outside a project folder
returns &amp;quot;command not found.&amp;quot; I wipe my computer on every reboot. With the
exception of four folders (&lt;code&gt;&#x2F;boot&lt;&#x2F;code&gt;, &lt;code&gt;&#x2F;nix&lt;&#x2F;code&gt;, &lt;code&gt;&#x2F;home&lt;&#x2F;code&gt;, and &lt;code&gt;&#x2F;persist&lt;&#x2F;code&gt;), everything
gets &lt;a href=&quot;https:&#x2F;&#x2F;grahamc.com&#x2F;blog&#x2F;erase-your-darlings&quot;&gt;deleted&lt;&#x2F;a&gt;. And it has worked
out great.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of installing development packages globally, I declare them as a
dependency in my project&#x27;s dev environment. They become available as soon as I
&lt;code&gt;cd&lt;&#x2F;code&gt; into the project folder. If two projects use the same tool then I only keep
one version of that tool on my computer.&lt;&#x2F;p&gt;
&lt;p&gt;I think installing dev tools globally is a bad pattern that leads to nothing but
heartache and woe. If you are running &lt;code&gt;sudo apt-get install&lt;&#x2F;code&gt; or &lt;code&gt;brew install&lt;&#x2F;code&gt;
prior to building a project, you are doing it wrong. By defining your dev tool
dependencies explicitly you allow your projects to easily build on any
machine at any point in time. Whether it&#x27;s on a friends machine today, or a new
laptop in 10 years. It even makes CI integration a breeze.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-do-i-mean-by-a-declarative-dev-environment&quot;&gt;What do I mean by a declarative dev environment?&lt;&#x2F;h2&gt;
&lt;p&gt;I mean a project that has a special file (or files) that define all the
dependencies required to build and run your project. It doesn&#x27;t necessarily have
to include the actual binaries you will run in the repo, but it should be
reproducible. If you clone my project you should be running the exact
same tools as me.&lt;&#x2F;p&gt;
&lt;p&gt;Just like you have explicit dependencies on libraries you use in your program, a
declarative dev environment lets you define your tooling dependencies (e.g.
which version of Node, Yarn, or your specific cross compiler toolchain).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-i-setup-my-declarative-dev-environments&quot;&gt;How I setup my declarative dev environments&lt;&#x2F;h2&gt;
&lt;p&gt;To accomplish this I use &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&quot;&gt;Nix&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;www.tweag.io&#x2F;blog&#x2F;2020-05-25-flakes&#x2F;&quot;&gt;Nix Flakes&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;direnv.net&#x2F;&quot;&gt;direnv&lt;&#x2F;a&gt;. There are three
relevant files: &lt;code&gt;flake.nix&lt;&#x2F;code&gt; which defines the build of the project and the tools
I need for development; &lt;code&gt;flake.lock&lt;&#x2F;code&gt; which is similar in spirit to a &lt;code&gt;yarn.lock&lt;&#x2F;code&gt;
or &lt;code&gt;Cargo.lock&lt;&#x2F;code&gt; file, it &lt;em&gt;locks&lt;&#x2F;em&gt; the exact version of any tool used and
generated automatically the first time you introduce dependencies; and finally a
&lt;code&gt;.envrc&lt;&#x2F;code&gt; file which simply tells direnv to ask Nix what the environment should
be, and sets up the environment when you &lt;code&gt;cd&lt;&#x2F;code&gt; into the folder. Here are some
simple examples:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;templates&#x2F;tree&#x2F;master&#x2F;trivial&quot;&gt;flake.nix&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;templates&#x2F;blob&#x2F;master&#x2F;trivial&#x2F;.envrc&quot;&gt;.envrc&lt;&#x2F;a&gt;
(&lt;code&gt;flake.lock&lt;&#x2F;code&gt; omitted since it&#x27;s automatically generated).&lt;&#x2F;p&gt;
&lt;p&gt;As a shortcut for setting up a &lt;code&gt;flake.nix&lt;&#x2F;code&gt; and &lt;code&gt;.envrc&lt;&#x2F;code&gt;, you can use a template
to provide the boilerplate. When I start a new project I&#x27;ll run &lt;code&gt;nix flake init -t github:marcopolo&#x2F;templates&lt;&#x2F;code&gt; which copies the files from this
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;templates&#x2F;tree&#x2F;master&#x2F;trivial&quot;&gt;repo&lt;&#x2F;a&gt; and puts them
in your current working directory. Then running &lt;code&gt;direnv allow&lt;&#x2F;code&gt; will setup your
local environment, installing any missing dependencies through Nix as a side
effect.&lt;&#x2F;p&gt;
&lt;p&gt;This blog itself makes use of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;marcopolo.github.io&#x2F;blob&#x2F;master&#x2F;flake.nix#L14&quot;&gt;declarative dev
environments&lt;&#x2F;a&gt;.
Zola is the static site generator I use. When I &lt;code&gt;cd&lt;&#x2F;code&gt; into my blog my environment
is automatically setup with Zola available for previewing the blog.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-nix-works-roughly&quot;&gt;How Nix works, roughly&lt;&#x2F;h2&gt;
&lt;p&gt;This all works off &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&quot;&gt;Nix&lt;&#x2F;a&gt;. Nix is a fantastic package manager and build tool that
provides reproducible versions of packages that don&#x27;t rely on a specific global
system configuration. Specifically packages installed through Nix don&#x27;t rely an
a user&#x27;s &lt;code&gt;&#x2F;usr&#x2F;lib&lt;&#x2F;code&gt; or anything outside of &lt;code&gt;&#x2F;nix&#x2F;store&lt;&#x2F;code&gt;. You don&#x27;t even need
glibc installed (as may be the case if you are on &lt;a href=&quot;https:&#x2F;&#x2F;www.alpinelinux.org&#x2F;&quot;&gt;Alpine
Linux&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;For a deeper dive see &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;guides&#x2F;how-nix-works.html&quot;&gt;How Nix Works&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-example-how-to-setup-a-yarn-based-js-project&quot;&gt;An example, how to setup a Yarn based JS project.&lt;&#x2F;h2&gt;
&lt;p&gt;To be concrete, let me show an example. If I wanted to start a JS project and
use &lt;a href=&quot;https:&#x2F;&#x2F;yarnpkg.com&#x2F;&quot;&gt;Yarn&lt;&#x2F;a&gt; as my dependency manager, I would do something
like this: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1. Create the project folder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; my-project

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 2. Add the boilerplate files.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;nix flake init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; github:marcopolo&#x2F;templates

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 3. Edit flake.nix file to add yarn and NodeJS.
# With your text editor apply this diff:
# -          buildInputs = [ pkgs.hello ];
# +          buildInputs = [ pkgs.yarn pkgs.nodejs-12_x ];

# 4. Allow direnv to run this environment. This will also fetch yarn with Nix
#    and add it to your path.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;direnv allow

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 5. Yarn is now available, proceed as normal. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;yarn init
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can simplify this further by making a Nix Flake template that already has
Yarn and NodeJS included. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;another-example-setting-up-a-rust-project&quot;&gt;Another example. Setting up a Rust project.&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1. Create the project folder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rust-project

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 2. Add the boilerplate files.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;nix flake init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; github:marcopolo&#x2F;templates#rust

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 3. Cargo and rust is now available, proceed as normal. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;cargo init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we used a Rust specific template, so no post template init changes were required.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dissecting-the-flake-nix-file&quot;&gt;Dissecting the &lt;code&gt;flake.nix&lt;&#x2F;code&gt; file&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s break down the &lt;code&gt;flake.nix&lt;&#x2F;code&gt; file so we can understand what it is we are
declaring.&lt;&#x2F;p&gt;
&lt;p&gt;First off, the file is written in &lt;a href=&quot;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Nix_Expression_Language&quot;&gt;Nix, the programming
language&lt;&#x2F;a&gt;. At a high level you
can read this as JSON but with functions. Like JSON it can only represent
expressions (you can only have one top level JSON object), unlike JSON you can
have functions and variables. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This is our top level set expression. Equivalent to the top level JSON object.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# These are comments

  # Here we are defining a set. This is equivalent to a JSON object.
  # The key is description, and the value is the string.
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A very basic flake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# You can define nested sets by using a `.` between key parts.
  # This is equivalent to the JSON object {inputs: {flake-utils: {url: &amp;quot;github:...&amp;quot;}}}
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;flake-utils&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github:numtide&#x2F;flake-utils&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Functions are defined with the syntax of `param: functionBodyExpression`.
  # The param can be destructured if it expects a set, like what we are doing here. 
  # This defines the output of this flake. Our dev environment will make use of
  # the devShell attribute, but you can also define the release build of your
  # package here.
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;self, nixpkgs, flake-utils &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This is a helper to generate these outputs for each system (x86-linux,
    # arm-linux, macOS, ...)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flake-utils&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eachDefaultSystem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(system:
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# The nixpkgs repo has to know which system we are using.
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;pkgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixpkgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;system &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; };
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This is the environment that direnv will use. You can also enter the
        # shell with `nix shell`. The packages in `buildInputs` are what become
        # available to you in your $PATH. As an example this only has the hello
        # package.
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;devShell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkShell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;buildInputs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
        };

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# You can also define a package that is built by default when you run
        # `nix build`.  The build command creates a new folder, `result`, that
        # is a symlink to the build output.
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;defaultPackage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
      });
}

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;on-dev-tools-and-a-dev-setup&quot;&gt;On Dev Tools and A Dev Setup&lt;&#x2F;h2&gt;
&lt;p&gt;There is a subtle distinction on what constitutes a Dev Tool vs A Dev Setup. I
classify Dev Tools as things that need to be available to build or develop a given
project specifically. Think of &lt;code&gt;gcc&lt;&#x2F;code&gt;, &lt;code&gt;yarn&lt;&#x2F;code&gt;, or &lt;code&gt;cargo&lt;&#x2F;code&gt;. The Dev Setup category
are for things that are useful when developing in general. Vim, Emacs,
&lt;a href=&quot;https:&#x2F;&#x2F;geoff.greer.fm&#x2F;ag&#x2F;&quot;&gt;ag&lt;&#x2F;a&gt; are some examples.&lt;&#x2F;p&gt;
&lt;p&gt;Dev tools are worth defining explicitly in your project&#x27;s declarative dev environment (in
a &lt;code&gt;flake.nix&lt;&#x2F;code&gt; file). A Dev Setup is highly personal and not worth defining in the
project&#x27;s declarative dev environment. But that&#x27;s not to say your dev setup in not
worth defining at all. In fact, if you are (or when you become) familiar with
Nix, you can extend the same ideas of this post to your user account with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nix-community&#x2F;home-manager&quot;&gt;Home
Manager&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;With Home Manager You can declaratively define which programs you want available
in your dev setup, what Vim plugins you want installed, what ZSH plugins you
want available and much more. It&#x27;s the core idea of declarative dev environments
taken to the user account level.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-not-docker&quot;&gt;Why not Docker?&lt;&#x2F;h2&gt;
&lt;p&gt;Many folks use Docker to get something like this, but while it gets close – and
in some cases functionally equivalent – it has some shortcomings:&lt;&#x2F;p&gt;
&lt;p&gt;For one, a Dockerfile is not reproducible out of the box. It is common to use
&lt;code&gt;apt-get install&lt;&#x2F;code&gt; in a Dockerfile to add packages. This part isn&#x27;t reproducible
and brings you back to the initial problem I outlined. &lt;&#x2F;p&gt;
&lt;p&gt;Docker is less effecient with storage. It uses layers as the base block of
Docker images rather than packages. This means that it&#x27;s relatively easy to end
up with many similar docker images (for a more thorough analysis check
out &lt;a href=&quot;https:&#x2F;&#x2F;grahamc.com&#x2F;blog&#x2F;nix-and-layered-docker-images&quot;&gt;Optimising Docker Layers for Better Caching with
Nix&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Spinning up a container and doing development inside may not leverage your
existing dev setup. For example you may have Vim setup neatly on your machine,
but resort to &lt;code&gt;vi&lt;&#x2F;code&gt; when developing inside a container.  Or worse, you&#x27;ll 
rebuild your dev setup inside the container, which does nothing more than
add dead weight to the container since it&#x27;s an addition solely for you and not
really part of the project. Of course there are some workarounds to this issue,
you can bind mount a folder and VS Code supports opening a project inside a
container.  &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmkfirmware&#x2F;zmk&quot;&gt;ZMK&lt;&#x2F;a&gt; does this and it has
worked great.&lt;&#x2F;p&gt;
&lt;p&gt;If you are on MacOS, developing inside a container is actually slower. Docker
on Mac relies on running a linux VM in the background and running containers in
that VM. By default that VM is underpowered relative to the host MacOS machine.&lt;&#x2F;p&gt;
&lt;p&gt;There are cases where you actually do only want to run the code in an
x86-linux environment and Docker provides a convenient proxy for this. In these
cases I&#x27;d suggest using Nix to generate the Docker images. This way you get the
declarative and reproducible properties from Nix and the convenience from Docker.&lt;&#x2F;p&gt;
&lt;p&gt;As a caveat to all of the above, if you already have a reproducible dev environment
with a Docker container that works for you, please don&#x27;t throw that all out and
redesign your system from scratch. Keep using it until it stops meeting your
needs and come back to this when it happens. Until then, keep building.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;on-nix-flakes&quot;&gt;On Nix Flakes&lt;&#x2F;h2&gt;
&lt;p&gt;Nix Flakes is still new and in beta, so it&#x27;s likely that if you install Nix from
their &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;download.html&quot;&gt;download page&lt;&#x2F;a&gt; you won&#x27;t have Nix Flakes
available. If you don&#x27;t already have Nix installed, you can install a version
with Nix Flakes &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;numtide&#x2F;nix-unstable-installer&quot;&gt;with the unstable installer&lt;&#x2F;a&gt;,
otherwise read the section on &lt;a href=&quot;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Flakes#Installing_flakes&quot;&gt;installing flakes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;&#x2F;h2&gt;
&lt;p&gt;In modern programming languages we define all our dependencies explicitly and
lock the specific versions used. It&#x27;s about time we do that for all our tools
too. Let&#x27;s get rid of the &lt;code&gt;apt-get install&lt;&#x2F;code&gt; and &lt;code&gt;brew install&lt;&#x2F;code&gt; section of READMEs.&lt;&#x2F;p&gt;

      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>NFTs</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-05-02T00:00:00+00:00</published>
    <updated>2021-05-02T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-nfts/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-nfts/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/05/02/nfts.html</id>
        <link href="https://blog.mediocregopher.com/2021/05/02/nfts.html"/>
        <title>NFTs</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-05-02T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-nfts/</id>
    <content type="html">
        &lt;p&gt;NFT stands for “non-fungible token”. The “token” part refers to an NFT being a
token whose ownership is recorded on a blockchain. Pretty much all
cryptocurrencies, from bitcoin to your favorite shitcoin, could be called tokens
in this sense. Each token has exactly one owner, and ownership of the token can
be transferred from one wallet to another via a transaction on the blockchain.&lt;&#x2F;p&gt;

&lt;p&gt;What sets an NFT apart from a cryptocurrency is the “non-fungible” part.
Cryptocurrency tokens are fungible; one bitcoin is the same as any other bitoin
(according to the protocol, at least), in the same way as one US dollar holds as
much value as any other US dollar. Fungibility is the property of two units of
something being exactly interchangeable.&lt;&#x2F;p&gt;

&lt;p&gt;NFTs are &lt;em&gt;not&lt;&#x2F;em&gt; fungible. One is not the same as any other. Each has some piece
of data attached to it, and each is recorded separately on a blockchain as an
individual token. You can think of an NFT as a unique cryptocurrency which has a
supply of 1 and can’t be divided.&lt;&#x2F;p&gt;

&lt;p&gt;Depending on the protocol used to produce an NFT, the data attached to it might
be completely independent of its identity, even. It may be possible to produce
two NFTs with the exact same data attached to them (again, depending on the
protocol used), but even so those two NFTs will be independent and not
interchangeable.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;fud&quot;&gt;FUD&lt;&#x2F;h2&gt;

&lt;p&gt;Before getting into why NFTs are interesting, I want to first address some
common criticism I see of them online (aka, in my twitter feed). The most
common, and unfortunately least legitimate, criticism has to do with the
environmental impact of NFTs. While the impact on energy usage and the
environment when talking about bitcoin is a topic worth going into, bitcoin
doesn’t support hosting NFTs and therefore that topic is irrelevant here.&lt;&#x2F;p&gt;

&lt;p&gt;Most NFTs are hosted on ethereum, which does have a comparable energy footprint
to bitcoin (it’s somewhat less than half, according to the internet). &lt;em&gt;However&lt;&#x2F;em&gt;,
ethereum is taking actual, concrete steps towards changing its consensus
mechanism from proof-of-work (PoW) to proof-of-stake (PoS), which will cut the
energy usage of the network down to essentially nothing. The rollout plan for
Ethereum PoS covers the next couple of years, and after that we don’t really
have to worry about the energy usage of NFTs any longer.&lt;&#x2F;p&gt;

&lt;p&gt;The other big criticism I hear is about the value and nature of art and what the
impact of NFTs are in that area. I’m going to talk more about this in this post,
but, simply put, I don’t think that the value and nature of art are immutable,
anymore than the form of art is immutable. Perhaps NFTs &lt;em&gt;will&lt;&#x2F;em&gt; change art, but
change isn’t bad in itself, and furthermore I don’t think they will actually
change it all that much. People will still produce art, it’s only the
distribution mechanism that might change.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;real-useful-boring-things&quot;&gt;Real, Useful, Boring Things&lt;&#x2F;h2&gt;

&lt;p&gt;Most of the coverage around NFTs has to do with using them to represent
collectibles and art. I’d like to start by talking about other use-cases, those
where NFTs are actually “useful” (in the dull, practical sense).&lt;&#x2F;p&gt;

&lt;p&gt;Each NFT can carry some piece of data along with it. This data can be anything,
but for a practical use-case it needs to be something which indicates ownership
of some internet good. It &lt;em&gt;cannot&lt;&#x2F;em&gt; be the good itself. For example, an NFT which
contains an image does not really convey the ownership of that image; anyone can
copy the image data and own that image as well (intellectual property rights be
damned!).&lt;&#x2F;p&gt;

&lt;p&gt;A real use-case for NFTs which I’m already, if accidentally, taking advantage
of, is domain name registration. I am the proud owner of the
&lt;a href=&quot;https:&#x2F;&#x2F;nfton.me&#x2F;nft&#x2F;0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85&#x2F;7558304748055753202351203668187280010336475031529884349040105080320604507070&quot;&gt;mediocregopher.eth&lt;&#x2F;a&gt; domain name (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.eth&lt;&#x2F;code&gt; TLD is not yet in wide usage
in browsers, but one day!). The domain name’s ownership is indicated by an NFT:
whoever holds that NFT, which I currently do, has the right to change all
information attached to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mediocregopher.eth&lt;&#x2F;code&gt; domain. If I want to sell the
domain all I need to do is sell the NFT, which can be done via an ethereum
transaction.&lt;&#x2F;p&gt;

&lt;p&gt;Domain names work well for NFTs because knowing the data attached to the NFT
doesn’t actually do anything for you. It’s the actual &lt;em&gt;ownership&lt;&#x2F;em&gt; of the NFT
which unlocks value. And I think this is the key rule for where to look to apply
NFTs to practical use-cases: the ownership of the NFT has to unlock some
functionality, not the data attached to it. The functionality has to be digital
in nature, as well, as anything related to the physical world is not as easily
guaranteed.&lt;&#x2F;p&gt;

&lt;p&gt;I haven’t thought of many further practical use-cases of NFTs, but we’re still
in early stages and I’m sure more will come up. In any case, the practical stuff
is boring, let’s talk about art.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;art-memes-and-all-wonderful-things&quot;&gt;Art, Memes, and All Wonderful Things&lt;&#x2F;h2&gt;

&lt;p&gt;For many the most baffling aspect of NFTs is their use as collectibles. Indeed,
their use as collectibles is their &lt;em&gt;primary&lt;&#x2F;em&gt; use right now, even though these
collectibles procur no practical value for their owner; at best they are
speculative goods, small gambles, and at worst just a complete waste of money.
How can this be?&lt;&#x2F;p&gt;

&lt;p&gt;The curmudgeons of the world would have you believe that money is only worth
spending on goods which offer practical value. If the good is neither consumable
in a way which meets a basic need, nor produces other goods of further value,
then it is worthless. Obviously NFTs fall into the “worthless” category.&lt;&#x2F;p&gt;

&lt;p&gt;Unfortunately for them, the curmudgeons don’t live in reality. People spend
their money on stupid, pointless shit all the time. I’m prepared to argue that
people almost exclusively spend their money on stupid, pointless shit. The
monetary value of a good has very little to do with its ability to meet a basic
necessity or its ability to produce value (whatever that even really means), and
more to do with how owning the shiny thing or doing the fun thing makes us
stupid monkeys very happy (for a time).&lt;&#x2F;p&gt;

&lt;p&gt;Rather than bemoan NFTs, and our simple irrationality which makes them
desirable, let’s embrace them as a new tool for expressing our irrationality to
the world, a tool which we have yet to fully explore.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;a-moment-captured&quot;&gt;A Moment Captured&lt;&#x2F;h3&gt;

&lt;p&gt;It’s 1857 and Jean-François Millet reveals to the world what would become one of
his best known works: &lt;em&gt;The Gleaners&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;

&lt;div style=&quot;
  box-sizing: border-box;
  text-align: center;
  padding-left: 2em;
  padding-right: 2em;
  margin-bottom: 1em;&quot;&gt;
  &lt;a href=&quot;&#x2F;img&#x2F;nfts&#x2F;gleaners.jpg&quot; target=&quot;_blank&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(min-width: 1000px) and (min-resolution: 3.0dppx)&quot; srcset=&quot;&#x2F;img&#x2F;nfts&#x2F;3000px&#x2F;gleaners.jpg&quot; &#x2F;&gt;
      &lt;source media=&quot;(min-width: 1000px) and (min-resolution: 2.5dppx)&quot; srcset=&quot;&#x2F;img&#x2F;nfts&#x2F;2500px&#x2F;gleaners.jpg&quot; &#x2F;&gt;
      &lt;source media=&quot;(min-width: 1000px) and (min-resolution: 2.0dppx)&quot; srcset=&quot;&#x2F;img&#x2F;nfts&#x2F;2000px&#x2F;gleaners.jpg&quot; &#x2F;&gt;
      &lt;source media=&quot;(min-width: 1000px) and (min-resolution: 1.5dppx)&quot; srcset=&quot;&#x2F;img&#x2F;nfts&#x2F;1500px&#x2F;gleaners.jpg&quot; &#x2F;&gt;
      &lt;source media=&quot;(min-width: 500px), (min-resolution: 1.1dppx)&quot; srcset=&quot;&#x2F;img&#x2F;nfts&#x2F;1000px&#x2F;gleaners.jpg&quot; &#x2F;&gt;
      &lt;source srcset=&quot;&#x2F;img&#x2F;nfts&#x2F;500px&#x2F;gleaners.jpg&quot; &#x2F;&gt;
      &lt;img style=&quot;max-height: 60vh;&quot; src=&quot;&#x2F;img&#x2F;nfts&#x2F;1000px&#x2F;gleaners.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
    &lt;&#x2F;picture&gt;
  &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;

&lt;p&gt;The painting depicts three peasants gleaning a field, the bulk of their harvest
already stacked high in the background. The &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;The_Gleaners&quot;&gt;wikipedia entry&lt;&#x2F;a&gt; has this
to say about the painting’s eventual final sale:&lt;&#x2F;p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In 1889, the painting, then owned by banker Ferdinand Bischoffsheim, sold for
300,000 francs at auction. The buyer remained anonymous, but rumours were
that the painting was coveted by an American buyer. It was announced less than
a week later that Champagne maker Jeanne-Alexandrine Louise Pommery had
acquired the piece, which silenced gossip on her supposed financial issues
after leaving her grapes on the vines weeks longer than her competitors.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p&gt;I think we can all breathe a sigh of relief for Jeanne-Alexandrine.&lt;&#x2F;p&gt;

&lt;p&gt;I’d like to talk about &lt;em&gt;why&lt;&#x2F;em&gt; this painting was worth 300k francs, and really
what makes art valuable at all (aside from the money laundering and tax evasion
that high-value art enables). Millet didn’t merely take a picture using paints
and canvas, an exact replica of what his eyes could see. It’s doubtful this
scene ever played out in reality, exactly as depicted, at all! It existed only
within Millet himself.&lt;&#x2F;p&gt;

&lt;p&gt;In &lt;em&gt;The Gleaners&lt;&#x2F;em&gt; Millet captured far more than an image: the image itself
conveys the struggle of a humble life, the joy of the harvest, the history of
the french peasantry (and therefore the other french societal classes as well),
the vastness of the world compared to our little selves, and surely many other
things, each dependant on the viewer. The image conveys emotions, and most
importantly it conveys emotions captured at a particular moment, a moment which
no longer exists and will never exist again. The capturing of such a moment by
an artist capable of doing it some justice, so others can experience it to any
significant degree far into the future, is a rare event.&lt;&#x2F;p&gt;

&lt;p&gt;Access to that rare moment is what is being purchased for 300k francs. We refer
to the painting as the “original”, but really the painting is only the
first-hand reproduction of the moment, which is the true original, and proximity
to the true original is what is being purchased. All other reproductions must be
based on this first-hand one (be they photographs or painted copies), and are
therefore second and third-hand.&lt;&#x2F;p&gt;

&lt;p&gt;Consider the value of a concert ticket; it is based on both how much in demand
the performance is, how close to the performance the seating section is, and how
many seats in that section there are. When one purchases the “original” &lt;em&gt;The
Gleaners&lt;&#x2F;em&gt;, one is purchasing a front-row ticket to a world-class performance at
a venue with only one seat. That is why it was worth 300k francs.&lt;&#x2F;p&gt;

&lt;p&gt;I have one final thing to say here and then I’ll move onto the topic at hand:
the history of the work compounds its value as well. &lt;em&gt;The Gleaners&lt;&#x2F;em&gt; conveys an
emotion, but knowing the critical reaction of the french elite at its first
unveiling can add to that emotion.&lt;&#x2F;p&gt;

&lt;p&gt;Again, from the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;The_Gleaners&quot;&gt;wiki entry&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Millet’s The Gleaners was also not perceived well due to its large size, 33
inches by 44 inches, or 84 by 112 centimetres. This was large for a painting
depicting labor. Normally this size of a canvas was reserved for religious or
mythological style paintings. Millet’s work did not depict anything
religiously affiliated, nor was there any reference to any mythological
beliefs. The painting illustrated a realistic view of poverty and the working
class. One critic commented that “his three gleaners have gigantic
pretensions, they pose as the Three Fates of Poverty…their ugliness and
their grossness unrelieved.”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p&gt;Now scroll back up and see if you don’t now have more affinity for the painting
than before you knew that. If so, then the face value just went up, just a
little bit.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;the-value-of-an-nft&quot;&gt;The Value of an NFT&lt;&#x2F;h3&gt;

&lt;p&gt;With this acknowledgement of &lt;em&gt;why&lt;&#x2F;em&gt; people desire art, we can understand why they
would want an NFT depicting an artwork.&lt;&#x2F;p&gt;

&lt;p&gt;A few days ago an NFT of this image sold for almost $500k:&lt;&#x2F;p&gt;

&lt;div style=&quot;
  box-sizing: border-box;
  text-align: center;
  padding-left: 2em;
  padding-right: 2em;
  margin-bottom: 1em;&quot;&gt;
  &lt;a href=&quot;&#x2F;img&#x2F;nfts&#x2F;disaster-girl.jpg&quot; target=&quot;_blank&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(min-width: 1000px) and (min-resolution: 2.5dppx)&quot; srcset=&quot;&#x2F;img&#x2F;nfts&#x2F;2500px&#x2F;disaster-girl.jpg&quot; &#x2F;&gt;
      &lt;source media=&quot;(min-width: 1000px) and (min-resolution: 2.0dppx)&quot; srcset=&quot;&#x2F;img&#x2F;nfts&#x2F;2000px&#x2F;disaster-girl.jpg&quot; &#x2F;&gt;
      &lt;source media=&quot;(min-width: 1000px) and (min-resolution: 1.5dppx)&quot; srcset=&quot;&#x2F;img&#x2F;nfts&#x2F;1500px&#x2F;disaster-girl.jpg&quot; &#x2F;&gt;
      &lt;source media=&quot;(min-width: 500px), (min-resolution: 1.1dppx)&quot; srcset=&quot;&#x2F;img&#x2F;nfts&#x2F;1000px&#x2F;disaster-girl.jpg&quot; &#x2F;&gt;
      &lt;source srcset=&quot;&#x2F;img&#x2F;nfts&#x2F;500px&#x2F;disaster-girl.jpg&quot; &#x2F;&gt;
      &lt;img style=&quot;max-height: 60vh;&quot; src=&quot;&#x2F;img&#x2F;nfts&#x2F;1000px&#x2F;disaster-girl.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
    &lt;&#x2F;picture&gt;
  &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;

&lt;p&gt;Most of the internet knows this image as &lt;em&gt;Disaster Girl&lt;&#x2F;em&gt;, a meme which has been
around since time immemorial (from the internet’s perspective, anyway, in
reality it was taken in 2007). The moment captured is funny, the girl in the
image smiling as if she had set the fire which blazes in the background. But, as
with &lt;em&gt;The Gleaners&lt;&#x2F;em&gt;, the image itself isn’t everything. The countless usages of
the image, the original and all of its remixes, all passed around as memes on
the internet for the past 14 years, have all worked to add to the image’s
demand. &lt;em&gt;Disaster Girl&lt;&#x2F;em&gt; is no longer just a funny picture or a versatile meme
format, it’s a piece of human history and nostalgia.&lt;&#x2F;p&gt;

&lt;p&gt;Unlike physical paintings, however, internet memes are imminently copyable. If
they weren’t they could hardly function as memes! We can only have one
“original” &lt;em&gt;The Gleaners&lt;&#x2F;em&gt;, but anyone with a computer can have an exact, perfect
copy of the original &lt;em&gt;Disaster Girl&lt;&#x2F;em&gt;, such that there’s no true original. But if
I were to put up an NFT of &lt;em&gt;Disaster Girl&lt;&#x2F;em&gt; for sale, I wouldn’t get a damned
penny for it (probably). Why was that version apparently worth $500k?&lt;&#x2F;p&gt;

&lt;p&gt;The reason is that the seller is the girl in the image herself, now 21 years old
and in college. I have no particular connection to &lt;em&gt;Disaster Girl&lt;&#x2F;em&gt;, so buying an
NFT from me would be like buying a print of &lt;em&gt;The Gleaners&lt;&#x2F;em&gt; off some rando in the
street; just a shallow copy, worth only the material it’s printed on plus some
labor, and nothing more. But when Disaster Girl herself sells the NFT, then the
buyer is actually part of the moment, they are entering themselves into the
history of this meme that the whole world has taken a part in for the last 14
years! $500k isn’t so unreasonable in that light.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;property-on-the-internet&quot;&gt;Property on the Internet&lt;&#x2F;h3&gt;

&lt;p&gt;I don’t make it a secret that I consider “intellectual property” to be a giant
fucking scam that the world has unfortunately bought into. Data, be it a
physical book or a digital file, is essentially free to copy, and so any price
placed on the copying or sharing of knowledge is purely artificial. But we don’t
have an alternate mechanism for paying producers of knowledge and art, and so we
continue to treat data as property even though it bears absolutely no
resemblance to anything of the kind.&lt;&#x2F;p&gt;

&lt;p&gt;Disaster Girl has not, to my knowledge, asserted any property rights on the
image of herself. Doing so in any real sense, beyond going after a handful of
high-value targets who might settle a lawsuit, is simply not a feasible option.
Instead, by selling an NFT, Disaster Girl has been compensated for her labor
(meager as it was) in a way which was proportional to its impact on the world,
all without the invocation of the law. A great success!&lt;&#x2F;p&gt;

&lt;p&gt;Actually, the labor was performed by Disaster Girl’s father, who took the
original image and sent it into a photo contest or something. What would have
happened if the NFT was sold in his name? I imagine that it would not have sold
for nearly as much. This makes sense to me, even if it does not make sense from
a purely economical point of view. Disaster Girl’s father did the work in the
moment, but being a notable figure to the general public is its own kind of
labor, and it’s likely that his daughter has born the larger burden over time.
The same logic applies to why we pay our movie stars absurd amounts even while
the crew makes a “normal” wage.&lt;&#x2F;p&gt;

&lt;p&gt;Should the father not then get compensated at all? I think he should, and I
think he could! If he were to produce an NFT of his own, of the exact same
image, it would also fetch a decent price. Probably not 6 figures, possibly not
even 4, but considering the actual contribution he made (taking a picture and
uploading it), I think the price would be fair. How many photographers get paid
anything at all for their off-hand pictures of family outings?&lt;&#x2F;p&gt;

&lt;p&gt;And this is the point I’d like to make: an NFT’s price, like in all art, is
proportional to the distance to the moment captured. The beauty is that this
distance is purely subjective; it is judged not by rules set down in law by
fallable lawyers, but instead by the public at large. It is, in essence, a
democritization of intellectual property disputes. If multiple people claim to
having produced a single work, let them all produce an NFT, and the market will
decide what each of their work is worth.&lt;&#x2F;p&gt;

&lt;p&gt;Will the market ever be wrong? Certainly. But will it distribute the worth more
incorrectly than our current system, where artists must sell their rights to a
large publisher in order to see a meager profit, while the publisher rakes in
the vastly larger share? I sincerely doubt it.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;content-creation&quot;&gt;Content Creation&lt;&#x2F;h3&gt;

&lt;p&gt;Another interesting mechanism of NFTs is that some platforms (e.g.
&lt;a href=&quot;https:&#x2F;&#x2F;rarible.com&#x2F;&quot;&gt;Rarible&lt;&#x2F;a&gt;) allow the seller to attach a royalty percentage to the NFT
being solde. When this is done it means the original seller will receive some
percentage of all future sales of that NFT.&lt;&#x2F;p&gt;

&lt;p&gt;I think this opens some interesting possibilities for content creators. Normally
a content creator would need to sell ads or subscriptions in order to profit
from their content, but if they instead&#x2F;in addition sell NFTs associated with
their content (e.g. one per episode of their youtube show) they can add another
revenue stream. As their show, or whatever, begins to take off, older NFTs
become more valuable, and the content creator can take advantage of that new
increased value via royalties set on the NFTs.&lt;&#x2F;p&gt;

&lt;p&gt;There’s some further interesting side-effects that come from using NFTs in this
way. If a creator releases a work, and a corresponding NFT for that work, their
incentive is no longer to gate access to that work (as it would be in our
current IP system) or burden the work with advertisements and pleas for
subscriptions&#x2F;donations. There’s an entirely new goalpost for the creator:
actual value to others.&lt;&#x2F;p&gt;

&lt;p&gt;The value of the NFT is based entirely and arbitrarily on other’s feelings
towards the original work, and so it is in the creator’s interest to increase
the visibility and virality of the work. We can expect a creator who has sold an
NFT for a work, with royalties attached, to actively ensure there is as
little gatekeeping around the work as possible, and to create work which is
completely platform-agnostic and available absolutely everywhere. Releasing a
work as public-domain could even become a norm, should NFTs prove more
profitable than other revenue streams.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;shill-gang&quot;&gt;Shill Gang&lt;&#x2F;h3&gt;

&lt;p&gt;While the content creator’s relationship with their platform(s) will change
drastically, I also expect that their relationship with their fans, or really
their fan’s relationship with the creator’s work, will change even more. Fans
are no longer passive viewers, they can have an actual investment in a work’s
success. Where fans currently shill their favorite show or game or whatever out
of love, they can now also do it for personal profit. I think this is the worst
possible externality of NFTs I’ve encountered: internet fandom becoming orders
of magnitude more fierce and unbearable, as they relentlessly shill their
investments to the world at large.&lt;&#x2F;p&gt;

&lt;p&gt;There is one good thing to come out of this new fan&#x2F;content relationship though,
and that’s the fan’s role in distribution and preservation of work. Since fans
now have a financial incentive to see a work persist into the future, they will
take it upon themselves to ensure that the works won’t accidentally fall off the
face of the internet (as things often do). This can be difficult currently since
work is often tied down with IP restrictions, but, as we’ve established, work
which uses NFTs for revenue is incentivized to &lt;em&gt;not&lt;&#x2F;em&gt; tie itself down in any way,
so fans will have much more freedom in this respect.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;art&quot;&gt;Art&lt;&#x2F;h3&gt;

&lt;p&gt;It seems unlikely to me that art will cease to be created, or cease to be
valuable. The human creative instinct comes prior to money, and we have always
created art regardless of economic concerns. It’s true that the nature of our
art changes according to economics (don’t forget to hit that “Follow” button at
the top!), but if anything I think NFTs can change our art for the better. Our
work can be more to the point, more accessible, and less encumbered by legal
bullshit.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;fin&quot;&gt;Fin&lt;&#x2F;h2&gt;

&lt;p&gt;That crypto cat is out of the bag, at this point, and I doubt if there’s
anything that can put it back. The world has never before had the tools that
cryptocurrency and related technologies (like NFTs) offer, and our lives will
surely change as new uses of these tools make themselves apparent. I’ve tried to
extrapolate some uses and changes that could come out of NFTs here, but I have
no doubt that I’ve missed or mistook some.&lt;&#x2F;p&gt;

&lt;p&gt;It’s my hope that this post has at least offered some food-for-thought related
to NFTs, beyond the endless hot takes and hype that can be found on social
media, and that the reader can now have a bigger picture view of NFTs and where
they might take us as a society, should we embrace them.&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Loops in Ginger</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-04-27T00:00:00+00:00</published>
    <updated>2021-04-27T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-loops-in-ginger/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-loops-in-ginger/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/04/27/loops-in-ginger.html</id>
        <link href="https://blog.mediocregopher.com/2021/04/27/loops-in-ginger.html"/>
        <title>Loops in Ginger</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-04-27T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-loops-in-ginger/</id>
    <content type="html">
        &lt;p&gt;In previous posts in this series I went over the general idea of the ginger
programming language, and some of its properties. To recap:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ginger is a programming language whose syntax defines a directed graph, in the
same way that a LISP language’s syntax defines nested lists.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Graph edges indicate an operation, while nodes indicate a value.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;The special values &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out&lt;&#x2F;code&gt; are used when interpreting a graph as a
function.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;A special node type, the tuple, is defined as being a node whose value is an
ordered set of input edges.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Another special node type, the fork, is the complement to the tuple. A fork is
defined as being a node whose value is an ordered set of output edges.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;The special &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; operation accepts a 2-tuple, the first value being some state
value and the second being a tuple. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; operation expects to be directed
towards a 2-fork. If the boolean is true then the top output edge of the fork
is taken, otherwise the bottom is taken. The state value is what’s passed to
the taken edge.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;There were some other detail rules but I don’t remember them off the top of my
head.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;loops&quot;&gt;Loops&lt;&#x2F;h2&gt;

&lt;p&gt;Today I’d like to go over my ideas for how loops would work in ginger. With
loops established ginger would officially be a Turing complete language and,
given time and energy, real work could actually begin on it.&lt;&#x2F;p&gt;

&lt;p&gt;As with conditionals I’ll start by establishing a base example. Let’s say we’d
like to define an operation which prints out numbers from 0 up to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt;
is given as an argument. In go this would look like:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;printRange&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;n&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;With that established, let’s start looking at different patterns.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;goto&quot;&gt;Goto&lt;&#x2F;h2&gt;

&lt;p&gt;In the olden days the primary looping construct was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goto&lt;&#x2F;code&gt;, which essentially
teleports the program counter (aka instruction pointer) to another place in the
execution stack. Pretty much any other looping construct can be derived from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goto&lt;&#x2F;code&gt; and some kind of conditional, so it’s a good starting place when
considering loops in ginger.&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(in -println-&amp;gt; } -incr-&amp;gt; out) -&amp;gt; println-incr

0  -&amp;gt; }    -&amp;gt; } -if-&amp;gt; { -&amp;gt; out
in -&amp;gt; } -eq-&amp;gt; }       { -&amp;gt; } -upd-&amp;gt; } -+
      ^               0 -&amp;gt; }           |
      |    println-incr -&amp;gt; }           |
      |                                |
      +--------------------------------+
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;(Note: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upd&lt;&#x2F;code&gt; operation is used here for convenience. It takes in three
arguments: A tuple, an index, and an operation. It applies the operation to the
tuple element at the given index, and returns a new tuple with that index set to
the value returned.)&lt;&#x2F;p&gt;

&lt;p&gt;Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goto&lt;&#x2F;code&gt; is performed using a literal arrow going from the right to left.
it’s ugly and hard to write, and would only be moreso the more possible gotos an
operation has.&lt;&#x2F;p&gt;

&lt;p&gt;It also complicates our graphs in a significant way: up till now ginger graphs
have have always been directed &lt;em&gt;acyclic&lt;&#x2F;em&gt; graphs (DAGs), but by introducing this
construct we allow that graphs might be cyclic. It’s not immediately clear to me
what the consequences of this will be, but I’m sure they will be great. If
nothign else it will make the compiler much more complex, as each value can no
longer be defined in terms of its input edge, as that edge might resolve back to
the value itself.&lt;&#x2F;p&gt;

&lt;p&gt;While conceptually sound, I think this strategy fails the practability test. We
can do better.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;while&quot;&gt;While&lt;&#x2F;h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;&#x2F;code&gt; construct is the basic looping primitive of iterative languages
(some call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;&#x2F;code&gt;, but they’re just lying to themselves).&lt;&#x2F;p&gt;

&lt;p&gt;Try as I might, I can’t come up with a way to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;&#x2F;code&gt; work with ginger.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;&#x2F;code&gt; ultimately relies on scoped variables being updated in place to
function, while ginger is based on the concept of pipelining a set of values
through a series of operations. From the point of view of the programmer these
operations are essentially immutable, so the requirement of a variable which can
be updated in place cannot be met.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;recur&quot;&gt;Recur&lt;&#x2F;h2&gt;

&lt;p&gt;This pattern is based on how many functional languages, for example erlang,
handle looping. Rather than introducing new primitives around looping, these
language instead ensure that tail calls are properly optimized and uses those
instead. So loops are implemented as recursive function calls.&lt;&#x2F;p&gt;

&lt;p&gt;For ginger to do this it would make sense to introduce a new special value,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recur&lt;&#x2F;code&gt;, which could be used alongside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out&lt;&#x2F;code&gt; within operations. When
the execution path hits a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recur&lt;&#x2F;code&gt; then it gets teleported back to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;&#x2F;code&gt;
value, with the input to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recur&lt;&#x2F;code&gt; now being the output from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;&#x2F;code&gt;. Usage of it
would look like:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(

    (in -println-&amp;gt; } -incr-&amp;gt; out) -&amp;gt; println-incr

    in    -&amp;gt; } -if-&amp;gt; { -&amp;gt; out
    in -eq-&amp;gt; }       { -&amp;gt; } -upd-&amp;gt; } -&amp;gt; recur
                     0 -&amp;gt; }
          println-incr -&amp;gt; }

) -&amp;gt; inner-op

0  -&amp;gt; } -inner-op-&amp;gt; out
in -&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;This looks pretty similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goto&lt;&#x2F;code&gt; example overall, but with the major
difference that the looping body had to be wrapped into an inner operation. The
reason for this is that the outer operation only takes in one argument, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt;, but
the loop actually needs two pieces of state to function: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt; and the current
value. So the inner operation loops over these two pieces of state, and the
outer operation supplies &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt; and an initial iteration value (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;&#x2F;code&gt;) to that inner
operation.&lt;&#x2F;p&gt;

&lt;p&gt;This seems cumbersome on the surface, but what other languages do (such as
erlang, which is the one I’m most familiar with) is to provide built-in macros
on top of this primitive which make it more pleasant to use. These include
function polymorphism and a more familiar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;&#x2F;code&gt; construct. With a decent macro
capability ginger could do the same.&lt;&#x2F;p&gt;

&lt;p&gt;The benefits here are that the graphs remain acyclic, and the syntax has not
been made more cumbersome. It follows conventions established by other
languages, and ensures the language will be capable of tail-recursion.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;mapreduce&quot;&gt;Map&#x2F;Reduce&lt;&#x2F;h2&gt;

&lt;p&gt;Another functional strategy which is useful is that of the map&#x2F;reduce power
couple. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;&#x2F;code&gt; operation takes a sequence of values and an operation, and
returns a sequence of the same length where the operation has been applied to
each value in the original sequence individually. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;&#x2F;code&gt; operation is more
complicated (and not necessary for out example), but it’s essentially a
mechanism to turn a sequence of values into a single value.&lt;&#x2F;p&gt;

&lt;p&gt;For our example we only need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;&#x2F;code&gt;, plus one more helper operation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range&lt;&#x2F;code&gt;.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range&lt;&#x2F;code&gt; takes a number &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt; and returns a sequence of numbers starting at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;&#x2F;code&gt; and
ending at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n-1&lt;&#x2F;code&gt;. Our print example now looks like:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;in -range-&amp;gt; } -map-&amp;gt; out
 println -&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Very simple! Map&#x2F;reduce is a well established pattern and is probably the
best way to construct functional programs. However, the question remains whether
these are the best &lt;em&gt;primitives&lt;&#x2F;em&gt; for looping, and I don’t believe they are. Both
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;&#x2F;code&gt; can be derived from conditional and looping primitives like
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recur&lt;&#x2F;code&gt;, and they can’t do some things that those primitives can. While&lt;&#x2F;p&gt;

&lt;p&gt;I expect one of the first things which will be done in ginger is to define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;&#x2F;code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;&#x2F;code&gt; in terms of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; and a looping primitive, and use them generously
throughout the code, I think the fact that they can be defined in terms of
lower-level primitives indicates that they aren’t the right looping primitives
for ginger.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;

&lt;p&gt;Unlike with the conditionals posts, where I started out not really knowing what
I wanted to do with conditionals, I more or less knew where this post was going
from the beginning. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recur&lt;&#x2F;code&gt; is, in my mind, the best primitive for looping in
ginger. It provides the flexibility to be extended to any use-case, while not
complicating the structure of the language. While possibly cumbersome to
implement directly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recur&lt;&#x2F;code&gt; can be used as a primitive to construct more
convenient looping operations like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;p&gt;As a final treat (lucky you!), here’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;&#x2F;code&gt; defined using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recur&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(
    in -0-&amp;gt; mapped-seq
    in -1-&amp;gt; orig-seq
    in -2-&amp;gt; op

    mapped-seq -len-&amp;gt; i

              mapped-seq -&amp;gt; } -if-&amp;gt; { -&amp;gt; out
    orig-seq -len-&amp;gt; } -eq-&amp;gt; }       { -&amp;gt; } -append-&amp;gt; } -&amp;gt; recur
               i -&amp;gt; }                    }           }
                                         }           }
                   orig-seq -i-&amp;gt; } -op-&amp;gt; }           }
                                                     }
                                         orig-seq -&amp;gt; }
                                               op -&amp;gt; }
) -&amp;gt; inner-map

  () -&amp;gt; } -inner-map-&amp;gt; out
in -0-&amp;gt; }
in -1-&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;The next step for ginger is going to be writing an actual implementation of the
graph structure in some other language (let’s be honest, it’ll be in go). After
that we’ll need a syntax definition which can be used to encode&#x2F;decode that
structure, and from there we can start actually implementing the language!&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Ripple V2: A Better Game</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-04-11T00:00:00+00:00</published>
    <updated>2021-04-11T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-ripple-v2-a-better-game/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-ripple-v2-a-better-game/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/04/11/ripple-v2.html</id>
        <link href="https://blog.mediocregopher.com/2021/04/11/ripple-v2.html"/>
        <title>Ripple V2: A Better Game</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-04-11T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-ripple-v2-a-better-game/</id>
    <content type="html">
        &lt;p&gt;
    &lt;b&gt;Movement:&lt;&#x2F;b&gt; Arrow keys or WASD&lt;br &#x2F;&gt;
    &lt;b&gt;Jump:&lt;&#x2F;b&gt; Space&lt;br &#x2F;&gt;
    &lt;b&gt;Goal:&lt;&#x2F;b&gt; Jump as many times as possible without touching a ripple!&lt;br &#x2F;&gt;
    &lt;br &#x2F;&gt;
    &lt;b&gt;Press Jump To Begin!&lt;&#x2F;b&gt;
&lt;&#x2F;p&gt;

&lt;p&gt;&lt;em&gt;Who can make the muddy water clear?&lt;br &#x2F;&gt;
Let it be still, and it will gradually become clear.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

&lt;canvas id=&quot;canvas&quot; style=&quot;border:1px dashed #AAA&quot; tabindex=&quot;0&quot;&gt;
Your browser doesn&#x27;t support canvas. At this point in the world that&#x27;s actually
pretty cool, well done!
&lt;&#x2F;canvas&gt;
&lt;p&gt;&lt;button onclick=&quot;reset()&quot;&gt;(R)eset&lt;&#x2F;button&gt;
&lt;span style=&quot;font-size: 2rem; margin-left: 1rem;&quot;&gt;Score:
    &lt;span style=&quot;font-weight: bold&quot; id=&quot;score&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;

&lt;script type=&quot;text&#x2F;javascript&quot;&gt;

const palette = [
    &quot;#264653&quot;,
    &quot;#2A9D8F&quot;,
    &quot;#E9C46A&quot;,
    &quot;#F4A261&quot;,
    &quot;#E76F51&quot;,
];

const width = 800;
const height = 600;

function hypotenuse(w, h) {
    return Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2));
}

let canvas = document.getElementById(&quot;canvas&quot;);
canvas.width = width;
canvas.height = height;

const whitelistedKeys = {
    &quot;ArrowUp&quot;: {},
    &quot;KeyW&quot;: {map: &quot;ArrowUp&quot;},
    &quot;ArrowLeft&quot;: {},
    &quot;KeyA&quot;: {map: &quot;ArrowLeft&quot;},
    &quot;ArrowRight&quot;: {},
    &quot;KeyD&quot;: {map: &quot;ArrowRight&quot;},
    &quot;ArrowDown&quot;: {},
    &quot;KeyS&quot;: {map: &quot;ArrowDown&quot;},
    &quot;Space&quot;: {},
    &quot;KeyR&quot;: {},
};

let keyboard = {};

canvas.addEventListener(&#x27;keydown&#x27;, (event) =&gt; {
    let keyInfo = whitelistedKeys[event.code];
    if (!keyInfo) return;

    let code = event.code;
    if (keyInfo.map) code = keyInfo.map;

    event.preventDefault();
    keyboard[code] = true;
});

canvas.addEventListener(&#x27;keyup&#x27;, (event) =&gt; {
    let keyInfo = whitelistedKeys[event.code];
    if (!keyInfo) return;

    let code = event.code;
    if (keyInfo.map) code = keyInfo.map;

    event.preventDefault();
    delete keyboard[code];
});


const C = 700; &#x2F;&#x2F; scales the overall speed of the radius
const T = 500; &#x2F;&#x2F; on which tick the radius change becomes linear

&#x2F;*
    f(x) = sqrt(C*x)                        when x &lt; T
           (C&#x2F;(2*sqrt(CT)))(x-T) + sqrt(CT) when x &gt;= T

    radius(x) = f(x) + playerRadius;
*&#x2F;

const F1 = (x) =&gt; Math.sqrt(C*x);
const F2C1 = C &#x2F; (2 * Math.sqrt(C*T));
const F2C2 = Math.sqrt(C * T);
const F2 = (x) =&gt; (F2C1 * (x - T)) + F2C2;
const F = (x) =&gt; {
    if (x &lt; T) return F1(x);
    return F2(x);
};

class Ripple {

    constructor(id, currTick, x, y, bounces, color) {
        this.id = id;
        this.tick = currTick;
        this.x = x;
        this.y = y;
        this.thickness = Math.pow(bounces+1, 1.25);
        this.color = color;
        this.winner = false;

        this.maxRadius = hypotenuse(x, y);
        this.maxRadius = Math.max(this.maxRadius, hypotenuse(width-x, y));
        this.maxRadius = Math.max(this.maxRadius, hypotenuse(x, height-y));
        this.maxRadius = Math.max(this.maxRadius, hypotenuse(width-x, height-y));
    }

    radius(currTick) {
        const x = currTick - this.tick;
        return F(x) + playerRadius;
    }

    draw(ctx, currTick) {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius(currTick), 0, Math.PI * 2, false);
        ctx.closePath();
        ctx.lineWidth = this.thickness;
        ctx.strokeStyle = this.winner ? &quot;#FF0000&quot; : this.color;
        ctx.stroke();
    }

    canGC(currTick) {
        return this.radius(currTick) &gt; this.maxRadius;
    }
}

const playerRadius = 10;
const playerMoveAccel = 0.5;
const playerMoveDecel = 0.7;
const playerMaxMoveSpeed = 4;
const playerJumpSpeed = 0.08;
const playerMaxHeight = 1;
const playerGravity = 0.01;

class Player{

    constructor(x, y, color) {
        this.x = x;
        this.y = y;
        this.z = 0;
        this.xVelocity = 0;
        this.yVelocity = 0;
        this.zVelocity = 0;
        this.color = color;
        this.falling = false;
        this.lastJumpHeight = 0;
        this.loser = false;
    }

    act() {
        if (keyboard[&quot;ArrowUp&quot;]) {
            this.yVelocity = Math.max(-playerMaxMoveSpeed, this.yVelocity - playerMoveAccel);
        } else if (keyboard[&quot;ArrowDown&quot;]) {
            this.yVelocity = Math.min(playerMaxMoveSpeed, this.yVelocity + playerMoveAccel);
        } else if (this.yVelocity &gt; 0) {
            this.yVelocity = Math.max(0, this.yVelocity - playerMoveDecel);
        } else if (this.yVelocity &lt; 0) {
            this.yVelocity = Math.min(0, this.yVelocity + playerMoveDecel);
        }

        this.y += this.yVelocity;
        this.y = Math.max(0+playerRadius, this.y);
        this.y = Math.min(height-playerRadius, this.y);

        if (keyboard[&quot;ArrowLeft&quot;]) {
            this.xVelocity = Math.max(-playerMaxMoveSpeed, this.xVelocity - playerMoveAccel);
        } else if (keyboard[&quot;ArrowRight&quot;]) {
            this.xVelocity = Math.min(playerMaxMoveSpeed, this.xVelocity + playerMoveAccel);
        } else if (this.xVelocity &gt; 0) {
            this.xVelocity = Math.max(0, this.xVelocity - playerMoveDecel);
        } else if (this.xVelocity &lt; 0) {
            this.xVelocity = Math.min(0, this.xVelocity + playerMoveDecel);
        }

        this.x += this.xVelocity;
        this.x = Math.max(0+playerRadius, this.x);
        this.x = Math.min(width-playerRadius, this.x);

        let jumpHeld = keyboard[&quot;Space&quot;];

        if (jumpHeld &amp;&amp; !this.falling &amp;&amp; this.z &lt; playerMaxHeight) {
            this.lastJumpHeight = 0;
            this.zVelocity = playerJumpSpeed;
        } else {
            this.zVelocity = Math.max(-playerJumpSpeed, this.zVelocity - playerGravity);
            this.falling = this.z &gt; 0;
        }

        let prevZ = this.z;
        this.z = Math.max(0, this.z + this.zVelocity);
        this.lastJumpHeight = Math.max(this.z, this.lastJumpHeight);
    }

    draw(ctx) {
        let y = this.y - (this.z * 40);
        let radius = playerRadius * (this.z+1)

        &#x2F;&#x2F; draw main
        ctx.beginPath();
        ctx.arc(this.x, y, radius, 0, Math.PI * 2, false);
        ctx.closePath();
        ctx.lineWidth = 0;
        ctx.fillStyle = this.color;
        ctx.fill();
        if (this.loser) {
            ctx.strokeStyle = &#x27;#FF0000&#x27;;
            ctx.lineWidth = 2;
            ctx.stroke();
        }

        &#x2F;&#x2F; draw shadow, if in the air
        if (this.z &gt; 0) {
            let radius = Math.max(0, playerRadius * (1.2 - this.z));
            ctx.beginPath();
            ctx.arc(this.x, this.y, radius, 0, Math.PI * 2, false);
            ctx.closePath();
            ctx.lineWidth = 0;
            ctx.fillStyle = this.color+&quot;33&quot;;
            ctx.fill();
        }
    }
}

class Game {

    constructor(canvas, scoreEl) {
        this.currTick = 0;
        this.player = new Player(width&#x2F;2, height&#x2F;2, palette[0]);
        this.state = &#x27;play&#x27;;
        this.score = 0;
        this.scoreEl = scoreEl;
        this.canvas = canvas;
        this.ctx = canvas.getContext(&quot;2d&quot;);
        this.ripples = [];
        this.nextRippleID = 0;
    }

    shouldReset() {
        return keyboard[&#x27;KeyR&#x27;];
    }

    newRippleID() {
        let id = this.nextRippleID;
        this.nextRippleID++;
        return id;
    }

    &#x2F;&#x2F; newRipple initializes and stores a new ripple at the given coordinates, as
    &#x2F;&#x2F; well as all sub-ripples which make up the initial ripple&#x27;s reflections.
    newRipple(x, y, bounces, color) {
        color = color ? color : palette[Math.floor(Math.random() * palette.length)];

        let ripplePos = [];
        let nextRipples = [];

        let addRipple = (x, y) =&gt; {
            for (let i in ripplePos) {
                if (ripplePos[i][0] == x &amp;&amp; ripplePos[i][1] == y) return;
            }

            let ripple = new Ripple(this.newRippleID(), this.currTick, x, y, bounces, color);
            nextRipples.push(ripple);
            ripplePos.push([x, y]);
            this.ripples.push(ripple);
        };

        &#x2F;&#x2F; add initial ripple, after this we deal with the sub-ripples.
        addRipple(x, y);

        while (bounces &gt; 0) {
            bounces--;
            let prevRipples = nextRipples;
            nextRipples = [];

            for (let i in prevRipples) {
                let prevX = prevRipples[i].x;
                let prevY = prevRipples[i].y;
                addRipple(prevX, -prevY);
                addRipple(-prevX, prevY);
                addRipple((2*this.canvas.width)-prevX, prevY);
                addRipple(prevX, (2*this.canvas.height)-prevY);
            }
        }
    }

    &#x2F;&#x2F; playerRipplesState returns a mapping of rippleID -&gt; boolean, where each
    &#x2F;&#x2F; boolean indicates the ripple&#x27;s relation to the player at the moment. true
    &#x2F;&#x2F; indicates the player is outside the ripple, false indicates the player is
    &#x2F;&#x2F; within the ripple.
    playerRipplesState() {
        let state = {};
        for (let i in this.ripples) {
            let ripple = this.ripples[i];
            let rippleRadius = ripple.radius(this.currTick);
            let hs = Math.pow(ripple.x-this.player.x, 2) + Math.pow(ripple.y-this.player.y, 2);
            state[ripple.id] = hs &gt; Math.pow(rippleRadius + playerRadius, 2);
        }
        return state;
    }

    playerHasJumpedOverRipple(prev, curr) {
        for (const rippleID in prev) {
            if (!curr.hasOwnProperty(rippleID)) continue;
            if (curr[rippleID] != prev[rippleID]) return true;
        }
        return false;
    }

    update() {
        if (this.state != &#x27;play&#x27;) return;

        let playerPrevZ = this.player.z;
        this.player.act();

        if (playerPrevZ == 0 &amp;&amp; this.player.z &gt; 0) {
            &#x2F;&#x2F; player has jumped
            this.prevPlayerRipplesState = this.playerRipplesState();

        } else if (playerPrevZ &gt; 0 &amp;&amp; this.player.z == 0) {

            &#x2F;&#x2F; player has landed, don&#x27;t produce a ripple unless there are no
            &#x2F;&#x2F; existing ripples or the player jumped over an existing one.
            if (
                this.ripples.length == 0 ||
                this.playerHasJumpedOverRipple(
                    this.prevPlayerRipplesState,
                    this.playerRipplesState()
                )
            ) {
                let bounces = Math.floor((this.player.lastJumpHeight*1.8)+1);
                console.log(&quot;spawning ripple with bounces:&quot;, bounces);
                this.newRipple(this.player.x, this.player.y, bounces);
                this.score += bounces;
            }
        }

        if (this.player.z == 0) {
            for (let i in this.ripples) {
                let ripple = this.ripples[i];
                let rippleRadius = ripple.radius(this.currTick);
                if (rippleRadius &lt; playerRadius * 1.5) continue;
                let hs = Math.pow(ripple.x-this.player.x, 2) + Math.pow(ripple.y-this.player.y, 2);
                if (hs &gt; Math.pow(rippleRadius + playerRadius, 2)) {
                    continue;
                } else if (hs &lt;= Math.pow(rippleRadius - playerRadius, 2)) {
                    continue;
                } else {
                    console.log(&quot;game over&quot;, ripple);
                    ripple.winner = true;
                    this.player.loser = true;
                    this.state = &#x27;gameOver&#x27;;
                    &#x2F;&#x2F; deliberately don&#x27;t break here, in case multiple ripples hit
                    &#x2F;&#x2F; the player on the same frame
                }
            }
        }

        this.ripples = this.ripples.filter(ripple =&gt; !ripple.canGC(this.currTick));

        this.currTick++;
    }

    draw() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.ripples.forEach(ripple =&gt; ripple.draw(this.ctx, this.currTick));
        this.player.draw(this.ctx)
        this.scoreEl.innerHTML = this.score;
    }
}


const requestAnimationFrame =
    window.requestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.msRequestAnimationFrame;

let game = new Game(canvas, document.getElementById(&quot;score&quot;));

function reset() {
    game = new Game(canvas, document.getElementById(&quot;score&quot;));
}

function nextFrame() {
    if (game.shouldReset()) reset();

    game.update()
    game.draw()
    requestAnimationFrame(nextFrame);
}
requestAnimationFrame(nextFrame);

canvas.focus();

&lt;&#x2F;script&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;&#x2F;h2&gt;

&lt;p&gt;There’s been two major changes to the mechanics of the game since the previous
version:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A new ripple is created &lt;em&gt;only&lt;&#x2F;em&gt; if there are no ripples on the field already,
or if the player has jumped over an existing ripple.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;The score is increased only if a ripple is created, and is increased by the
number of bounces off the wall that ripple will have. Put another way, the
score is increased based on how high you jump.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;Other small changes include:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ripple growth rate has been modified. It’s now harder for a player to run into
the ripple they just created.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Ripple thickness indicates how many bounces are left in the ripple. This was
the case previously, but it’s been made more obvious.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Small performance improvements.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Evaluation of Network Filesystems</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-04-06T00:00:00+00:00</published>
    <updated>2021-04-06T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-evaluation-of-network-filesystems/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-evaluation-of-network-filesystems/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/04/06/evaluation-of-network-filesystems.html</id>
        <link href="https://blog.mediocregopher.com/2021/04/06/evaluation-of-network-filesystems.html"/>
        <title>Evaluation of Network Filesystems</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-04-06T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-evaluation-of-network-filesystems/</id>
    <content type="html">
        &lt;p&gt;It’s been a bit since updating my progress on what I’ve been lately calling the
“cryptic nebula” project. When I last left off I was working on building the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cryptic-io&#x2F;mobile_nebula&quot;&gt;mobile nebula&lt;&#x2F;a&gt; using &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nix&#x2F;stable&#x2F;&quot;&gt;nix&lt;&#x2F;a&gt;. For the moment I gave up on
that dream, as flutter and nix just &lt;em&gt;really&lt;&#x2F;em&gt; don’t get along and I don’t want to
get to distracted on problems that aren’t critical to the actual goal.&lt;&#x2F;p&gt;

&lt;p&gt;Instead I’d like to pursue the next critical component of the system, and
that’s a shared filesystem. The use-case I’m ultimately trying to achieve is:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;All hosts communicate with each other via the nebula network.&lt;&#x2F;li&gt;
  &lt;li&gt;All hosts are personal machines owned by individuals, &lt;em&gt;not&lt;&#x2F;em&gt; cloud VMs.&lt;&#x2F;li&gt;
  &lt;li&gt;A handful of hosts are always-on, or at least as always-on as can be achieved
in a home environment.&lt;&#x2F;li&gt;
  &lt;li&gt;All hosts are able to read&#x2F;write to a shared filesystem, which is mounted via
FUSE (or some other mechanism, though I can’t imagine what) on their computer.&lt;&#x2F;li&gt;
  &lt;li&gt;Top-level directories within the shared filesystem can be restricted, so
that only a certain person (or host) can read&#x2F;write to them.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;What I’m looking for is some kind of network filesystem, of which there are
&lt;em&gt;many&lt;&#x2F;em&gt;. This document will attempt to evaluate all relevant projects and come up
with the next steps. It may be that no project fits the bill perfectly, and that
I’m stuck either modifying an existing project to my needs or, if things are
looking really dire, starting a new project.&lt;&#x2F;p&gt;

&lt;p&gt;The ultimate use-case here is something like a self-hosted, distributed &lt;a href=&quot;https:&#x2F;&#x2F;book.keybase.io&#x2F;docs&#x2F;files&quot;&gt;keybase
filesystem&lt;&#x2F;a&gt;; somewhere where individuals in
the cluster can back up their personal projects, share files with each other,
and possibly even be used as the base layer for more complex applications on
top.&lt;&#x2F;p&gt;

&lt;p&gt;The individuals involved shouldn’t have to deal with configuring their
distributed FS, either to read from it or add storage resources to it. Ideally
the FS process can be bundled together with the nebula process and run opaquely;
the user is just running their “cryptic nebula” process and everything else is
handled in the background.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;low-pass-filter&quot;&gt;Low Pass Filter&lt;&#x2F;h2&gt;

&lt;p&gt;There are some criteria for these projects that I’m not willing to compromise
on; these criteria will form a low pass filter which, hopefully, will narrow our
search appreciably.&lt;&#x2F;p&gt;

&lt;p&gt;The network filesystem used by the cryptic nebula must:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;Be able to operate over a nebula network (obviously).&lt;&#x2F;li&gt;
  &lt;li&gt;Be open-source. The license doesn’t matter, as long as the code is available.&lt;&#x2F;li&gt;
  &lt;li&gt;Run on both Mac and Linux.&lt;&#x2F;li&gt;
  &lt;li&gt;Not require a third-party to function.&lt;&#x2F;li&gt;
  &lt;li&gt;Allows for a replication factor of 3.&lt;&#x2F;li&gt;
  &lt;li&gt;Supports sharding of data (ie each host need not have the entire dataset).&lt;&#x2F;li&gt;
  &lt;li&gt;Allow for mounting a FUSE filesystem in any hosts’ machine to interact with
the network filesystem.&lt;&#x2F;li&gt;
  &lt;li&gt;Not run in the JVM, or any other VM which is memory-greedy.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;The last may come across as mean, but the reason for it is that I forsee the
network filesystem client running on users’ personal laptops, which cannot be
assumed to have resources to spare.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;rubric&quot;&gt;Rubric&lt;&#x2F;h2&gt;

&lt;p&gt;Each criteria in the next set lies along a spectrum. Any project may meet one of
thses criteria fully, partially, or not at all. For each criteria I assign a
point value according to how fully a project meets the criteria, and then sum up
the points to give the project a final score. The project with the highest final
score is not necessarily the winner, but this system should at least give some
good candidates for final consideration.&lt;&#x2F;p&gt;

&lt;p&gt;The criteria, and their associated points values, are:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Hackability&lt;&#x2F;strong&gt;: is the source-code of the project approachable?
    &lt;ul&gt;
      &lt;li&gt;0: No&lt;&#x2F;li&gt;
      &lt;li&gt;1: Kind of, and there’s not much of a community.&lt;&#x2F;li&gt;
      &lt;li&gt;2: Kind of, but there is an active community.&lt;&#x2F;li&gt;
      &lt;li&gt;3: Yes&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Documentation&lt;&#x2F;strong&gt;: is the project well documented?
    &lt;ul&gt;
      &lt;li&gt;0: No docs.&lt;&#x2F;li&gt;
      &lt;li&gt;1: Incomplete or out-of-date docs.&lt;&#x2F;li&gt;
      &lt;li&gt;2: Very well documented.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Transience&lt;&#x2F;strong&gt;: how does the system handle hosts appearing or disappearing?
    &lt;ul&gt;
      &lt;li&gt;0: Requires an automated system to be built to handle adding&#x2F;removing
hosts.&lt;&#x2F;li&gt;
      &lt;li&gt;1: Gracefully handled.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Priority&lt;&#x2F;strong&gt;: is it possible to give certain hosts priority when choosing
which will host&#x2F;replicate some piece of data?
    &lt;ul&gt;
      &lt;li&gt;0: No.&lt;&#x2F;li&gt;
      &lt;li&gt;1: Yes.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Caching&lt;&#x2F;strong&gt;: will hosts reading a file have that file cached locally for the
next reading (until the file is modified)?
    &lt;ul&gt;
      &lt;li&gt;0: No.&lt;&#x2F;li&gt;
      &lt;li&gt;1: Yes.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Conflicts&lt;&#x2F;strong&gt;: if two hosts updated the same file at the same time, how is
that handled?
    &lt;ul&gt;
      &lt;li&gt;0: The file can no longer be updated.&lt;&#x2F;li&gt;
      &lt;li&gt;1: One update clobbers the other, or both go through in an undefined
order.&lt;&#x2F;li&gt;
      &lt;li&gt;2: One update is disallowed.&lt;&#x2F;li&gt;
      &lt;li&gt;3: A copy of the file containing the “losing” update is created (ie: how
dropbox does it).&lt;&#x2F;li&gt;
      &lt;li&gt;4: Strategy can be configured on the file&#x2F;directory level.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Consistency&lt;&#x2F;strong&gt;: how does the system handle a file being changed frequently?
    &lt;ul&gt;
      &lt;li&gt;0: File changes must be propagated before subsequent updates are allowed (fully consistent).&lt;&#x2F;li&gt;
      &lt;li&gt;1: Files are snapshotted at some large-ish interval (eventually consistent).&lt;&#x2F;li&gt;
      &lt;li&gt;2: File state (ie content hash, last modifid, etc) is propagated
frequently but contents are only fully propagated once the file has
“settled” (eventually consistent with debounce).&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;POSIX&lt;&#x2F;strong&gt;: how POSIX compliant is the mounted fileystem?
    &lt;ul&gt;
      &lt;li&gt;0: Only the most basic features are implemented.&lt;&#x2F;li&gt;
      &lt;li&gt;1: Some extra features are implemented.&lt;&#x2F;li&gt;
      &lt;li&gt;2: Fully POSIX compliant.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Scale&lt;&#x2F;strong&gt;: how many hosts can be a part of the cluster?
    &lt;ul&gt;
      &lt;li&gt;0: A finite number.&lt;&#x2F;li&gt;
      &lt;li&gt;1: A finite number of dedicated hosts, infinite ephemeral.&lt;&#x2F;li&gt;
      &lt;li&gt;2: Infinite hosts.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Failure&lt;&#x2F;strong&gt;: how does the system handle failures (network partitions, hosts
hanging, buggy client versions)?
    &lt;ul&gt;
      &lt;li&gt;0: Data loss.&lt;&#x2F;li&gt;
      &lt;li&gt;1: Reads and writes are halted.&lt;&#x2F;li&gt;
      &lt;li&gt;2: Reads are allowed but writes are halted.&lt;&#x2F;li&gt;
      &lt;li&gt;3: System is partially read&#x2F;write, except effected parts.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Limitations&lt;&#x2F;strong&gt;: are there limits on how big files can be, or how big
directories can be?
    &lt;ul&gt;
      &lt;li&gt;0: Files are limited to below 1TB in size.&lt;&#x2F;li&gt;
      &lt;li&gt;1: Directories are limited to below 100,000 files.&lt;&#x2F;li&gt;
      &lt;li&gt;2: No limits.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Encryption&lt;&#x2F;strong&gt;: how is data encrypted?
    &lt;ul&gt;
      &lt;li&gt;0: Not at all, DIY.&lt;&#x2F;li&gt;
      &lt;li&gt;1: Encrypted at rest.&lt;&#x2F;li&gt;
      &lt;li&gt;2: Per-user encryption.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Permissions&lt;&#x2F;strong&gt;: how are modifications to data restricted?
    &lt;ul&gt;
      &lt;li&gt;0: Not at all.&lt;&#x2F;li&gt;
      &lt;li&gt;1: Permissions are only superifically enforced.&lt;&#x2F;li&gt;
      &lt;li&gt;2: Fully enforced user&#x2F;group restrictions, complex patterns, and&#x2F;or POSIX ACLs.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Administration&lt;&#x2F;strong&gt;: how much administration is required for the system to
function?
    &lt;ul&gt;
      &lt;li&gt;0: Frequent.&lt;&#x2F;li&gt;
      &lt;li&gt;1: Infrequent.&lt;&#x2F;li&gt;
      &lt;li&gt;2: Essentially none.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Simplicity&lt;&#x2F;strong&gt;: how understandable is the system as a whole?
    &lt;ul&gt;
      &lt;li&gt;0: Very complex.&lt;&#x2F;li&gt;
      &lt;li&gt;1: Understandable with some study.&lt;&#x2F;li&gt;
      &lt;li&gt;2: Very simple, easy to predict.&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;strong&gt;Visibility&lt;&#x2F;strong&gt;: how much visibility is available into processes within the
system?
    &lt;ul&gt;
      &lt;li&gt;0: Total black box.&lt;&#x2F;li&gt;
      &lt;li&gt;1: Basic logging.&lt;&#x2F;li&gt;
      &lt;li&gt;2: CLI tooling.&lt;&#x2F;li&gt;
      &lt;li&gt;3: Exportable metrics (e.g. prometheus).&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;h2 id=&quot;evaluations&quot;&gt;Evaluations&lt;&#x2F;h2&gt;

&lt;p&gt;With the rubric defined, let’s start actually working through our options! There
are many, many different possibilities, so this may not be an exhaustive list.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;ceph&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.ceph.com&#x2F;en&#x2F;latest&#x2F;cephfs&#x2F;index.html&quot;&gt;Ceph&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Ceph File System, or CephFS, is a POSIX-compliant file system built on
top of Ceph’s distributed object store, RADOS. CephFS endeavors to provide a
state-of-the-art, multi-use, highly available, and performant file store for
a variety of applications, including traditional use-cases like shared home
directories, HPC scratch space, and distributed workflow shared storage.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Hackability: 2. Very active community, but it’s C++.&lt;&#x2F;li&gt;
  &lt;li&gt;Documentation: 2. Hella docs, very daunting.&lt;&#x2F;li&gt;
  &lt;li&gt;Transience: 0. Adding hosts seems to require multiple configuration steps.&lt;&#x2F;li&gt;
  &lt;li&gt;Priority: 1. There is fine-tuning on a per-host basis.&lt;&#x2F;li&gt;
  &lt;li&gt;Caching: 1. Clients can cache both metadata and block data.&lt;&#x2F;li&gt;
  &lt;li&gt;Conflicts: 1. The FS behaves as much like a real FS as possible.&lt;&#x2F;li&gt;
  &lt;li&gt;Consistency: 0. System is CP.&lt;&#x2F;li&gt;
  &lt;li&gt;POSIX: 2. Fully POSIX compliant.&lt;&#x2F;li&gt;
  &lt;li&gt;Scale: 2. Cluster can grow without any real bounds.&lt;&#x2F;li&gt;
  &lt;li&gt;Failure: 3. There’s no indication anywhere that Ceph goes into any kind of cluster-wide failure mode.&lt;&#x2F;li&gt;
  &lt;li&gt;Limitations: 2. There are performance considerations with large directories, but no hard limits.&lt;&#x2F;li&gt;
  &lt;li&gt;Encryption: 0. None to speak of.&lt;&#x2F;li&gt;
  &lt;li&gt;Permissions: 2. POSIX ACLs supported.&lt;&#x2F;li&gt;
  &lt;li&gt;Administration: 1. This is a guess, but Ceph seems to be self-healing in general, but still needs hand-holding in certain situations (adding&#x2F;removing nodes, etc…)&lt;&#x2F;li&gt;
  &lt;li&gt;Simplicity: 0. There are many moving pieces, as well as many different kinds of processes and entities.&lt;&#x2F;li&gt;
  &lt;li&gt;Visibility: 3. Lots of tooling to dig into the state of the cluster, as well as a prometheus module.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;TOTAL: 22&lt;&#x2F;p&gt;

&lt;h4 id=&quot;comments&quot;&gt;Comments&lt;&#x2F;h4&gt;

&lt;p&gt;Ceph has been recommended to me by a few people. It is clearly a very mature
project, though that maturity has brought with it a lot of complexity. A lot of
the complexity of Ceph seems to be rooted in its strong consistency guarantees,
which I’m confident it fulfills well, but are not really needed for the
use-case I’m interested in. I’d prefer a simpler, eventually consistent,
system. It’s also not clear to me that Ceph would even perform very well in my
use-case as it seems to want an actual datacenter deployment, with beefy
hardware and hosts which are generally close together.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;glusterfs&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gluster.org&#x2F;en&#x2F;latest&#x2F;&quot;&gt;GlusterFS&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;GlusterFS is a scalable network filesystem suitable for data-intensive tasks
such as cloud storage and media streaming. GlusterFS is free and open source
software and can utilize common off-the-shelf hardware.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Hackability: 2. Mostly C code, but there is an active community.&lt;&#x2F;li&gt;
  &lt;li&gt;Documentation: 2. Good docs.&lt;&#x2F;li&gt;
  &lt;li&gt;Transience: 0. New nodes cannot add themselves to the pool.&lt;&#x2F;li&gt;
  &lt;li&gt;Priority: 0. Data is distributed based on consistent hashing algo, nothing else.&lt;&#x2F;li&gt;
  &lt;li&gt;Caching: 1. Docs mention client-side caching layer.&lt;&#x2F;li&gt;
  &lt;li&gt;Conflicts: 0. File becomes frozen, manual intervention is needed to save it.&lt;&#x2F;li&gt;
  &lt;li&gt;Consistency: 0. Gluster aims to be fully consistent.&lt;&#x2F;li&gt;
  &lt;li&gt;POSIX: 2. Fully POSIX compliant.&lt;&#x2F;li&gt;
  &lt;li&gt;Scale: 2. No apparent limits.&lt;&#x2F;li&gt;
  &lt;li&gt;Failure: 3. Clients determine on their own whether or not they have a quorum for a particular sub-volume.&lt;&#x2F;li&gt;
  &lt;li&gt;Limitations: 2. Limited by the file system underlying each volume, I think.&lt;&#x2F;li&gt;
  &lt;li&gt;Encryption: 2. Encryption can be done on the volume level, each user could have a private volume.&lt;&#x2F;li&gt;
  &lt;li&gt;Permissions: 2. ACL checking is enforced on the server-side, but requires syncing of users and group membership across servers.&lt;&#x2F;li&gt;
  &lt;li&gt;Administration: 1. Beyond adding&#x2F;removing nodes the system is fairly self-healing.&lt;&#x2F;li&gt;
  &lt;li&gt;Simplicity: 1. There’s only one kind of server process, and the configuration of volumes is is well documented and straightforward.&lt;&#x2F;li&gt;
  &lt;li&gt;Visibility: 3. Prometheus exporter available.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;TOTAL: 23&lt;&#x2F;p&gt;

&lt;h4 id=&quot;comments-1&quot;&gt;Comments&lt;&#x2F;h4&gt;

&lt;p&gt;GlusterFS was my initial choice when I did a brief survey of DFSs for this
use-case. However, after further digging into it I think it will suffer the
same ultimate problem as CephFS: too much consistency for a wide-area
application like I’m envisioning. The need for syncing user&#x2F;groups across
machines as actual system users is also cumbersome enough to make it not a
great choice.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;moosefs&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;moosefs.com&#x2F;&quot;&gt;MooseFS&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;MooseFS is a Petabyte Open Source Network Distributed File System. It is easy
to deploy and maintain, highly reliable, fault tolerant, highly performing,
easily scalable and POSIX compliant.&lt;&#x2F;p&gt;

  &lt;p&gt;MooseFS spreads data over a number of commodity servers, which are visible to
the user as one resource. For standard file operations MooseFS acts like
ordinary Unix-like file system.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Hackability: 2. All C code, pretty dense, but backed by a company.&lt;&#x2F;li&gt;
  &lt;li&gt;Documentation: 2. There’s a giant PDF you can read through like a book. I
guess that’s…. good?&lt;&#x2F;li&gt;
  &lt;li&gt;Transience: 0. Nodes must be added manually.&lt;&#x2F;li&gt;
  &lt;li&gt;Priority: 1. There’s “Storage Classes”.&lt;&#x2F;li&gt;
  &lt;li&gt;Caching: 1. Caching is done on the client, and there’s some synchronization
with the master server around it.&lt;&#x2F;li&gt;
  &lt;li&gt;Conflicts: 1. Both update operations will go through.&lt;&#x2F;li&gt;
  &lt;li&gt;Consistency: 0. Afaict it’s a fully consistent system, with a master server
being used to synchronize changes.&lt;&#x2F;li&gt;
  &lt;li&gt;POSIX: 2. Fully POSIX compliant.&lt;&#x2F;li&gt;
  &lt;li&gt;Scale: 2. Cluster can grow without any real bounds.&lt;&#x2F;li&gt;
  &lt;li&gt;Failure: 1. If the master server is unreachable then the client can’t
function.&lt;&#x2F;li&gt;
  &lt;li&gt;Limitations: 2. Limits are very large, effectively no limit.&lt;&#x2F;li&gt;
  &lt;li&gt;Encryption: 0. Docs make no mention of encryption.&lt;&#x2F;li&gt;
  &lt;li&gt;Permissions: 1. Afaict permissions are done by the OS on the fuse mount.&lt;&#x2F;li&gt;
  &lt;li&gt;Administration: 1. It seems that if the topology is stable there shouldn’t be
much going on.&lt;&#x2F;li&gt;
  &lt;li&gt;Simplicity: 0. There are many moving pieces, as well as many different kinds of processes and entities.&lt;&#x2F;li&gt;
  &lt;li&gt;Visibility: 2. Lots of cli tooling, no prometheus metrics that I could find.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;TOTAL: 17&lt;&#x2F;p&gt;

&lt;p&gt;Overall MooseFS seems to me like a poor-developer’s Ceph. It can do exactly the
same things, but with less of a community around it. The sale’s pitch and
feature-gating also don’t ingratiate it to me. The most damning “feature” is the
master metadata server, which acts as a SPOF and only sort of supports
replication (but not failover, unless you get Pro).&lt;&#x2F;p&gt;

&lt;h2 id=&quot;cutting-room-floor&quot;&gt;Cutting Room Floor&lt;&#x2F;h2&gt;

&lt;p&gt;The following projects were intended to be reviewed, but didn’t make the cut for
various reasons.&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Tahoe-LAFS: The FUSE mount (which is actually an SFTP mount) doesn’t support
mutable files.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;HekaFS: Doesn’t appear to exist anymore(?)&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;IPFS-cluster: Doesn’t support sharding.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;MinFS: Seems to only work off S3, no longer maintained anyway.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;DRDB: Linux specific, no mac support.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;BeeGFS: No mac support (I don’t think? I couldn’t find any indication it
supports macs at any rate).&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;NFS: No support for sharding the dataset.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;&#x2F;h2&gt;

&lt;p&gt;Going through the featuresets of all these different projects really helped me
focus in on how I actually expect this system to function, and a few things
stood out to me:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Perfect consistency is not a goal, and is ultimately harmful for this
use-case. The FS needs to propagate changes relatively quickly, but if two
different hosts are updating the same file it’s not necessary to synchronize
those updates like a local filesystem would; just let one changeset clobber
the other and let the outer application deal with coordination.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Permissions are extremely important, and yet for all these projects are
generally an afterthought. In a distributed setting we can’t rely on the OS
user&#x2F;groups of a host to permission read&#x2F;write access. Instead that must be
done primarily via e2e encryption.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Transience is not something most of these project expect, but is a hard
requirement of this use-case. In the long run we need something which can be
run on home hardware on home ISPs, which is not reliable at all. Hosts need to
be able to flit in and out of existence, and the cluster as a whole needs to
self-heal through that process.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;In the end, it may be necessary to roll our own project for this, as I don’t
think any of the existing distributed file systems are suitable for what’s
needed.&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Simple Declarative VMs</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2021-03-24T00:00:00+00:00</published>
    <updated>2021-03-24T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-simple-declarative-vms/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-simple-declarative-vms/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/simple-vms/</id>
        <link href="https://marcopolo.io/code/simple-vms/"/>
        <title>Simple Declarative VMs</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2021-03-24T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-simple-declarative-vms/</id>
    <content type="html">
        &lt;p&gt;I&#x27;ve been on a hunt to find a simple and declarative way to define VMs. I wanted
something like &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixos&#x2F;stable&#x2F;#ch-containers&quot;&gt;NixOS
Containers&lt;&#x2F;a&gt;, but with a
stronger security guarantee. I wanted to be able to use a Nix expression to
define what the VM should look like, then reference that on my Server&#x27;s
expression and have it all work automatically. I didn&#x27;t want to manually
run any commands. The hunt is over, I finally found it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-use-case&quot;&gt;My Use Case&lt;&#x2F;h2&gt;
&lt;p&gt;I want a machine that I can permanently hook up to a WireGuard VPN and treat
as if it were in a remote place. At first I did this with a physical machine,
but I didn&#x27;t want to commit the whole machine&#x27;s compute for a novelty. What I
really want is a small VM that is permanently hooked up to a WireGuard VPN.
Minimal investment with all the upsides.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nixos-qemu&quot;&gt;NixOS QEMU&lt;&#x2F;h2&gt;
&lt;p&gt;Nix OS supports building your system in a QEMU runnable environment right out of
the box. &lt;code&gt;nixos-rebuild build-vm&lt;&#x2F;code&gt; is a wrapper over &lt;code&gt;nix build github:marcopolo&#x2F;marcopolo.github.io#nixosConfigurations.small-vm.config.system.build.vm&lt;&#x2F;code&gt;. (Side note, with
flakes you can build this exact VM by running that command&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;). This means NixOS
already did the hard work of turning a NixOS configuration into a valid VM that
can be launched with QEMU. Not only that, but the VM shares the &lt;code&gt;&#x2F;nix&#x2F;store&lt;&#x2F;code&gt;
with the host. This results in a really small VM (disk size is 5MB).&lt;&#x2F;p&gt;
&lt;p&gt;NixOS does the heavy lifting of converting a configuration into a script that
will run a VM, so all I need to do is write a service that manages this process.
Enter &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;simple-vms&#x2F;&quot;&gt;simple-vms&lt;&#x2F;a&gt;, heavily inspired by
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Nekroze&#x2F;vms.nix&quot;&gt;vms.nix&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Mic92&#x2F;nixos-shell&quot;&gt;nixos-shell&lt;&#x2F;a&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;simple-vms&#x2F;&quot;&gt;simple-vms&lt;&#x2F;a&gt; is a NixOS
module that takes in a reference to the
&lt;code&gt;nixosConfigurations.small-vm.config.system.build.vm&lt;&#x2F;code&gt; derivation and the
option of whether you want state to be persisted, and defines a Systemd
service for the vm (There can be multiple VMs). This really is a simple
module, the NixOS service definition is about 10 lines long, and its
&lt;code&gt;ExecStart&lt;&#x2F;code&gt; is simply:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;mkdir -p &#x2F;var&#x2F;lib&#x2F;simple-vms&#x2F;${name}
cd &#x2F;var&#x2F;lib&#x2F;simple-vms&#x2F;${name}
exec ${cfg.vm.out}&#x2F;bin&#x2F;run-nixos-vm;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this service we can get and keep our VMs up and running.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;stateless-vms&quot;&gt;Stateless VMs&lt;&#x2F;h2&gt;
&lt;p&gt;I got a sticker recently that said &amp;quot;You either have one source of truth, of
multiple sources of lies.&amp;quot; To that end, I wanted to make my VM completely
stateless. QEMU lets you mount folders into the VM, so I used that to mount host
folders in the VM&#x27;s &lt;code&gt;&#x2F;etc&#x2F;wireguard&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;etc&#x2F;ssh&lt;&#x2F;code&gt; so that the host can
provide the VM with WireGuard keys, and the VM can persist it&#x27;s SSH host keys.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s all the VM really needs. Every time my VM shuts down I delete the drive.
And just to be safe, I try deleting any drive on boot too.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re running a service on the VM, you&#x27;ll likely want to persist that
service&#x27;s state files too in a similar way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fin&quot;&gt;Fin&lt;&#x2F;h2&gt;
&lt;p&gt;That&#x27;s it. Just a small post for a neat little trick. If you set this up let
me know! I&#x27;m interested in hearing your use case.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h3&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;User&#x2F;pass = root&#x2F;root. Exit qemu with C-a x.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>A Simple Rule for Better Errors</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-03-20T00:00:00+00:00</published>
    <updated>2021-03-20T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-a-simple-rule-for-better-errors/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-a-simple-rule-for-better-errors/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/03/20/a-simple-rule-for-better-errors.html</id>
        <link href="https://blog.mediocregopher.com/2021/03/20/a-simple-rule-for-better-errors.html"/>
        <title>A Simple Rule for Better Errors</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-03-20T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-a-simple-rule-for-better-errors/</id>
    <content type="html">
        &lt;p&gt;This post will describe a simple rule for writing error messages that I’ve
been using for some time and have found to be worthwhile. Using this rule I can
be sure that my errors are propagated upwards with everything needed to debug
problems, while not containing tons of extraneous or duplicate information.&lt;&#x2F;p&gt;

&lt;p&gt;This rule is not specific to any particular language, pattern of error
propagation (e.g. exceptions, signals, simple strings), or method of embedding
information in errors (e.g. key&#x2F;value pairs, formatted strings).&lt;&#x2F;p&gt;

&lt;p&gt;I do not claim to have invented this system, I’m just describing it.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;the-rule&quot;&gt;The Rule&lt;&#x2F;h2&gt;

&lt;p&gt;Without more ado, here’s the rule:&lt;&#x2F;p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A function sending back an error should not include information the caller
could already know.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p&gt;Pretty simple, really, but the best rules are. Keeping to this rule will result
in error messages which, once propagated up to their final destination (usually
some kind of logger), will contain only the information relevant to the error
itself, with minimal duplication.&lt;&#x2F;p&gt;

&lt;p&gt;The reason this rule works in tandem with good encapsulation of function
behavior. The caller of a function knows only the inputs to the function and, in
general terms, what the function is going to do with those inputs. If the
returned error only includes information outside of those two things then the
caller knows everything it needs to know about the error, and can continue on to
propagate that error up the stack (with more information tacked on if necessary)
or handle it in some other way.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h2&gt;

&lt;p&gt;(For examples I’ll use Go, but as previously mentioned this rule will be useful
in any other language as well.)&lt;&#x2F;p&gt;

&lt;p&gt;Let’s go through a few examples, to show the various ways that this rule can
manifest in actual code.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;strong&gt;Example 1: Nothing to add&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;

&lt;p&gt;In this example we have a function which merely wraps a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.Copy&lt;&#x2F;code&gt; for
two files:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;copyFile&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;In this example there’s no need to modify the error from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.Copy&lt;&#x2F;code&gt; before
returning it to the caller. What would we even add? The caller already knows
which files were involved in the error, and that the error was encountered
during some kind of copy operation (since that’s what the function says it
does), so there’s nothing more to say about it.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Annotating which step an error occurs at&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;

&lt;p&gt;In this example we will open a file, read its contents, and return them as a
string:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;readFile&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;f&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;opening file: %w&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
	&lt;span class=&quot;k&quot;&gt;defer&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt;

	&lt;span class=&quot;n&quot;&gt;contents&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;ReadAll&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reading contents: %w&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;&#x2F;span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;In this example there are two different steps which could result in an error:
opening the file and reading its contents. If an error is returned then our
imaginary caller doesn’t know which step the error occurred at. Using our rule
we can infer that it would be good to annotate at &lt;em&gt;which&lt;&#x2F;em&gt; step the error is
from, so the caller is able to have a fuller picture of what went wrong.&lt;&#x2F;p&gt;

&lt;p&gt;Note that each annotation does &lt;em&gt;not&lt;&#x2F;em&gt; include the file path which was passed into
the function. The caller already knows this path, so an error being returned
back which reiterates the path is unnecessary.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;strong&gt;Example 3: Annotating which argument was involved&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;

&lt;p&gt;In this example we will read two files using our function from example 2, and
return the concatenation of their contents as a string.&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;concatFiles&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;pathA&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;pathB&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;contentsA&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;readFile&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;pathA&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reading contents of %q: %w&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;pathA&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;

	&lt;span class=&quot;n&quot;&gt;contentsB&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;readFile&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;pathB&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reading contents of %q: %w&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;pathB&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;contentsA&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;contentsB&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Like in example 2 we annotate each error, but instead of annotating the action
we annotate which file path was involved in each error. This is because if we
simply annotated with the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reading contents&lt;&#x2F;code&gt; like before it wouldn’t be
clear to the caller &lt;em&gt;which&lt;&#x2F;em&gt; file’s contents couldn’t be read. Therefore we
include which path the error is relevant to.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;strong&gt;Example 4: Layering&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;

&lt;p&gt;In this example we will show how using this rule habitually results in easy to
read errors which contain all relevant information surrounding the error. Our
example reads one file, the “full” file, using our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readFile&lt;&#x2F;code&gt; function from
example 2. It then reads the concatenation of two files, the “split” files,
using our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;concatFiles&lt;&#x2F;code&gt; function from example 3. It finally determines if the
two strings are equal:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;verifySplits&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;fullFilePath&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;splitFilePathA&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;splitFilePathB&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;fullContents&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;readFile&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;fullFilePath&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reading contents of full file: %w&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;

	&lt;span class=&quot;n&quot;&gt;splitContents&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;concatFiles&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;splitFilePathA&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;splitFilePathB&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reading concatenation of split files: %w&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;fullContents&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;splitContents&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;full file&#x27;s contents do not match the split files&#x27; contents&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;As previously, we don’t annotate the file paths for the different possible
errors, but instead say &lt;em&gt;which&lt;&#x2F;em&gt; files were involved. The caller already knows
the paths, there’s no need to reiterate them if there’s another way of referring
to them.&lt;&#x2F;p&gt;

&lt;p&gt;Let’s see what our errors actually look like! We run our new function using the
following:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;verifySplits&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;full.txt&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;splitA.txt&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;splitB.txt&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Let’s say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;full.txt&lt;&#x2F;code&gt; doesn’t exist, we’ll get the following error:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reading contents of full file: opening file: open full.txt: no such file or directory
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;The error is simple, and gives you everything you need to understand what went
wrong: while attempting to read the full file, during the opening of that file,
our code found that there was no such file. In fact, the error returned by
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;os.Open&lt;&#x2F;code&gt; contains the name of the file, which goes against our rule, but it’s
the standard library so what can ya do?&lt;&#x2F;p&gt;

&lt;p&gt;Now, let’s say that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;splitA.txt&lt;&#x2F;code&gt; doesn’t exist, then we’ll get this error:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reading concatenation of split files: reading contents of &quot;splitA.txt&quot;: opening file: open splitA.txt: no such file or directory
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Now we did include the file path here, and so the standard library’s failure to
follow our rule is causing us some repitition. But overall, within the parts of
the error we have control over, the error is concise and gives you everything
you need to know what happened.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;exceptions&quot;&gt;Exceptions&lt;&#x2F;h2&gt;

&lt;p&gt;As with all rules, there are certainly exceptions. The primary one I’ve found is
that certain helper functions can benefit from bending this rule a bit. For
example, if there is a helper function which is called to verify some kind of
user input in many places, it can be helpful to include that input value within
the error returned from the helper function:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;verifyInput&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input %q was bad: %w&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;&#x2F;code&gt; is known to the caller so, according to our rule, we don’t need to include
it in the error. But if you’re going to end up wrapping the error returned from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verifyInput&lt;&#x2F;code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;&#x2F;code&gt; at every call site anyway it can be convenient to save
some energy and break the rule. It’s a trade-off, convenience in exchange for
consistency.&lt;&#x2F;p&gt;

&lt;p&gt;Another exception might be made with regards to stack traces.&lt;&#x2F;p&gt;

&lt;p&gt;In the set of examples given above I tended to annotate each error being
returned with a description of where in the function the error was being
returned from. If your language automatically includes some kind of stack trace
with every error, and if you find that you are generally able to reconcile that
stack trace with actual code, then it may be that annotating each error site is
unnecessary, except when annotating actual runtime values (e.g. an input
string).&lt;&#x2F;p&gt;

&lt;p&gt;As in all things with programming, there are no hard rules; everything is up to
interpretation and the specific use-case being worked on. That said, I hope what
I’ve laid out here will prove generally useful to you, in whatever way you might
try to use it.&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Ripple: A Game</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-03-12T00:00:00+00:00</published>
    <updated>2021-03-12T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-ripple-a-game/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-ripple-a-game/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/03/12/ripple-a-game.html</id>
        <link href="https://blog.mediocregopher.com/2021/03/12/ripple-a-game.html"/>
        <title>Ripple: A Game</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-03-12T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-ripple-a-game/</id>
    <content type="html">
        &lt;p&gt;
    &lt;b&gt;Movement:&lt;&#x2F;b&gt; Arrow keys or WASD&lt;br &#x2F;&gt;
    &lt;b&gt;Jump:&lt;&#x2F;b&gt; Space&lt;br &#x2F;&gt;
    &lt;b&gt;Goal:&lt;&#x2F;b&gt; Jump as many times as possible without touching a ripple!&lt;br &#x2F;&gt;
    &lt;br &#x2F;&gt;
    &lt;b&gt;Press Jump To Begin!&lt;&#x2F;b&gt;
&lt;&#x2F;p&gt;

&lt;canvas id=&quot;canvas&quot; style=&quot;border:1px dashed #AAA&quot; tabindex=&quot;0&quot;&gt;
Your browser doesn&#x27;t support canvas. At this point in the world that&#x27;s actually
pretty cool, well done!
&lt;&#x2F;canvas&gt;
&lt;p&gt;&lt;button onclick=&quot;resetGame()&quot;&gt;(R)eset&lt;&#x2F;button&gt;
&lt;span style=&quot;font-size: 2rem; margin-left: 1rem;&quot;&gt;Score:
    &lt;span style=&quot;font-weight: bold&quot; id=&quot;score&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;

&lt;script type=&quot;text&#x2F;javascript&quot;&gt;

const palette = [
    &quot;#264653&quot;,
    &quot;#2A9D8F&quot;,
    &quot;#E9C46A&quot;,
    &quot;#F4A261&quot;,
    &quot;#E76F51&quot;,
];

const width = 800;
const height = 600;

function hypotenuse(w, h) {
    return Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2));
}

let canvas = document.getElementById(&quot;canvas&quot;);
canvas.width = width;
canvas.height = height;

let score = document.getElementById(&quot;score&quot;);

const whitelistedKeys = {
    &quot;ArrowUp&quot;: {},
    &quot;KeyW&quot;: {map: &quot;ArrowUp&quot;},
    &quot;ArrowLeft&quot;: {},
    &quot;KeyA&quot;: {map: &quot;ArrowLeft&quot;},
    &quot;ArrowRight&quot;: {},
    &quot;KeyD&quot;: {map: &quot;ArrowRight&quot;},
    &quot;ArrowDown&quot;: {},
    &quot;KeyS&quot;: {map: &quot;ArrowDown&quot;},
    &quot;Space&quot;: {},
    &quot;KeyR&quot;: {},
};

let keyboard = {};

canvas.addEventListener(&#x27;keydown&#x27;, (event) =&gt; {
    let keyInfo = whitelistedKeys[event.code];
    if (!keyInfo) return;

    let code = event.code;
    if (keyInfo.map) code = keyInfo.map;

    event.preventDefault();
    keyboard[code] = true;
});

canvas.addEventListener(&#x27;keyup&#x27;, (event) =&gt; {
    let keyInfo = whitelistedKeys[event.code];
    if (!keyInfo) return;

    let code = event.code;
    if (keyInfo.map) code = keyInfo.map;

    event.preventDefault();
    delete keyboard[code];
});

let ctx = canvas.getContext(&quot;2d&quot;);

let currTick;
let drops;

class Drop {
    constructor(x, y, bounces, color) {
        this.tick = currTick;
        this.x = x;
        this.y = y;
        this.thickness = (bounces+1) * 0.25;
        this.color = color ? color : palette[Math.floor(Math.random() * palette.length)];
        this.winner = false;

        this.maxRadius = hypotenuse(x, y);
        this.maxRadius = Math.max(this.maxRadius, hypotenuse(width-x, y));
        this.maxRadius = Math.max(this.maxRadius, hypotenuse(x, height-y));
        this.maxRadius = Math.max(this.maxRadius, hypotenuse(width-x, height-y));

        drops.push(this);

        if (bounces &gt; 0) {
            new Drop(x, -y, bounces-1, this.color);
            new Drop(-x, y, bounces-1, this.color);
            new Drop((2*width)-x, y, bounces-1, this.color);
            new Drop(x, (2*height)-y, bounces-1, this.color);
        }
    }

    radius() { return currTick - this.tick; }

    draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius(), 0, Math.PI * 2, false);
        ctx.closePath();
        ctx.lineWidth = this.thickness;
        ctx.strokeStyle = this.winner ? &quot;#FF0000&quot; : this.color;
        ctx.stroke();
    }

    canGC() {
        return this.radius() &gt; this.maxRadius;
    }
}

const playerRadius = 10;
const playerMoveAccel = 0.5;
const playerMoveDecel = 0.7;
const playerMaxMoveSpeed = 4;
const playerJumpSpeed = 0.08;
const playerMaxHeight = 1;
const playerGravity = 0.01;

class Player{
    constructor(x, y, color) {
        this.x = x;
        this.y = y;
        this.z = 0;
        this.xVelocity = 0;
        this.yVelocity = 0;
        this.zVelocity = 0;
        this.color = color;
        this.falling = false;
        this.lastJumpHeight = 0;
        this.loser = false;
    }

    act() {
        if (keyboard[&quot;ArrowUp&quot;]) {
            this.yVelocity = Math.max(-playerMaxMoveSpeed, this.yVelocity - playerMoveAccel);
        } else if (keyboard[&quot;ArrowDown&quot;]) {
            this.yVelocity = Math.min(playerMaxMoveSpeed, this.yVelocity + playerMoveAccel);
        } else if (this.yVelocity &gt; 0) {
            this.yVelocity = Math.max(0, this.yVelocity - playerMoveDecel);
        } else if (this.yVelocity &lt; 0) {
            this.yVelocity = Math.min(0, this.yVelocity + playerMoveDecel);
        }

        this.y += this.yVelocity;
        this.y = Math.max(0+playerRadius, this.y);
        this.y = Math.min(height-playerRadius, this.y);

        if (keyboard[&quot;ArrowLeft&quot;]) {
            this.xVelocity = Math.max(-playerMaxMoveSpeed, this.xVelocity - playerMoveAccel);
        } else if (keyboard[&quot;ArrowRight&quot;]) {
            this.xVelocity = Math.min(playerMaxMoveSpeed, this.xVelocity + playerMoveAccel);
        } else if (this.xVelocity &gt; 0) {
            this.xVelocity = Math.max(0, this.xVelocity - playerMoveDecel);
        } else if (this.xVelocity &lt; 0) {
            this.xVelocity = Math.min(0, this.xVelocity + playerMoveDecel);
        }

        this.x += this.xVelocity;
        this.x = Math.max(0+playerRadius, this.x);
        this.x = Math.min(width-playerRadius, this.x);

        let jumpHeld = keyboard[&quot;Space&quot;];

        if (jumpHeld &amp;&amp; !this.falling &amp;&amp; this.z &lt; playerMaxHeight) {
            this.lastJumpHeight = 0;
            this.zVelocity = playerJumpSpeed;
        } else {
            this.zVelocity = Math.max(-playerJumpSpeed, this.zVelocity - playerGravity);
            this.falling = this.z &gt; 0;
        }

        let prevZ = this.z;
        this.z = Math.max(0, this.z + this.zVelocity);
        this.lastJumpHeight = Math.max(this.z, this.lastJumpHeight);
    }

    draw() {
        let y = this.y - (this.z * 40);
        let radius = playerRadius * (this.z+1)

        &#x2F;&#x2F; draw main
        ctx.beginPath();
        ctx.arc(this.x, y, radius, 0, Math.PI * 2, false);
        ctx.closePath();
        ctx.lineWidth = 0;
        ctx.fillStyle = this.color;
        ctx.fill();
        if (this.loser) {
            ctx.strokeStyle = &#x27;#FF0000&#x27;;
            ctx.lineWidth = 2;
            ctx.stroke();
        }

        &#x2F;&#x2F; draw shadow, if in the air
        if (this.z &gt; 0) {
            let radius = Math.max(0, playerRadius * (1.2 - this.z));
            ctx.beginPath();
            ctx.arc(this.x, this.y, radius, 0, Math.PI * 2, false);
            ctx.closePath();
            ctx.lineWidth = 0;
            ctx.fillStyle = this.color+&quot;33&quot;;
            ctx.fill();
        }
    }
}

let player;
let gameState;
let numJumps;

function resetGame() {
    currTick = 0;
    drops = [];
    player = new Player(width&#x2F;2, height&#x2F;2, palette[0]);
    gameState = &#x27;play&#x27;;
    numJumps = 0;
    canvas.focus();
}
resetGame();

let requestAnimationFrame =
    window.requestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.msRequestAnimationFrame;

function doTick() {
    if (keyboard[&#x27;KeyR&#x27;]) {
        resetGame();
    }

    if (gameState == &#x27;play&#x27;) {
        let playerPrevZ = player.z;
        player.act();
        if (playerPrevZ &gt; 0 &amp;&amp; player.z == 0) {
            let bounces = Math.floor((player.lastJumpHeight*1.8)+1);
            console.log(&quot;spawning drop with bounces:&quot;, bounces);
            new Drop(player.x, player.y, bounces);
        } else if (playerPrevZ == 0 &amp;&amp; player.z &gt; 0) {
            numJumps++;
        }
        score.innerHTML = numJumps;

        if (player.z == 0) {
            for (let i in drops) {
                let drop = drops[i];
                let dropRadius = drop.radius();
                if (dropRadius &lt; playerRadius * 1.5) continue;
                let hs = Math.pow(drop.x-player.x, 2) + Math.pow(drop.y-player.y, 2);
                if (hs &gt; Math.pow(playerRadius + dropRadius, 2)) {
                    continue;
                } else if (Math.sqrt(hs) &lt;= Math.abs(dropRadius-playerRadius)) {
                    continue;
                } else {
                    console.log(&quot;game over&quot;);
                    drop.winner = true;
                    player.loser = true;
                    gameState = &#x27;gameOver&#x27;;
                }
            }
        }
    }

    drops = drops.filter(drop =&gt; !drop.canGC());

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drops.forEach(drop =&gt; drop.draw());
    player.draw()

    if (gameState == &#x27;play&#x27;) currTick++;
    requestAnimationFrame(doTick);
}
requestAnimationFrame(doTick);

&lt;&#x2F;script&gt;

&lt;p&gt;&lt;em&gt;Do you have the patience to wait&lt;br &#x2F;&gt;
till your mud settles and the water is clear?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

&lt;h2 id=&quot;backstory&quot;&gt;Backstory&lt;&#x2F;h2&gt;

&lt;p&gt;This is a game I originally implemented in lua, which you can find &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mediocregopher&#x2F;ripple&quot;&gt;here&lt;&#x2F;a&gt;.
It’s a fun concept that I wanted to show off again, as well as to see if I could
whip it up in an evening in javascript (I can!)&lt;&#x2F;p&gt;

&lt;p&gt;Send me your high scores! I top out around 17.&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Backups made simple</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2021-03-07T00:00:00+00:00</published>
    <updated>2021-03-07T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-backups-made-simple/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-backups-made-simple/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/backups-made-simple/</id>
        <link href="https://marcopolo.io/code/backups-made-simple/"/>
        <title>Backups made simple</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2021-03-07T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-backups-made-simple/</id>
    <content type="html">
        &lt;p&gt;I&#x27;ve made a backup system I can be proud of, and I&#x27;d like to share it with you
today. It follows a philosophy I&#x27;ve been fleshing out called &lt;em&gt;The
Functional Infra&lt;&#x2F;em&gt;. Concretely it aims to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Be pure. An output should only be a function of its inputs.&lt;&#x2F;li&gt;
&lt;li&gt;Be declarative and reproducible. A by product of being pure.&lt;&#x2F;li&gt;
&lt;li&gt;Support rollbacks. Also a by product of being pure.&lt;&#x2F;li&gt;
&lt;li&gt;Surface actionable errors. The corollary being it should be easy to understand
and observe what is happening.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;At a high level, the backup system works like so:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;ZFS creates automatic snapshots every so often.&lt;&#x2F;li&gt;
&lt;li&gt;Those snapshots are replicated to an EBS-backed EC2 instance that is only
alive while backup replication is happening. Taking advantage of ZFS&#x27;
incremental snapshot to make replication generally quite fast.&lt;&#x2F;li&gt;
&lt;li&gt;The EBS drive itself stays around after the instance is terminated. This
drive is a Cold HDD (sc1) which costs about $0.015 gb&#x2F;month.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;zfs&quot;&gt;ZFS&lt;&#x2F;h2&gt;
&lt;p&gt;To be honest I haven&#x27;t used ZFS all that much, but that&#x27;s kind of my point. I,
as a non-expert in ZFS, have been able to get a lot out of it just by
following the straightforward documentation. It seems like the API is well
thought out and the semantics are reasonable. For example, a consistent snapshot
is as easy as doing &lt;code&gt;zfs snapshot tank&#x2F;home&#x2F;marco@friday&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;automatic-snapshots&quot;&gt;Automatic snapshots&lt;&#x2F;h3&gt;
&lt;p&gt;On NixOS setting up automatic snapshots is a breeze, just add the following to
your NixOS Configuration:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;zfs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;autoSnapshot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and setting the &lt;code&gt;com.sun:auto-snapshot&lt;&#x2F;code&gt; option on the filesystem. E.g.: &lt;code&gt;zfs set com.sun:auto-snapshot=true &amp;lt;pool&amp;gt;&#x2F;&amp;lt;fs&amp;gt;&lt;&#x2F;code&gt;. Note that this can also be done on
creation of the filesystem: &lt;code&gt;zfs create -o mountpoint=legacy -o com.sun:auto-snapshot=true tank&#x2F;home&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With that enabled, ZFS will keep a snapshot for the latest 4 15-minute, 24
hourly, 7 daily, 4 weekly and 12 monthly snapshots.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;on-demand-ec2-instance-for-backups&quot;&gt;On Demand EC2 Instance for Backups&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we&#x27;ve demonstrated how to setup snapshotting, we need to tackle the
problem of replicating those snapshots somewhere so we can have real backups.
For that I use one of my favorite little tools:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stephank&#x2F;lazyssh&quot;&gt;lazyssh&lt;&#x2F;a&gt;. Its humble description betrays
little information at its true usefulness. The description is simply:
&lt;em&gt;A jump-host SSH server that starts machines on-demand&lt;&#x2F;em&gt;. What it enables is
pretty magical. It essentially lets you run arbitrary code when something SSHs
through the jump-host.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take the classic ZFS replication example from the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;cd&#x2F;E18752_01&#x2F;html&#x2F;819-5461&#x2F;gbchx.html&quot;&gt;docs&lt;&#x2F;a&gt;:
&lt;code&gt;host1# zfs send tank&#x2F;dana@snap1 | ssh host2 zfs recv newtank&#x2F;dana&lt;&#x2F;code&gt;. This
command copies a snapshot from a machine named &lt;code&gt;host1&lt;&#x2F;code&gt; to another machine named
&lt;code&gt;host2&lt;&#x2F;code&gt; over SSH. Simple and secure backups. But it relies on &lt;code&gt;host2&lt;&#x2F;code&gt; being
available. With &lt;code&gt;lazyssh&lt;&#x2F;code&gt; we can make &lt;code&gt;host2&lt;&#x2F;code&gt; only exist when needed.
&lt;code&gt;host2&lt;&#x2F;code&gt; would start when the ssh command is invoked and terminated when the ssh
command finishes. The command with &lt;code&gt;lazyssh&lt;&#x2F;code&gt; would look something like this
(assuming you have a &lt;code&gt;lazyssh&lt;&#x2F;code&gt; target in your &lt;code&gt;.ssh&#x2F;config&lt;&#x2F;code&gt; as explained in the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stephank&#x2F;lazyssh&quot;&gt;docs&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;host1# zfs send tank&#x2F;dana@snap1 | ssh -J lazyssh host2 zfs recv newtank&#x2F;dana
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the only difference is the &lt;code&gt;-J lazyssh&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So how do we actually setup &lt;code&gt;lazyssh&lt;&#x2F;code&gt; to do this? Here is my configuration:&lt;&#x2F;p&gt;
&lt;div &gt;
    &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;MarcoPolo&amp;#x2F;13462e986711f62bfc6b7b8e494c5cc8.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Note there are a couple of setup steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create the initial sc1 EBS Drive. I did this in the AWS Console, but you
could do this in Terraform or the AWS CLI.&lt;&#x2F;li&gt;
&lt;li&gt;Create the ZFS pool on the drive. I launched my lazy archiver without the ZFS
filesystem option and ran: &lt;code&gt;zpool create -o ashift=12 -O mountpoint=none POOL_NAME &#x2F;dev&#x2F;DRIVE_LOCATION&lt;&#x2F;code&gt;. Then I created the
&lt;code&gt;POOL_NAME&#x2F;backup&lt;&#x2F;code&gt; dataset with &lt;code&gt;zfs create -o acltype=posixacl -o xattr=sa -o mountpoint=legacy POOL_NAME&#x2F;backup&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;As a quality of life and security improvement I setup
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nix-community&#x2F;home-manager&quot;&gt;homemanager&lt;&#x2F;a&gt; to manage my SSH
config and known_hosts file so these are automatically correct and properly
setup. I generate the lines for known_hosts when I generate the host keys
that go in the &lt;code&gt;user_data&lt;&#x2F;code&gt; field in the &lt;code&gt;lazsyssh-config.hcl&lt;&#x2F;code&gt; above. Here&#x27;s the
relevant section from my homemanager config:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;programs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ssh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# I keep this file tracked in Git alongside my NixOS configs.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;userKnownHostsFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;path&#x2F;to&#x2F;known_hosts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;matchBlocks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= {
      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;archiver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; = {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hostname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;archiver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;proxyJump &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lazyssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;identityFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PATH_TO_AWS_KEYPAIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
      };

      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lazyssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; = {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This assume you are running lazyssh locally, but it can also
        # reference another machine.
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hostname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7922&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jump&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;identityFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PATH_TO_LAZYSSH_CLIENT_KEY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;identitiesOnly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;extraOptions &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= {
          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PreferredAuthentications&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;publickey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
        };
      };
    };
  };
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, I use the provided NixOS Module for &lt;code&gt;lazyssh&lt;&#x2F;code&gt; to manage starting it and
keeping it up. Here&#x27;s the relevant parts from my &lt;code&gt;flake.nix&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
  # My fork that supports placements and terminating instances after failing to
  # attach volume.
  inputs.lazyssh.url = &amp;quot;github:marcopolo&#x2F;lazyssh&#x2F;attach-volumes&amp;quot;;
  inputs.lazyssh.inputs.nixpkgs.follows = &amp;quot;nixpkgs&amp;quot;;

    outputs =
    { self
    , nixpkgs
    , lazyssh
    }: {
      nixosConfigurations = {

        nixMachineHostName = nixpkgs.lib.nixosSystem {
          system = &amp;quot;x86_64-linux&amp;quot;;
          modules = [
              {
                imports = [lazyssh.nixosModule]
                services.lazyssh.configFile =
                  &amp;quot;&#x2F;path&#x2F;to&#x2F;lazyssh-config.hcl&amp;quot;;
                # You&amp;#39;ll need to add the correct AWS credentials to `&#x2F;home&#x2F;lazyssh&#x2F;.aws`
                # This could probably be a symlink with home-manager to a
                # managed file somewhere else, but I haven&amp;#39;t go down that path
                # yet
                users.users.lazyssh = {
                  isNormalUser = true;
                  createHome = true;
                };
              }
          ];
        };
      };
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With all that setup, I can ssh into the archiver by simple running &lt;code&gt;ssh archiver&lt;&#x2F;code&gt;. Under the hood, &lt;code&gt;lazyssh&lt;&#x2F;code&gt; starts the EC2 instance and attaches the
EBS drive to it. And since &lt;code&gt;ssh archiver&lt;&#x2F;code&gt; works, so does the original example
of: &lt;code&gt;zfs send tank&#x2F;dana@snap1 | ssh archiver zfs recv newtank&#x2F;dana&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;automatic-replication&quot;&gt;Automatic Replication&lt;&#x2F;h2&gt;
&lt;p&gt;The next part of the puzzle is to have backups happen automatically. There are
various tools you can use for this. Even a simple cron that runs the &lt;code&gt;send&#x2F;recv&lt;&#x2F;code&gt;
on a schedule. I opted to go for what NixOS supports out of the box, which is
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alunduil&#x2F;zfs-replicate&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;alunduil&#x2F;zfs-replicate&lt;&#x2F;a&gt;.
Unfortunately, I ran into a couple issues that led me to make a fork. Namely:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;&#x2F;usr&#x2F;bin&#x2F;env - ssh&lt;&#x2F;code&gt; fails to use the ssh config file. My fork supports
specifying a custom ssh binary to use.&lt;&#x2F;li&gt;
&lt;li&gt;Support for &lt;code&gt;ExecStartPre&lt;&#x2F;code&gt;. This is to &amp;quot;warm up&amp;quot; the archiver instance. I run
&lt;code&gt;nixos-rebuild switch&lt;&#x2F;code&gt; which is basically a no-op if there is no changes to
apply from the configuration file, or blocks until the changes have been
applied. In my case these are usually the changes inside the UserData field.&lt;&#x2F;li&gt;
&lt;li&gt;Support for &lt;code&gt;ExecStopPost&lt;&#x2F;code&gt;. This is to add observability to this process.&lt;&#x2F;li&gt;
&lt;li&gt;I wanted to raise the systemd timeout limit. In case the &lt;code&gt;ExecStartPre&lt;&#x2F;code&gt; takes
a while to warm-up the instance.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Thankfully with flakes, using my own fork was painless. Here&#x27;s the relevant
section from my &lt;code&gt;flake.nix&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# inputs.zfs-replicate.url = &amp;quot;github:marcopolo&#x2F;zfs-replicate&#x2F;flake&amp;quot;;
  # ...
  # Inside nixosSystem modules...
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;pkgs, ... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
    {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;imports &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zfs-replicate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixosModule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Disable the existing module
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;disabledModules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;services&#x2F;backup&#x2F;zfs-replication.nix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; ];

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;zfs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;autoReplication &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;host &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;archiver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;sshPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;openssh&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;ssh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Make sure the machine is up-to-date
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;execStartPre &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;sshPath&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;} ${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; nixos-rebuild switch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;honeycombAPIKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;secrets.nix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;honeycomb_api_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;honeycombCommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeScriptBin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reportResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
            #!&#x2F;usr&#x2F;bin&#x2F;env &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;bash&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;bash
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;curl https:&#x2F;&#x2F;api.honeycomb.io&#x2F;1&#x2F;events&#x2F;zfs-replication -X POST \
              -H &amp;quot;X-Honeycomb-Team: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;honeycombAPIKey&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; \
              -H &amp;quot;X-Honeycomb-Event-Time: $(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;coreutils&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;date -u +&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;)&amp;quot; \
              -d &amp;quot;{\&amp;quot;serviceResult\&amp;quot;:\&amp;quot;$SERVICE_RESULT\&amp;quot;, \&amp;quot;exitCode\&amp;quot;: \&amp;quot;$EXIT_CODE\&amp;quot;, \&amp;quot;exitStatus\&amp;quot;: \&amp;quot;$EXIT_STATUS\&amp;quot;}&amp;quot;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&amp;#39;;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;execStopPost &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;honeycombCommand&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;reportResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;inherit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;execStartPre execStopPost host sshPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;timeout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;localFilesystem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rpool&#x2F;safe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;remoteFilesystem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rpool&#x2F;backup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;identityFilePath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PATH_TO_AWS_KEY_PAIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
        };
    })
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That sets up a systemd service that runs after every snapshot. It also
reports the result of the replication to
&lt;a href=&quot;https:&#x2F;&#x2F;www.honeycomb.io&#x2F;&quot;&gt;Honeycomb&lt;&#x2F;a&gt;, which brings us to our next
section...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;observability&quot;&gt;Observability&lt;&#x2F;h2&gt;
&lt;p&gt;The crux of any automated process is it failing silently. This is especially bad
in the context of backups, since you don&#x27;t need them until you do. I solved this
by reporting the result of the replication to Honeycomb after every run. It
reports the &lt;code&gt;$SERVICE_RESULT&lt;&#x2F;code&gt;, &lt;code&gt;$EXIT_CODE&lt;&#x2F;code&gt; and &lt;code&gt;$EXIT_STATUS&lt;&#x2F;code&gt; as returned by
systemd. I then create an alert that fires if there are no successful runs in
the past hour.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;future-work&quot;&gt;Future Work&lt;&#x2F;h2&gt;
&lt;p&gt;While I like this system for being simple, I think there is a bit more work in
making it pure. For one, there should be no more than 1 manual step for setup,
and 1 manual step for tear down. There should also be a similar simplicity in
upgrading&#x2F;downgrading storage space.&lt;&#x2F;p&gt;
&lt;p&gt;For reliability, the archiver instance should scrub its drive on a schedule.
This isn&#x27;t setup yet.&lt;&#x2F;p&gt;
&lt;p&gt;At $0.015 gb&#x2F;month this is relatively cheap, but not the cheapest. According to
&lt;a href=&quot;https:&#x2F;&#x2F;filstats.com&#x2F;&quot;&gt;filstats&lt;&#x2F;a&gt; I could use
&lt;a href=&quot;https:&#x2F;&#x2F;www.filecoin.com&#x2F;&quot;&gt;Filecoin&lt;&#x2F;a&gt; to store data for much less. There&#x27;s no
Block Device interface to this yet, so it wouldn&#x27;t be as simple as ZFS
&lt;code&gt;send&#x2F;recv&lt;&#x2F;code&gt;. You&#x27;d lose the benefits of incremental snapshots. But it may be
possible to build a block device interface on top. Maybe with an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Network_block_device&quot;&gt;nbd-server&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extra&quot;&gt;Extra&lt;&#x2F;h2&gt;
&lt;p&gt;Bits and pieces that may be helpful if you try setting something similar up.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setting-host-key-and-nix-configuration-with-userdata&quot;&gt;Setting host key and Nix Configuration with UserData&lt;&#x2F;h3&gt;
&lt;p&gt;NixOS on AWS has this undocumented nifty feature of setting the ssh host
key and a new &lt;code&gt;configuration.nix&lt;&#x2F;code&gt; file straight from the &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;APIReference&#x2F;API_UserData.html&quot;&gt;UserData
field&lt;&#x2F;a&gt;.
This lets you one, be sure that your SSH connection isn&#x27;t being
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Man-in-the-middle_attack&quot;&gt;MITM&lt;&#x2F;a&gt;, and two, configure
the machine in a simple way. I use this feature to set the SSH host key and set
the machine up with ZFS and the the &lt;code&gt;lz4&lt;&#x2F;code&gt; compression package.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;questions-comments&quot;&gt;Questions? Comments?&lt;&#x2F;h3&gt;
&lt;p&gt;Email me if you set this system up. This is purposely not a tutorial, so you may
hit snags. If you think something could be clearer feel free to make an
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;marcopolo&#x2F;marcopolo.github.io&quot;&gt;edit&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Conditionals in Ginger, Errata</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-03-04T00:00:00+00:00</published>
    <updated>2021-03-04T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-conditionals-in-ginger-errata/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-conditionals-in-ginger-errata/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/03/04/conditionals-in-ginger-errata.html</id>
        <link href="https://blog.mediocregopher.com/2021/03/04/conditionals-in-ginger-errata.html"/>
        <title>Conditionals in Ginger, Errata</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-03-04T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-conditionals-in-ginger-errata/</id>
    <content type="html">
        &lt;p&gt;After publishing the last post in the series I walked away from my computer
feeling that I was very clever and had made a good post. This was incorrect.&lt;&#x2F;p&gt;

&lt;p&gt;To summarize &lt;a href=&quot;&#x2F;2021&#x2F;03&#x2F;01&#x2F;conditionals-in-ginger.html&quot;&gt;the previous post&lt;&#x2F;a&gt;, it’s not obvious which is the best way
to structure conditionals in a graphical programming language. My favorite
solution looked something like this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       in -&amp;gt; } -&amp;gt; } -if-&amp;gt; } -0-&amp;gt; } -add-&amp;gt; out
in -1-&amp;gt; } -&amp;gt; }    }       } -1-&amp;gt; } -sub-&amp;gt; out
in -0-&amp;gt; }         }
                  }
         in -lt-&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Essentially an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; operator which accepts a value and a boolean, and which has
two output edges. If the boolean is true then the input value is sent along the
first output edge, and if it’s false it’s sent along the second.&lt;&#x2F;p&gt;

&lt;p&gt;This structure is not possible, given the properties of ginger graphs that have
been laid out in &lt;a href=&quot;&#x2F;2021&#x2F;01&#x2F;09&#x2F;ginger.html&quot;&gt;other posts in the series&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;nodes-tuples-and-edges&quot;&gt;Nodes, Tuples, and Edges&lt;&#x2F;h2&gt;

&lt;p&gt;A ginger graph, as it has been presented so far, is composed of these three
elements. A node has a value, and its value is unique to the graph; if two nodes
have the same value then they are the same node. Edges connect two nodes or
tuples together, and have a value and direction. Tuples are, in essence, a node
whose value is its input edges.&lt;&#x2F;p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; operation above lies on an edge, not a node or tuple. It cannot have
multiple output edges, since it cannot have any edges at all. It &lt;em&gt;is&lt;&#x2F;em&gt; an edge.&lt;&#x2F;p&gt;

&lt;p&gt;So it’s back to the drawing board, to some extent. But luckily I’ve got some
more ideas in my back pocket.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;forks-and-junctions&quot;&gt;Forks and Junctions&lt;&#x2F;h2&gt;

&lt;p&gt;In an older conception of ginger there was no tuple, but instead there were
forks and junctions. A junction was essentially the same as a tuple, just named
differently: a node whose value is its input edges. A fork was just the
opposite, a node whose value is its output edges. Junctions and forks naturally
complimented each other, but ultimately I didn’t find forks to be useful for
much because there weren’t cases where it was necessary to have a single edge be
split across multiple output edges directly; any case which appeared to require
a fork could be satisfied by directing the edge into a 1-tuple and using the
output edges of the 1-tuple.&lt;&#x2F;p&gt;

&lt;p&gt;But now we have such a case. The 1-tuple won’t work, because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; operator
would only see the 1-tuple, not its edges. It could be supposed that the graph
interpreter could say that an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; operation must be followed by a 1-tuple, and
that the 1-tuple’s output edges have a special meaning in that circumstance. But
making the output edges of a 1-tuple have different meaning in different
circumstances isn’t very elegant.&lt;&#x2F;p&gt;

&lt;p&gt;So a fork might be just the thing here. For the example I will represent a
fork as the opposite of a tuple: a vertical column of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;&#x2F;code&gt; characters.&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       in -&amp;gt; } -&amp;gt; } -if-&amp;gt; { -0-&amp;gt; } -add-&amp;gt; out
in -1-&amp;gt; } -&amp;gt; }    }       { -1-&amp;gt; } -sub-&amp;gt; out
in -0-&amp;gt; }         }
                  }
         in -lt-&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;It &lt;em&gt;looks&lt;&#x2F;em&gt; elegant, which is nice. I am curious though if there’s any other
possible use-case where a fork might be useful… if there’s not then it seems
odd to introduce an entire new element just to support a single operation. Why
not just make that operation itself the new element?&lt;&#x2F;p&gt;

&lt;h2 id=&quot;switch-it-up&quot;&gt;Switch it Up&lt;&#x2F;h2&gt;

&lt;p&gt;In most conceptions of a flowchart that I’ve seen a conditional is usually
represented as a node with a different shape than the other nodes (often a
diamond). Ginger could borrow this idea for itself, and declare a new graph
element, alongside nodes, tuples, and edges, called a switch.&lt;&#x2F;p&gt;

&lt;p&gt;Let’s say a switch is simply represented by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&amp;lt;&amp;gt;&lt;&#x2F;code&gt;, and acts like a node in all
aspects except that it has no value and is not unique to the graph.&lt;&#x2F;p&gt;

&lt;p&gt;The example presented in the &lt;a href=&quot;&#x2F;2021&#x2F;03&#x2F;01&#x2F;conditionals-in-ginger.html&quot;&gt;previous post&lt;&#x2F;a&gt; would look something like
this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       in -&amp;gt; } -&amp;gt; } -&amp;lt;&amp;gt; -0-&amp;gt; } -add-&amp;gt; out
in -1-&amp;gt; } -&amp;gt; }    }     -1-&amp;gt; } -sub-&amp;gt; out
in -0-&amp;gt; }         }
                  }
         in -lt-&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;This isn’t the &lt;em&gt;worst&lt;&#x2F;em&gt;. Like the fork it’s adding a new element, but that
element’s existence is required and its usage is very specific to that
requirement, whereas the fork’s existence is required but ambiguously useful
outside of that requirement.&lt;&#x2F;p&gt;

&lt;p&gt;On the other hand, there are macros to consider…&lt;&#x2F;p&gt;

&lt;h2 id=&quot;macrophillic&quot;&gt;Macrophillic&lt;&#x2F;h2&gt;

&lt;p&gt;Ginger will certainly support macros, and as alluded to in the last post I’d
like even conditional operations to be fair game for those who want to construct
their own more complex operators. In the context of the switch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&amp;lt;&amp;gt;&lt;&#x2F;code&gt; element,
would someone be able to create something like a pattern matching conditional?
If the builtin conditional is implemented as a new graph element then it seems
that the primary way to implement a custom conditional macro will also involve a
new graph element.&lt;&#x2F;p&gt;

&lt;p&gt;While I’m not flat out opposed to allowing for custom graph elements, I’m
extremely skeptical that it’s necessary, and would like it to be proven
necessary before considering it. So if we can have a basic conditional, &lt;em&gt;and&lt;&#x2F;em&gt;
custom conditional macros built on top of the same broadly useful element, that
seems like the better strategy.&lt;&#x2F;p&gt;

&lt;p&gt;So all of that said, it seems I’m leaning towards forks as the better strategy
in this. But I’d like a different name. “Fork” was nice as being the compliment
of a “junction”, but I like “tuple” way more than “junction” because the term
applies well both to the structural element &lt;em&gt;and&lt;&#x2F;em&gt; to the transformation that
element performs (i.e. a tuple element combines its input edges’ values into a
tuple value). But “tuple” and “fork” seem weird together…&lt;&#x2F;p&gt;

&lt;h2 id=&quot;many-minutes-later&quot;&gt;Many Minutes Later…&lt;&#x2F;h2&gt;

&lt;p&gt;A brief search of the internet reveals no better word than “fork”. A place
where a tree’s trunk splits into two separate trunks is called a “fork”. A
place where a river splits into two separate rivers is called a “fork”.
Similarly with roads. And that &lt;em&gt;is&lt;&#x2F;em&gt; what’s happening, from the point of view of
the graph’s structure: it is an element whose only purpose is to denote multiple
outward edges.&lt;&#x2F;p&gt;

&lt;p&gt;So “fork” it is.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;other-considerations&quot;&gt;Other considerations&lt;&#x2F;h2&gt;

&lt;p&gt;A 1-tuple is interesting in that it acts essentially as a concatenation of two
edges. A 1-fork could, theoretically, do the same thing:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a -foo-&amp;gt; } -bar-&amp;gt; b

c -far-&amp;gt; { -boo-&amp;gt; d
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;The top uses a tuple, the bottom a fork. Each is, conceptually, valid, but I
don’t like that two different elements can be used for the exact same use-case.&lt;&#x2F;p&gt;

&lt;p&gt;A 1-tuple is an established concept in data structures, so I am loath to give it
up.  A 1-fork, on the other hand, doesn’t make sense structurally (would you
point to any random point on a river and call it a “1-fork”?), and fork as a
whole doesn’t really have any analog in the realm of data structures. So I’m
prepared to declare 1-forks invalid from the viewpoint of the language
interpreter.&lt;&#x2F;p&gt;

&lt;p&gt;Another consideration: I already expect that there’s going to be confusion as to
when to use a fork and when to use multiple outputs from a node. For example,
here’s a graph which uses a fork:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a -&amp;gt; { -op1-&amp;gt; foo
     { -op2-&amp;gt; bar
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;and here’s a graph which has multiple outputs from the same node:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a -op1-&amp;gt; foo
  -op2-&amp;gt; bar
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Each could be interpreted to mean the same thing: “set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;&#x2F;code&gt; to the result of
passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;&#x2F;code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op1&lt;&#x2F;code&gt;, and set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;&#x2F;code&gt; to the result of passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;&#x2F;code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op2&lt;&#x2F;code&gt;.”
As with the 1-tuple vs 1-fork issue, we have another case where the same
task might be accomplished with two different patterns. This case is trickier
though, and I don’t have as confident an answer.&lt;&#x2F;p&gt;

&lt;p&gt;I think an interim rule which could be put in place, subject to review later, is
that multiple edges from a node or tuple indicate that that same value is being
used for multiple operations, while a fork indicates something specific to the
operation on its input edge. It’s not a pretty rule, but I think it will do.&lt;&#x2F;p&gt;

&lt;p&gt;Stay tuned for next week when I realize that actually all of this is wrong and
we start over again!&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Conditionals in Ginger</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-03-01T00:00:00+00:00</published>
    <updated>2021-03-01T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-conditionals-in-ginger/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-conditionals-in-ginger/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/03/01/conditionals-in-ginger.html</id>
        <link href="https://blog.mediocregopher.com/2021/03/01/conditionals-in-ginger.html"/>
        <title>Conditionals in Ginger</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-03-01T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-conditionals-in-ginger/</id>
    <content type="html">
        &lt;p&gt;In the &lt;a href=&quot;&#x2F;2021&#x2F;01&#x2F;09&#x2F;ginger.html&quot;&gt;last ginger post&lt;&#x2F;a&gt; I covered a broad overview of how I envisioned
ginger would work as a language, but there were two areas where I felt there was
some uncertainty: conditionals and loops. In this post I will be focusing on
conditionals, and going over a couple of options for how they could work.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;&#x2F;h2&gt;

&lt;p&gt;By “conditional” I’m referring to what programmers generally know as the “if”
statement; some mechanism by which code can do one thing or another based on
circumstances at runtime. Without some form of a conditional a programming
language is not Turing-complete and can’t be used for anything interesting.&lt;&#x2F;p&gt;

&lt;p&gt;Given that it’s uncommon to have a loop without some kind of a conditional
inside of it (usually to exit the loop), but it’s quite common to have a
conditional with no loop in sight, it makes more sense to cover conditionals
before loops. Whatever decision is reached regarding conditionals will impact
how loops work, but not necessarily the other way around.&lt;&#x2F;p&gt;

&lt;p&gt;For the duration of this post I will be attempting to construct a simple
operation which takes two integers as arguments. If the first is less than
the second then the operation returns the addition of the two, otherwise the
operation returns the second subtracted from the first. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go&lt;&#x2F;code&gt; this operation
would look like:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;&#x2F;span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;h2 id=&quot;pattern-1-branches-as-inputs&quot;&gt;Pattern 1: Branches As Inputs&lt;&#x2F;h2&gt;

&lt;p&gt;The pattern I’ll lay out here is simultaneously the first pattern which came to
me when trying to figure this problem out, the pattern which is most like
existing mainstream programming languages, and (in my opinion) the worst pattern
of the bunch. Here is what it looks like:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        in -lt-&amp;gt; } -if-&amp;gt; out
                 }
       in -add-&amp;gt; }
                 }
in -1-&amp;gt; }        }
in -0-&amp;gt; } -sub-&amp;gt; }

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;The idea here is that the operation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; could take a 3-tuple whose elements
are, respectively: a boolean, and two other edges which won’t be evaluated until
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; is evaluated. If the boolean is true then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; outputs the output of the
first edge (the second element in the tuple), and otherwise it will output the
value of the second edge.&lt;&#x2F;p&gt;

&lt;p&gt;This idea doesn’t work for a couple reasons. The biggest is that, if there were
multiple levels of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; statements, the structure of the graph grows out
&lt;em&gt;leftward&lt;&#x2F;em&gt;, whereas the flow of data is rightwards. For someone reading the code
to know what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; will produce in either case they must first backtrack through
the graph, find the origin of that branch, then track that leftward once again
to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;p&gt;The other reason this doesn’t work is because it doesn’t jive with any pattern
for loops I’ve come up with. This isn’t evident from this particular example,
but consider what this would look like if either branch of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; needed to
loop back to a previous point in the codepath. If that’s a difficult or
confusing task for you, you’re not alone.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;pattern-2-pattern-matching&quot;&gt;Pattern 2: Pattern Matching&lt;&#x2F;h2&gt;

&lt;p&gt;There’s quite a few languages with pattern matching, and even one which I know
of (erlang) where pattern matching is the primary form of conditionals, and the
more common &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; statement is just some syntactic sugar on top of the pattern
matching.&lt;&#x2F;p&gt;

&lt;p&gt;I’ve considered pattern matching for ginger. It might look something like:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       in -&amp;gt; } -switch-&amp;gt; } -&amp;gt; {{{A, B}, _}, ({A,B}-lt-&amp;gt;out)} -0-&amp;gt; } -add-&amp;gt; out
in -1-&amp;gt; } -&amp;gt; }           } -1-&amp;gt; } -sub-&amp;gt; out
in -0-&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;&#x2F;code&gt; operation posits that a node can have multiple output edges. In a
graph this is fine, but it’s worth noting. Graphs tend to be implemented such
that edges to and from a node are unordered, but in ginger it seems unlikely
that that will be the case.&lt;&#x2F;p&gt;

&lt;p&gt;The last output edge from the switch is the easiest to explain: it outputs the
input value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;&#x2F;code&gt; when no other branches are able to be taken. But the
input to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;&#x2F;code&gt; is a bit complex in this example: It’s a 2-tuple whose first
element is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;&#x2F;code&gt;, and whose second element is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;&#x2F;code&gt; but with reversed elements.
In the last output edge we immediately pipe into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;&#x2F;code&gt; operation to retrieve
that second element and call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub&lt;&#x2F;code&gt; on that, since that’s the required behavior
of the example.&lt;&#x2F;p&gt;

&lt;p&gt;All other branches (in this switch there is only one, the first branch) output
to a value. The form of this value is a tuple (denoted by enclosed curly braces
here) of two values. The first value is the pattern itself, and the second is an
optional predicate. The pattern in this example will match a 2-tuple, ignoring
the second element in that tuple. The first element will itself be matched
against a 2-tuple, and assign each element to the variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;&#x2F;code&gt;,
respectively. The second element in the tuple, the predicate, is a sub-graph
which returns a boolean, and can be used for further specificity which can’t be
covered by the pattern matching (in this case, comparing the two values to each
other).&lt;&#x2F;p&gt;

&lt;p&gt;The output from any of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;&#x2F;code&gt;’s branches is the same as its input value, the
only question is which branch is taken. This means that there’s no backtracking
when reading a program using this pattern; no matter where you’re looking you
will only have to keep reading rightward to come to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;p&gt;There’s a few drawbacks with this approach. The first is that it’s not actually
very easy to read. While pattern matching can be a really nice feature in
languages that design around it, I’ve never seen it used in a LISP-style
language where the syntax denotes actual datastructures, and I feel that in such
a context it’s a bit unwieldy. I could be wrong.&lt;&#x2F;p&gt;

&lt;p&gt;The second drawback is that pattern matching is not simple to implement, and I’m
not even sure what it would look like in a language where graphs are the primary
datastructure. In the above example we’re only matching into a tuple, but how
would you format the pattern for a multi-node, multi-edge graph? Perhaps it’s
possible. But given that any such system could be implemented as a macro on top
of normal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; statements, rather than doing it the other way around, it seems
better to start with the simpler option.&lt;&#x2F;p&gt;

&lt;p&gt;(I haven’t talked about it yet, but I’d like for ginger to be portable to
multiple backends (i.e. different processor architectures, vms, etc). If the
builtins of the language are complex, then doing this will be a difficult task,
whereas if I’m conscious of that goal during design I think it can be made to be
very simple. In that light I’d prefer to not require pattern matching to be a
builtin.)&lt;&#x2F;p&gt;

&lt;p&gt;The third drawback is that the input to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;&#x2F;code&gt; requires careful ordering,
especially in cases like this one where a different value is needed depending on
which branch is taken. I don’t consider this to be a huge drawback, as
encourages good data design and is a common consideration in other functional
languages.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;pattern-3-branches-as-outputs&quot;&gt;Pattern 3: Branches As Outputs&lt;&#x2F;h2&gt;

&lt;p&gt;Taking a cue from the pattern matching example, we can go back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; and take
advantage of multiple output edges being a possibility:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       in -&amp;gt; } -&amp;gt; } -if-&amp;gt; } -0-&amp;gt; } -add-&amp;gt; out
in -1-&amp;gt; } -&amp;gt; }    }       } -1-&amp;gt; } -sub-&amp;gt; out
in -0-&amp;gt; }         }
                  }
         in -lt-&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;It’s not perfect, but I’d say this is the nicest of the three options so far.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; is an operation which takes a 2-tuple. The second element of the tuple is a
boolean, if the boolean is true then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; passes the first element of its tuple
to the first branch, otherwise it passes it to the second. In this way &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt;
becomes kind of like a fork in a train track: it accepts some payload (the first
element of its input tuple) and depending on conditions (the second element) it
directs the payload one way or the other.&lt;&#x2F;p&gt;

&lt;p&gt;This pattern retains the benefits of the pattern matching example, where one
never needs to backtrack in order to understand what is about to happen next,
while also being much more readable and simpler to implement. It also retains
one of the drawbacks of the pattern matching example, in that the inputs to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt;
must be carefully organized based on the needs of the output branches. As
before, I don’t consider this to be a huge drawback.&lt;&#x2F;p&gt;

&lt;p&gt;There’s other modifications which might be made to this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; to make it even
cleaner, e.g. one could make it accept a 3-tuple, rather than a 2-tuple, in
order to supply differing values to be used depending on which branch is taken.
To me these sorts of small niceties are better left to be implemented as macros,
built on top of a simpler but less pleasant builtin.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;fin&quot;&gt;Fin&lt;&#x2F;h2&gt;

&lt;p&gt;If you have other ideas around how conditionals might be done in a graph-based
language please &lt;a href=&quot;mailto:mediocregopher@gmail.com&quot;&gt;email me&lt;&#x2F;a&gt;; any and all contributions are welcome! One
day I’ll get around to actually implementing some of ginger, but today is not
that day.&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Building gomobile Using Nix</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-02-13T00:00:00+00:00</published>
    <updated>2021-02-13T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-building-gomobile-using-nix/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-building-gomobile-using-nix/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/02/13/building-gomobile-using-nix.html</id>
        <link href="https://blog.mediocregopher.com/2021/02/13/building-gomobile-using-nix.html"/>
        <title>Building gomobile Using Nix</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-02-13T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-building-gomobile-using-nix/</id>
    <content type="html">
        &lt;p&gt;When I last left off with the nebula project I wanted to &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nix&#x2F;stable&#x2F;&quot;&gt;nix&lt;&#x2F;a&gt;-ify the
build process for Cryptic’s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cryptic-io&#x2F;mobile_nebula&quot;&gt;mobile_nebula&lt;&#x2F;a&gt; fork. While I’ve made
progress on the overall build, one particular bit of it really held me up, so
I’m writing about that part here. I’ll finish the full build at a later time.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;gomobile&quot;&gt;gomobile&lt;&#x2F;h2&gt;

&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golang&#x2F;mobile&quot;&gt;gomobile&lt;&#x2F;a&gt; is a toolkit for the go programming language to allow for
running go code on Android and iOS devices. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mobile_nebula&lt;&#x2F;code&gt; uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gomobile&lt;&#x2F;code&gt; to
build a simple wrapper around the nebula client that the mobile app can then
hook into.&lt;&#x2F;p&gt;

&lt;p&gt;This means that in order to nix-ify the entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mobile_nebula&lt;&#x2F;code&gt; project I first
need to nix-ify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gomobile&lt;&#x2F;code&gt;, and since there isn’t (at time of writing) an
existing package for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gomobile&lt;&#x2F;code&gt; in the nixpkgs repo, I had to roll my own.&lt;&#x2F;p&gt;

&lt;p&gt;I started with a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildGoModule&lt;&#x2F;code&gt; nix expression:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pkgs.buildGoModule {
    pname = &quot;gomobile&quot;;
    version = &quot;unstable-2020-12-17&quot;;
    src = pkgs.fetchFromGitHub {
        owner = &quot;golang&quot;;
        repo = &quot;mobile&quot;;
        rev = &quot;e6ae53a27f4fd7cfa2943f2ae47b96cba8eb01c9&quot;;
        sha256 = &quot;03dzis3xkj0abcm4k95w2zd4l9ygn0rhkj56bzxbcpwa7idqhd62&quot;;
    };
    vendorSha256 = &quot;1n1338vqkc1n8cy94501n7jn3qbr28q9d9zxnq2b4rxsqjfc9l94&quot;;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;The basic idea here is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildGoModule&lt;&#x2F;code&gt; will acquire a specific revision of
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gomobile&lt;&#x2F;code&gt; source code from github, then attempt to build it. However,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gomobile&lt;&#x2F;code&gt; is a special beast in that it requires a number of C&#x2F;C++ libraries in
order to be built. I discovered this upon running this expression, when I
received this error:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.&#x2F;work.h:12:10: fatal error: GLES3&#x2F;gl3.h: No such file or directory
   12 | #include &amp;lt;GLES3&#x2F;gl3.h&amp;gt; &#x2F;&#x2F; install on Ubuntu with: sudo apt-get install libegl1-mesa-dev libgles2-mesa-dev libx11-dev
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;This stumped me for a bit, as I couldn’t figure out a) the “right” place to
source the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GLES3&lt;&#x2F;code&gt; header file from, and b) how to properly hook that into the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildGoModule&lt;&#x2F;code&gt; expression. My initial attempts involved trying to include
versions of the header file from my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidsdk&lt;&#x2F;code&gt; nix package which I had already
gotten (mostly) working, but the version which ships there appears to expect to
be using clang. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgo&lt;&#x2F;code&gt; (go’s compiler which is used for C&#x2F;C++ interop) only
supports gcc, so that strategy failed.&lt;&#x2F;p&gt;

&lt;p&gt;I didn’t like having to import the header file from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidsdk&lt;&#x2F;code&gt; anyway, as it
meant that my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gomobile&lt;&#x2F;code&gt; would only work within the context of the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mobile_nebula&lt;&#x2F;code&gt; project, rather than being a standalone utility.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;nix-index&quot;&gt;nix-index&lt;&#x2F;h2&gt;

&lt;p&gt;At this point I flailed around some more trying to figure out where to get this
header file from. Eventually I stumbled on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bennofs&#x2F;nix-index&quot;&gt;nix-index&lt;&#x2F;a&gt; project,
which implements something similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locate&lt;&#x2F;code&gt; utility on linux: you give it
a file pattern, and it searches your active nix channels for any packages which
provide a file matching that pattern.&lt;&#x2F;p&gt;

&lt;p&gt;Since nix is amazing it’s not actually necessary to install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nix-index&lt;&#x2F;code&gt;, I
simply start up a shell with the package available using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nix-shell -p
nix-index&lt;&#x2F;code&gt;. On first run I needed to populate the index by running the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nix-index&lt;&#x2F;code&gt; command, which took some time, but after that finding packages which
provide the file I need is as easy as:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; nix-shell -p nix-index
[nix-shell:&#x2F;tmp]$ nix-locate GLES3&#x2F;gl3.h
(zulip.out)                                      82,674 r &#x2F;nix&#x2F;store&#x2F;wbfw7w2ixdp317wip77d4ji834v1k1b9-libglvnd-1.3.2-dev&#x2F;include&#x2F;GLES3&#x2F;gl3.h
libglvnd.dev                                     82,674 r &#x2F;nix&#x2F;store&#x2F;pghxzmnmxdcarg5bj3js9csz0h85g08m-libglvnd-1.3.2-dev&#x2F;include&#x2F;GLES3&#x2F;gl3.h
emscripten.out                                   82,666 r &#x2F;nix&#x2F;store&#x2F;x3c4y2h5rn1jawybk48r6glzs1jl029s-emscripten-2.0.1&#x2F;share&#x2F;emscripten&#x2F;system&#x2F;include&#x2F;GLES3&#x2F;gl3.h
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;So my mystery file is provided by a few packages, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libglvnd.dev&lt;&#x2F;code&gt; stood out
to me as it’s also the pacman package which provides the same file in my real
operating system:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; yay -Qo &#x2F;usr&#x2F;include&#x2F;GLES3&#x2F;gl3.h
&#x2F;usr&#x2F;include&#x2F;GLES3&#x2F;gl3.h is owned by libglvnd 1.3.2-1
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;This gave me some confidence that this was the right track.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;cgo&quot;&gt;cgo&lt;&#x2F;h2&gt;

&lt;p&gt;My next fight was with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgo&lt;&#x2F;code&gt; itself. Go’s build process provides a few different
entry points for C&#x2F;C++ compiler&#x2F;linker flags, including both environment
variables and command-line arguments. But I wasn’t using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go build&lt;&#x2F;code&gt; directly,
instead I was working through nix’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildGoModule&lt;&#x2F;code&gt; wrapper. This added a huge
layer of confusion as all of nixpkgs is pretty terribly documented, so you
really have to just divine behavior from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;blob&#x2F;26117ed4b78020252e49fe75f562378063471f71&#x2F;pkgs&#x2F;development&#x2F;go-modules&#x2F;generic&#x2F;default.nix&quot;&gt;source&lt;&#x2F;a&gt;
(good luck).&lt;&#x2F;p&gt;

&lt;p&gt;After lots of debugging (hint: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIX_DEBUG=1&lt;&#x2F;code&gt;) I determined that all which is
actually needed is to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGO_CFLAGS&lt;&#x2F;code&gt; variable within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildGoModule&lt;&#x2F;code&gt;
arguments. This would translate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGO_CFLAGS&lt;&#x2F;code&gt; environment variable being
set during all internal commands, and whatever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go build&lt;&#x2F;code&gt; commands get used
would pick up my compiler flags from that.&lt;&#x2F;p&gt;

&lt;p&gt;My new nix expression looked like this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pkgs.buildGoModule {
    pname = &quot;gomobile&quot;;
    version = &quot;unstable-2020-12-17&quot;;
    src = pkgs.fetchFromGitHub {
        owner = &quot;golang&quot;;
        repo = &quot;mobile&quot;;
        rev = &quot;e6ae53a27f4fd7cfa2943f2ae47b96cba8eb01c9&quot;;
        sha256 = &quot;03dzis3xkj0abcm4k95w2zd4l9ygn0rhkj56bzxbcpwa7idqhd62&quot;;
    };
    vendorSha256 = &quot;1n1338vqkc1n8cy94501n7jn3qbr28q9d9zxnq2b4rxsqjfc9l94&quot;;

    CGO_CFLAGS = [
        &quot;-I ${pkgs.libglvnd.dev}&#x2F;include&quot;
    ];
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Running this produced a new error. Progress! The new error was:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&#x2F;nix&#x2F;store&#x2F;p792j5f44l3f0xi7ai5jllwnxqwnka88-binutils-2.31.1&#x2F;bin&#x2F;ld: cannot find -lGLESv2
collect2: error: ld returned 1 exit status
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;So pretty similar to the previous issue, but this time the linker wasn’t finding
a library file rather than the compiler not finding a header file. Once again I
used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nix-index&lt;&#x2F;code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nix-locate&lt;&#x2F;code&gt; command to find that this library file is
provided by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libglvnd&lt;&#x2F;code&gt; package (as opposed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libglvnd.dev&lt;&#x2F;code&gt;, which provided
the header file).&lt;&#x2F;p&gt;

&lt;p&gt;Adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libglvnd&lt;&#x2F;code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGO_CFLAGS&lt;&#x2F;code&gt; did not work, as it turns out that flags
for the linker &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgo&lt;&#x2F;code&gt; uses get passed in via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGO_LDFLAGS&lt;&#x2F;code&gt; (makes sense). After
adding this new variable I got yet another error; this time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X11&#x2F;Xlib.h&lt;&#x2F;code&gt; was not
able to be found. I repeated the process of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nix-locate&lt;&#x2F;code&gt;&#x2F;add to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGO_*FLAGS&lt;&#x2F;code&gt; a
few more times until all dependencies were accounted for. The new nix expression
looked like this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pkgs.buildGoModule {
    pname = &quot;gomobile&quot;;
    version = &quot;unstable-2020-12-17&quot;;
    src = pkgs.fetchFromGitHub {
        owner = &quot;golang&quot;;
        repo = &quot;mobile&quot;;
        rev = &quot;e6ae53a27f4fd7cfa2943f2ae47b96cba8eb01c9&quot;;
        sha256 = &quot;03dzis3xkj0abcm4k95w2zd4l9ygn0rhkj56bzxbcpwa7idqhd62&quot;;
    };
    vendorSha256 = &quot;1n1338vqkc1n8cy94501n7jn3qbr28q9d9zxnq2b4rxsqjfc9l94&quot;;

    CGO_CFLAGS = [
        &quot;-I ${pkgs.libglvnd.dev}&#x2F;include&quot;
        &quot;-I ${pkgs.xlibs.libX11.dev}&#x2F;include&quot;
        &quot;-I ${pkgs.xlibs.xorgproto}&#x2F;include&quot;
        &quot;-I ${pkgs.openal}&#x2F;include&quot;
    ];

    CGO_LDFLAGS = [
        &quot;-L ${pkgs.libglvnd}&#x2F;lib&quot;
        &quot;-L ${pkgs.xlibs.libX11}&#x2F;lib&quot;
        &quot;-L ${pkgs.openal}&#x2F;lib&quot;
    ];
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;h2 id=&quot;tests&quot;&gt;Tests&lt;&#x2F;h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGO_*FLAGS&lt;&#x2F;code&gt; variables took care of all compiler&#x2F;linker errors, but there
was one issue left: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildGoModule&lt;&#x2F;code&gt; apparently runs the project’s tests after
the build phase. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gomobile&lt;&#x2F;code&gt;’s tests were actually mostly passing, but some
failed due to trying to copy files around, which nix was having none of. After
some more &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;blob&#x2F;26117ed4b78020252e49fe75f562378063471f71&#x2F;pkgs&#x2F;development&#x2F;go-modules&#x2F;generic&#x2F;default.nix&quot;&gt;buildGoModule source&lt;&#x2F;a&gt; divination I found that
if I passed an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkPhase&lt;&#x2F;code&gt; argument it would skip the check phase, and
therefore skip running these tests.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;fin&quot;&gt;Fin!&lt;&#x2F;h2&gt;

&lt;p&gt;The final nix expression looks like so:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pkgs.buildGoModule {
    pname = &quot;gomobile&quot;;
    version = &quot;unstable-2020-12-17&quot;;
    src = pkgs.fetchFromGitHub {
        owner = &quot;golang&quot;;
        repo = &quot;mobile&quot;;
        rev = &quot;e6ae53a27f4fd7cfa2943f2ae47b96cba8eb01c9&quot;;
        sha256 = &quot;03dzis3xkj0abcm4k95w2zd4l9ygn0rhkj56bzxbcpwa7idqhd62&quot;;
    };
    vendorSha256 = &quot;1n1338vqkc1n8cy94501n7jn3qbr28q9d9zxnq2b4rxsqjfc9l94&quot;;

    CGO_CFLAGS = [
        &quot;-I ${pkgs.libglvnd.dev}&#x2F;include&quot;
        &quot;-I ${pkgs.xlibs.libX11.dev}&#x2F;include&quot;
        &quot;-I ${pkgs.xlibs.xorgproto}&#x2F;include&quot;
        &quot;-I ${pkgs.openal}&#x2F;include&quot;
    ];

    CGO_LDFLAGS = [
        &quot;-L ${pkgs.libglvnd}&#x2F;lib&quot;
        &quot;-L ${pkgs.xlibs.libX11}&#x2F;lib&quot;
        &quot;-L ${pkgs.openal}&#x2F;lib&quot;
    ];

    checkPhase = &quot;&quot;;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Once I complete the nix-ification of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mobile_nebula&lt;&#x2F;code&gt; I’ll submit a PR to the
nixpkgs upstream with this, so that others can have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gomobile&lt;&#x2F;code&gt; available as
well!&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Old Code, New Ideas</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-02-06T00:00:00+00:00</published>
    <updated>2021-02-06T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-old-code-new-ideas/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-old-code-new-ideas/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/02/06/old-code-new-ideas.html</id>
        <link href="https://blog.mediocregopher.com/2021/02/06/old-code-new-ideas.html"/>
        <title>Old Code, New Ideas</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-02-06T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-old-code-new-ideas/</id>
    <content type="html">
        &lt;p&gt;About 3 years ago I put a lot of effort into a set of golang packages called
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&quot;&gt;mediocre-go-lib&lt;&#x2F;a&gt;. The idea was to create a framework around
the ideas I had laid out in &lt;a href=&quot;&#x2F;2019&#x2F;08&#x2F;02&#x2F;program-structure-and-composability.html&quot;&gt;this blog post&lt;&#x2F;a&gt; around the
structure and composability of programs. What I found in using the framework was
that it was quite bulky, not fully thought out, and ultimately difficult for
anyone but me to use. So…. a typical framework then.&lt;&#x2F;p&gt;

&lt;p&gt;My ideas about program structure haven’t changed a ton since then, but my ideas
around the patterns which enable that structure have simplified dramatically
(see &lt;a href=&quot;&#x2F;2020&#x2F;11&#x2F;16&#x2F;component-oriented-programming.html&quot;&gt;my more recent post&lt;&#x2F;a&gt; for more on that). So in that
spirit I’ve decided to cut a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2&lt;&#x2F;code&gt; branch of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mediocre-go-lib&lt;&#x2F;code&gt; and start trimming
the fat.&lt;&#x2F;p&gt;

&lt;p&gt;This is going to be an exercise both in deleting old code (very fun) and
re-examining old code which I used to think was good but now know is bad (even
more fun), and I’ve been looking forward to it for some time.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;mcmp-mctx&quot;&gt;mcmp, mctx&lt;&#x2F;h2&gt;

&lt;p&gt;The two foundational pieces of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mediocre-go-lib&lt;&#x2F;code&gt; are the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mctx&lt;&#x2F;code&gt;
packages. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp&lt;&#x2F;code&gt; primarily deals with its &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mcmp#Component&quot;&gt;mcmp.Component&lt;&#x2F;a&gt; type,
which is a key&#x2F;value store which can be used by other packages to store and
retrieve component-level information. Each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp.Component&lt;&#x2F;code&gt; exists as a node in
a tree of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp.Component&lt;&#x2F;code&gt;s, and these form the structure of a program.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp.Component&lt;&#x2F;code&gt; is able to provide information about its place in that tree as
well (i.e. its path, parents, children, etc…).&lt;&#x2F;p&gt;

&lt;p&gt;If this sounds cumbersome and of questionable utility that’s because it is. It’s
also not even correct, because a component in a program exists in a DAG, not a
tree. Moreover, each component can keep track of whatever data it needs for
itself using typed fields on a struct. Pretty much all other packages in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mediocre-go-lib&lt;&#x2F;code&gt; depend on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp&lt;&#x2F;code&gt; to function, but they don’t &lt;em&gt;need&lt;&#x2F;em&gt; to, I just
designed it that way.&lt;&#x2F;p&gt;

&lt;p&gt;So my plan of attack is going to be to delete &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp&lt;&#x2F;code&gt; completely, and repair all
the other packages.&lt;&#x2F;p&gt;

&lt;p&gt;The other foundational piece of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mediocre-go-lib&lt;&#x2F;code&gt; is &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mctx&quot;&gt;mctx&lt;&#x2F;a&gt;. Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp&lt;&#x2F;code&gt;
dealt with arbitrary key&#x2F;value storage on the component level, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mctx&lt;&#x2F;code&gt; deals with
it on the contextual level, where each go-routine (i.e. thread) corresponds to a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context.Context&lt;&#x2F;code&gt;. The primary function of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mctx&lt;&#x2F;code&gt; is this one:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Annotate takes in one or more key&#x2F;value pairs (kvs&#x27; length must be even) and&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; returns a Context carrying them.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Annotate&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;kvs&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;&#x2F;span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;I’m inclined to keep this around for now because it will be useful for logging,
but there’s one change I’d like to make to it. In its current form the value of
every key&#x2F;value pair must already exist before being used to annotate the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context.Context&lt;&#x2F;code&gt;, but this can be cumbersome in cases where the data you’d want
to annotate is quite hefty to generate but also not necessarily going to be
used. I’d like to have the option to make annotating occur lazily.  For this I
add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Annotator&lt;&#x2F;code&gt; interface and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WithAnnotator&lt;&#x2F;code&gt; function which takes it as an
argument, as well as some internal refactoring to make it all work right:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Annotations is a set of key&#x2F;value pairs representing a set of annotations. It&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; implements the Annotator interface along with other useful post-processing&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; methods.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Annotations&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;{}]&lt;&#x2F;span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Annotator is a type which can add annotation data to an existing set of&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; annotations. The Annotate method should be expected to be called in a&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; non-thread-safe manner.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Annotator&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;Annotate&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Annotations&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; WithAnnotator takes in an Annotator and returns a Context which will produce&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; that Annotator&#x27;s annotations when the Annotations function is called. The&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Annotator will be not be evaluated until the first call to Annotations.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;WithAnnotator&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;annotator&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Annotator&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Annotator&lt;&#x2F;code&gt; is designed like it is for two reasons. The more obvious design,
where the method has no arguments and returns a map, would cause a memory
allocation on every invocation, which could be a drag for long chains of
contexts whose annotations are being evaluated frequently. The obvious design
also leaves open questions about whether the returned map can be modified by
whoever receives it. The design given here dodges these problems without any
obvious drawbacks.&lt;&#x2F;p&gt;

&lt;p&gt;The original implementation also had this unnecessary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Annotation&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Annotation describes the annotation of a key&#x2F;value pair made on a Context via&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; the Annotate call.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Annotation&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
       &lt;span class=&quot;n&quot;&gt;Key&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;I don’t know why this was ever needed, as an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Annotation&lt;&#x2F;code&gt; was never passed into
nor returned from any function. It was part of the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnnotationSet&lt;&#x2F;code&gt;, but
that could easily be refactored into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map[interface{}]interface{}&lt;&#x2F;code&gt; instead. So
I factored &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Annotation&lt;&#x2F;code&gt; out completely.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;mcfg-mrun&quot;&gt;mcfg, mrun&lt;&#x2F;h2&gt;

&lt;p&gt;The next package to tackle is &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mcfg&quot;&gt;mcfg&lt;&#x2F;a&gt;, which deals with configuration via
command line arguments and environment variables. The package is set up to use
the old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp.Component&lt;&#x2F;code&gt; type such that each component could declare its own
configuration parameters in the global configuration. In this way the
configuration would have a hierarchy of its own which matches the component
tree.&lt;&#x2F;p&gt;

&lt;p&gt;Given that I now think &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp.Component&lt;&#x2F;code&gt; isn’t the right course of action it
would be the natural step to take that aspect out of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcfg&lt;&#x2F;code&gt;, leaving only a
basic command-line and environment variable parser. There are many other basic
parsers of this sort out there, including &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mediocregopher&#x2F;flagconfig&quot;&gt;one&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mediocregopher&#x2F;lever&quot;&gt;two&lt;&#x2F;a&gt; I
wrote myself, and frankly I don’t think the world needs another. So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcfg&lt;&#x2F;code&gt; is
going away.&lt;&#x2F;p&gt;

&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mrun&quot;&gt;mrun&lt;&#x2F;a&gt; package is the corresponding package to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcfg&lt;&#x2F;code&gt;; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcfg&lt;&#x2F;code&gt;
dealt with configuration of components &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mrun&lt;&#x2F;code&gt; deals with the initialization and
shutdown of those same components. Like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcfg&lt;&#x2F;code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mrun&lt;&#x2F;code&gt; relies heavily on
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp.Component&lt;&#x2F;code&gt;, and doesn’t really have any function with that type gone. So
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mrun&lt;&#x2F;code&gt; is a gonner too.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;mlog&quot;&gt;mlog&lt;&#x2F;h2&gt;

&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mlog&quot;&gt;mlog&lt;&#x2F;a&gt; package is primarily concerned with, as you might guess,
logging.  While there are many useful logging packages out there none of them
integrate with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mctx&lt;&#x2F;code&gt;’s annotations, so it is useful to have a custom logging
package here. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlog&lt;&#x2F;code&gt; also has the nice property of not being extremely coupled
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp.Component&lt;&#x2F;code&gt; like other packages; it’s only necessary to delete a handful
of global functions which aren’t a direct part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlog.Logger&lt;&#x2F;code&gt; type in
order to free the package from that burden.&lt;&#x2F;p&gt;

&lt;p&gt;With that said, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlog.Logger&lt;&#x2F;code&gt; type could still use some work. It’s primary
pattern looks like this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Message describes a message to be logged.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;Level&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;Description&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;Contexts&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Info logs an InfoLevel message.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Logger&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;descr&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;ctxs&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;l&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;mkMsg&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;InfoLevel&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;descr&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;ctxs&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;The idea was that if the user has multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Contexts&lt;&#x2F;code&gt; in hand, each one possibly
having some relevant annotations, all of those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;&#x2F;code&gt;s’ annotations could be
merged together for the log entry.&lt;&#x2F;p&gt;

&lt;p&gt;Looking back it seems to me that the only thing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlog&lt;&#x2F;code&gt; should care about is the
annotations, and not &lt;em&gt;where&lt;&#x2F;em&gt; those annotations came from. So the new pattern
looks like this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Message describes a message to be logged.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;Context&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;Level&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;Description&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;
	&lt;span class=&quot;n&quot;&gt;Annotators&lt;&#x2F;span&gt;  &lt;span class=&quot;p&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Annotators&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Info logs a LevelInfo message.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Logger&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;descr&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;annotators&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;mctx&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Annotator&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;The annotations on the given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;&#x2F;code&gt; will be included, and then any further
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Annotator&lt;&#x2F;code&gt;s can be added on. This will leave room for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merr&lt;&#x2F;code&gt; later.&lt;&#x2F;p&gt;

&lt;p&gt;There’s some other warts in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlog.Logger&lt;&#x2F;code&gt; that should be dealt with as well,
including some extraneous methods which were only used due to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp.Component&lt;&#x2F;code&gt;,
some poorly named types, a message handler which didn’t properly clean itself
up, and making &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NewLogger&lt;&#x2F;code&gt; take in parameters with which it can be customized as
needed (previously it only allowed for a single configuration). I’ve also
extended &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Message&lt;&#x2F;code&gt; to include a timestamp, a namespace field, and some other
useful information.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;future-work&quot;&gt;Future Work&lt;&#x2F;h2&gt;

&lt;p&gt;I’ve run out of time for today, but future work on this package includes:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;Updating &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;merr&quot;&gt;merr&lt;&#x2F;a&gt; with support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mctx.Annotations&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
  &lt;li&gt;Auditing the &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mnet&quot;&gt;mnet&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mhttp&quot;&gt;mhttp&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mrpc&quot;&gt;mrpc&lt;&#x2F;a&gt; packages to see if
they contain anything worth keeping.&lt;&#x2F;li&gt;
  &lt;li&gt;Probably deleting the &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;m&quot;&gt;m&lt;&#x2F;a&gt; package entirely; I don’t even really remember
what it does.&lt;&#x2F;li&gt;
  &lt;li&gt;Probably deleting the &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mdb&quot;&gt;mdb&lt;&#x2F;a&gt; package entirely; it only makes sense in the
context of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp.Component&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
  &lt;li&gt;Making a difficult decision about &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mtest&quot;&gt;mtest&lt;&#x2F;a&gt;; I put a lot of work into it,
but is it really any better than &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stretchr&#x2F;testify&quot;&gt;testify&lt;&#x2F;a&gt;?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Goodbye, bit rot</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2021-02-01T00:00:00+00:00</published>
    <updated>2021-02-01T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-goodbye-bit-rot/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-goodbye-bit-rot/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/goodbye-bit-rot/</id>
        <link href="https://marcopolo.io/code/goodbye-bit-rot/"/>
        <title>Goodbye, bit rot</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2021-02-01T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-goodbye-bit-rot/</id>
    <content type="html">
        &lt;p&gt;Take a look at this picture:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;marcopolo.io&#x2F;code&#x2F;goodbye-bit-rot&#x2F;smalltalk-76.png&quot; alt=&quot;Smalltalk 76&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s a photo of Smalltalk 76 running the prototypical desktop UI. It&#x27;s
taken for granted that this photo will be viewable for the indefinite future
(or as long as we keep a PNG viewer around). But when we think about code,
maybe the very same Smalltalk code we took this photo of, it&#x27;s assumed that
eventually that code will stop running. It&#x27;ll stop working because of a
mysterious force known as &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Software_rot&quot;&gt;bit
rot&lt;&#x2F;a&gt;. Why? It&#x27;s this truly
inevitable? Or can we do better?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;we-can-do-better&quot;&gt;We can do better&lt;&#x2F;h2&gt;
&lt;p&gt;Bit rot often manifests in the case where some software &lt;em&gt;A&lt;&#x2F;em&gt; relies on a certain
configured environment. Imagine &lt;em&gt;A&lt;&#x2F;em&gt; relies on a shared library &lt;em&gt;B&lt;&#x2F;em&gt;. As time
progresses, the shared library &lt;em&gt;B&lt;&#x2F;em&gt; can (and probably will) be updated
independently of &lt;em&gt;A&lt;&#x2F;em&gt;. Thus breaking &lt;em&gt;A&lt;&#x2F;em&gt;. But what if &lt;em&gt;A&lt;&#x2F;em&gt; could say it
explicitly depends on version &lt;em&gt;X.Y.Z&lt;&#x2F;em&gt; of &lt;em&gt;B&lt;&#x2F;em&gt;, or even better yet, the version
of the library that hashes to the value &lt;code&gt;0xBADCOFFEE&lt;&#x2F;code&gt;. Then you break the
implicit dependency of a correctly configured environment. &lt;em&gt;A&lt;&#x2F;em&gt; stops
depending on the world being in a certain state. Instead, &lt;em&gt;A&lt;&#x2F;em&gt;
&lt;em&gt;explicitly defines&lt;&#x2F;em&gt; what the world it needs should look like.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enter-nix&quot;&gt;Enter Nix&lt;&#x2F;h2&gt;
&lt;p&gt;This is what &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;&quot;&gt;Nix&lt;&#x2F;a&gt; gives you. A way to explicitly define
what a piece of software needs to build and run. Here&#x27;s an example of the
definition on how to build the &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;hello&#x2F;&quot;&gt;GNU
Hello&lt;&#x2F;a&gt; program:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;nixpkgs&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{});
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;derivation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;bash&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;builder.sh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;buildInputs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gnutar gzip gnumake gcc binutils-unwrapped coreutils gawk gnused gnugrep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;hello-2.10.tar.gz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;system &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;builtins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentSystem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s not necessary to explain this &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;guides&#x2F;nix-pills&#x2F;generic-builders.html#idm140737320275008&quot;&gt;code in
detail&lt;&#x2F;a&gt;.
It&#x27;s enough to point out that &lt;code&gt;buildInputs&lt;&#x2F;code&gt; defines what the environment should
contain (i.e. it should contain &lt;code&gt;gnutar&lt;&#x2F;code&gt;, &lt;code&gt;gzip&lt;&#x2F;code&gt;, &lt;code&gt;gnumake&lt;&#x2F;code&gt;, etc.). And the
versions of these dependencies are defined by the current version of
&lt;code&gt;&amp;lt;nixpkgs&amp;gt;&lt;&#x2F;code&gt;. These dependencies can be further pinned (or &lt;em&gt;locked&lt;&#x2F;em&gt; in the
terminology of some languages like Javascript and Rust) to ensure that this
program will always be built with the same exact versions of its dependencies.
This extends to the runtime as well. This means you can run two different
programs that each rely on a different &lt;code&gt;glibc&lt;&#x2F;code&gt;. Or to bring it back to our
initial example, software &lt;em&gt;A&lt;&#x2F;em&gt; will always run because it will always use the
same exact shared library &lt;em&gt;B&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-concrete-example-this-will-never-bit-rot&quot;&gt;A concrete example. This will never bit rot.&lt;&#x2F;h2&gt;
&lt;p&gt;To continue our Smalltalk theme, here&#x27;s a &amp;quot;Hello World&amp;quot; program that, barring a
fundamental change in how Nix Flakes works, will work forever&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; on an x86_64
linux machine.&lt;&#x2F;p&gt;
&lt;p&gt;The definition of our program, &lt;code&gt;flake.nix&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github:NixOS&#x2F;nixpkgs&#x2F;nixos-20.09&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;self, nixpkgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;pkgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;legacyPackages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x86_64-linux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;defaultPackage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x86_64-linux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeScriptBin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello-smalltalk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &amp;#39;&amp;#39;
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;gnu-smalltalk&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;gst &amp;lt;&amp;lt;&amp;lt; &amp;quot;Transcript show: &amp;#39;Hello World!&amp;#39;.&amp;quot;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&amp;#39;;
    }&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The pinned version of all our dependencies, &lt;code&gt;flake.lock&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nodes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: {
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: {
      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;locked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: {
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lastModified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1606669556&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;narHash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256-9rlqZ5JwnA6nK04vKhV0s5ndepnWL5hpkaTV1b4ASvk=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;owner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NixOS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;repo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ae47c79479a086e96e2977c61e538881913c0c08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
      },
      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;original&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: {
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;owner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NixOS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nixos-20.09&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;repo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
      }
    },
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: {
      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: {
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
      }
    }
  },
  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;copy those files into a directory and run it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;❯&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; nix run
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; World!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;solid-foundations&quot;&gt;Solid Foundations&lt;&#x2F;h2&gt;
&lt;p&gt;With Nix, we can make steady forward progress. Without fear that our foundations
will collapse under us like sand castles. Once we&#x27;ve built something in Nix we
can be pretty sure it will work for our colleague or ourselves in 10 years. Nix
is building a solid foundation that I can no longer live without.&lt;&#x2F;p&gt;
&lt;p&gt;If you haven&#x27;t used Nix before, here&#x27;s your call to action:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Nix&#x27;s homepage: &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;&quot;&gt;https:&#x2F;&#x2F;nixos.org&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Nix&#x27;s Learning page: &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;learn&quot;&gt;https:&#x2F;&#x2F;nixos.org&#x2F;learn&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Learn Nix in little bite-sized pills: &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;guides&#x2F;nix-pills&#x2F;&quot;&gt;https:&#x2F;&#x2F;nixos.org&#x2F;guides&#x2F;nix-pills&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;&#x2F;h2&gt;
&lt;p&gt;There are various factors that lead to bit rot. Some are easier to solve than
others. For the purpose of this post I&#x27;m only considering programs that are
roughly self contained. For example, if a program relies on hitting a specific
Google endpoint, the only way to use this program would be to emulate the whole
Google stack or rely on that &lt;a href=&quot;https:&#x2F;&#x2F;gcemetery.co&#x2F;&quot;&gt;endpoint existing&lt;&#x2F;a&gt;.
Sometimes it&#x27;s doable to emulate the external API, and sometimes it isn&#x27;t. This
post is specifically about cases where it is feasible to emulate the external API.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h3&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Okay forever is a really long time. And this will likely not run forever. But why? The easy reasons are: &amp;quot;Github is down&amp;quot;, &amp;quot;A source tarball you need can&#x27;t be fetched from the internet&amp;quot;, &amp;quot;x86_64 processors can&#x27;t be found or emulated&amp;quot;. But what&#x27;s a weird reason that this may fail in the future? It&#x27;ll probably be hard to predict, but maybe something like: SHA256 has been broken and criminals and&#x2F;or pranksters have published malicious packages that match a certain SHA256. So build tools that rely on a deterministic and hard to break hash algorithm like SHA256 (like what Nix does) will no longer be reliable. That would be a funny future. Send me your weird reasons: &lt;code&gt;&amp;quot;marco+forever&amp;quot; ++ &amp;quot;@marcopolo.io&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Building Mobile Nebula</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-01-30T00:00:00+00:00</published>
    <updated>2021-01-30T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-building-mobile-nebula/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-building-mobile-nebula/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/01/30/building-mobile-nebula.html</id>
        <link href="https://blog.mediocregopher.com/2021/01/30/building-mobile-nebula.html"/>
        <title>Building Mobile Nebula</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-01-30T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-building-mobile-nebula/</id>
    <content type="html">
        &lt;p&gt;This post is going to be cheating a bit. I want to start working on adding DNS
resolver configuration to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DefinedNet&#x2F;mobile_nebula&quot;&gt;mobile nebula&lt;&#x2F;a&gt; app (if you don’t
know nebula, &lt;a href=&quot;https:&#x2F;&#x2F;slack.engineering&#x2F;introducing-nebula-the-open-source-global-overlay-network-from-slack&#x2F;&quot;&gt;check it out&lt;&#x2F;a&gt;, it’s well worth knowing about), but I also
need to write a blog post for this week, so I’m combining the two exercises.
This post will essentially be my notes from my progress on today’s task.&lt;&#x2F;p&gt;

&lt;p&gt;(Protip: listen to &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;SMJ7pxqk5d4?t=220&quot;&gt;this&lt;&#x2F;a&gt; while following along to achieve the proper
open-source programming aesthetic.)&lt;&#x2F;p&gt;

&lt;p&gt;The current mobile nebula app works very well, but it is lacking one major
feature: the ability to specify custom DNS resolvers. This is important because
I want to be able to access resources on my nebula network by their hostname,
not their IP. Android does everything in its power to make DNS configuration
impossible, and essentially the only way to actually accomplish this is by
specifying the DNS resolvers within the app. I go into more details about why
Android is broken &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DefinedNet&#x2F;mobile_nebula&#x2F;issues&#x2F;9&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;&#x2F;h2&gt;

&lt;p&gt;Before I can make changes to the app I need to make sure I can correctly build
it in the first place, so that’s the major task for today. The first step to
doing so is to install the project’s dependencies. As described in the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DefinedNet&#x2F;mobile_nebula&quot;&gt;mobile_nebula&lt;&#x2F;a&gt; README, the dependencies are:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;flutter.dev&#x2F;docs&#x2F;get-started&#x2F;install&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;godoc.org&#x2F;golang.org&#x2F;x&#x2F;mobile&#x2F;cmd&#x2F;gomobile&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gomobile&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;studio&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android-studio&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;studio&#x2F;projects&#x2F;install-ndk&quot;&gt;Enable NDK&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;It should be noted that as of writing I haven’t used any of these tools ever,
and have only done a small amount of android programming, probably 7 or 8 years
ago, so I’m going to have to walk the line between figuring out problems on the
fly and not having to completely learning these entire ecosystems; there’s only
so many hours in a weekend, after all.&lt;&#x2F;p&gt;

&lt;p&gt;I’m running &lt;a href=&quot;https:&#x2F;&#x2F;archlinux.org&#x2F;&quot;&gt;Archlinux&lt;&#x2F;a&gt; so I install android-studio and flutter by
doing:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay &lt;span class=&quot;nt&quot;&gt;-Sy&lt;&#x2F;span&gt; android-studio flutter
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;And I install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gomobile&lt;&#x2F;code&gt;, according to its &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;golang.org&#x2F;x&#x2F;mobile&#x2F;cmd&#x2F;gomobile&quot;&gt;documentation&lt;&#x2F;a&gt; via:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go get golang.org&#x2F;x&#x2F;mobile&#x2F;cmd&#x2F;gomobile
gomobile init
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Now I startup android-studio and go through the setup wizard for it. I choose
standard setup because customized setup doesn’t actually offer any interesting
options. Next android-studio spends approximately two lifetimes downloading
dependencies while my eyesight goes blurry because I’m drinking my coffee too
fast.&lt;&#x2F;p&gt;

&lt;p&gt;It’s annoying that I need to install these dependencies, especially
android-studio, in order to build this project. A future goal of mine is to nix
this whole thing up, and make a build pipeline where you can provide a full
nebula configuration file and it outputs a custom APK file for that specific
config; zero configuration required at runtime. This will be useful for
lazy&#x2F;non-technical users who want to be part of the nebula network.&lt;&#x2F;p&gt;

&lt;p&gt;Once android-studio starts up I’m not quite done yet: there’s still the NDK
which must be enabled. The instructions given by the link in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DefinedNet&#x2F;mobile_nebula&quot;&gt;mobile_nebula&lt;&#x2F;a&gt;’s README explain doing this pretty well, but it’s
important to install the specific version indicated in the mobile_nebula repo
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;21.0.6113669&lt;&#x2F;code&gt; at time of writing). Only another 1GB of dependency downloading
to go….&lt;&#x2F;p&gt;

&lt;p&gt;While waiting for the NDK to download I run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter doctor&lt;&#x2F;code&gt; to make sure
flutter is working, and it gives me some permissions errors. &lt;a href=&quot;https:&#x2F;&#x2F;www.rockyourcode.com&#x2F;how-to-get-flutter-and-android-working-on-arch-linux&#x2F;&quot;&gt;This blog
post&lt;&#x2F;a&gt; gives some tips on setting up, and after running the
following…&lt;&#x2F;p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;&#x2F;span&gt;groupadd flutterusers
&lt;span class=&quot;nb&quot;&gt;sudo &lt;&#x2F;span&gt;gpasswd &lt;span class=&quot;nt&quot;&gt;-a&lt;&#x2F;span&gt; &lt;span class=&quot;nv&quot;&gt;$USER&lt;&#x2F;span&gt; flutterusers
&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;&#x2F;span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;&#x2F;span&gt; :flutterusers &#x2F;opt&#x2F;flutter
&lt;span class=&quot;nb&quot;&gt;sudo chmod&lt;&#x2F;span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;&#x2F;span&gt; g+w &#x2F;opt&#x2F;flutter&#x2F;
newgrp flutterusers
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;… I’m able to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter doctor&lt;&#x2F;code&gt;. It gives the following output:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[✓] Flutter (Channel stable, 1.22.6, on Linux, locale en_US.UTF-8)
 
[!] Android toolchain - develop for Android devices (Android SDK version 30.0.3)
    ✗ Android licenses not accepted.  To resolve this, run: flutter doctor --android-licenses
[!] Android Studio
    ✗ Flutter plugin not installed; this adds Flutter specific functionality.
    ✗ Dart plugin not installed; this adds Dart specific functionality.
[!] Connected device
    ! No devices available

! Doctor found issues in 3 categories.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;The first issue is easily solved as per the instructions given. The second is
solved by finding the plugin manager in android-studio and installing the
flutter plugin (which installs the dart plugin as a dependency, we call that a
twofer).&lt;&#x2F;p&gt;

&lt;p&gt;After installing the plugin the doctor command still complains about not finding
the plugins, but the above mentioned blog post indicates to me that this is
expected. It’s comforting to know that the problems indicated by the doctor may
or may not be real problems.&lt;&#x2F;p&gt;

&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;www.rockyourcode.com&#x2F;how-to-get-flutter-and-android-working-on-arch-linux&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; also indicates that I need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openjdk-8&lt;&#x2F;code&gt; installed,
so I do:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay &lt;span class=&quot;nt&quot;&gt;-S&lt;&#x2F;span&gt; jdk8-openjdk
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;And use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archlinux-java&lt;&#x2F;code&gt; command to confirm that that is indeed the default
version for my shell. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DefinedNet&#x2F;mobile_nebula&quot;&gt;mobile_nebula&lt;&#x2F;a&gt; helpfully expects an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env.sh&lt;&#x2F;code&gt; file to exist in the root, so if openjdk-8 wasn’t already the default I
could make it so within that file.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;build&quot;&gt;Build&lt;&#x2F;h2&gt;

&lt;p&gt;At this point I think I’m ready to try actually building an APK. Thoughts and
prayers required. I run the following in a terminal, since for some reason the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build &amp;gt; Flutter &amp;gt; Build APK&lt;&#x2F;code&gt; dropdown button in android-studio did nothing.&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter build apk
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;It takes quite a while to run, but in the end it errors with:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make: &#x27;mobileNebula.aar&#x27; is up to date.
cp: cannot create regular file &#x27;..&#x2F;android&#x2F;app&#x2F;src&#x2F;main&#x2F;libs&#x2F;mobileNebula.aar&#x27;: No such file or directory

FAILURE: Build failed with an exception.

* Where:
Build file &#x27;&#x2F;tmp&#x2F;src&#x2F;mobile_nebula&#x2F;android&#x2F;app&#x2F;build.gradle&#x27; line: 95

* What went wrong:
A problem occurred evaluating project &#x27;:app&#x27;.
&amp;gt; Process &#x27;command &#x27;.&#x2F;gen-artifacts.sh&#x27;&#x27; finished with non-zero exit value 1

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https:&#x2F;&#x2F;help.gradle.org

BUILD FAILED in 1s
Running Gradle task &#x27;bundleRelease&#x27;...
Running Gradle task &#x27;bundleRelease&#x27;... Done                         1.7s
Gradle task bundleRelease failed with exit code 1
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;I narrow down the problem to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&#x2F;gen-artifacts.sh&lt;&#x2F;code&gt; script in the repo’s root,
which takes in either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android&lt;&#x2F;code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ios&lt;&#x2F;code&gt; as an argument. Running it directly
as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&#x2F;gen-artifacts.sh android&lt;&#x2F;code&gt; results in the same error:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make: &lt;span class=&quot;s1&quot;&gt;&#x27;mobileNebula.aar&#x27;&lt;&#x2F;span&gt; is up to date.
&lt;span class=&quot;nb&quot;&gt;cp&lt;&#x2F;span&gt;: cannot create regular file &lt;span class=&quot;s1&quot;&gt;&#x27;..&#x2F;android&#x2F;app&#x2F;src&#x2F;main&#x2F;libs&#x2F;mobileNebula.aar&#x27;&lt;&#x2F;span&gt;: No such file or directory
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;So now I gotta figure out wtf that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mobileNebula.aar&lt;&#x2F;code&gt; file is. The first thing I
note is that not only is that file not there, but the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libs&lt;&#x2F;code&gt; directory it’s
supposed to be present in is also not there. So I suspect that there’s a missing
build step somewhere.&lt;&#x2F;p&gt;

&lt;p&gt;I search for the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mobileNebula.aar&lt;&#x2F;code&gt; within the project using
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ggreer&#x2F;the_silver_searcher&quot;&gt;ag&lt;&#x2F;a&gt; and find that it’s built by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nebula&#x2F;Makefile&lt;&#x2F;code&gt; as follows:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;mobileNebula.aar&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;nf&quot;&gt;*.go&lt;&#x2F;span&gt;
	gomobile &lt;span class=&quot;nb&quot;&gt;bind&lt;&#x2F;span&gt; &lt;span class=&quot;nt&quot;&gt;-trimpath&lt;&#x2F;span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;&#x2F;span&gt; &lt;span class=&quot;nt&quot;&gt;--target&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;&#x2F;span&gt;android
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;So that file is made by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gomobile&lt;&#x2F;code&gt;, good to know! Additionally the file is
actually there in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nebula&lt;&#x2F;code&gt; directory, so I suspect there’s just a missing
build step to move it into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android&#x2F;app&#x2F;src&#x2F;main&#x2F;libs&lt;&#x2F;code&gt;. Via some more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ag&lt;&#x2F;code&gt;-ing I
find that the code which is supposed to move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mobileNebula.aar&lt;&#x2F;code&gt; file is in
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gen-artifacts.sh&lt;&#x2F;code&gt; script, but that script doesn’t create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libs&lt;&#x2F;code&gt; folder
as it ought to. I apply the following diff:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;diff &lt;span class=&quot;nt&quot;&gt;--git&lt;&#x2F;span&gt; a&#x2F;gen-artifacts.sh b&#x2F;gen-artifacts.sh
index 601ed7b..4f73b4c 100755
&lt;span class=&quot;nt&quot;&gt;---&lt;&#x2F;span&gt; a&#x2F;gen-artifacts.sh
+++ b&#x2F;gen-artifacts.sh
@@ &lt;span class=&quot;nt&quot;&gt;-16&lt;&#x2F;span&gt;,7 +16,7 @@ &lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;&#x2F;span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;&#x2F;span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ios&quot;&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;then
 elif&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;&#x2F;span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;&#x2F;span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;android&quot;&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;&#x2F;span&gt;
   &lt;span class=&quot;c&quot;&gt;# Build nebula for android&lt;&#x2F;span&gt;
   make mobileNebula.aar
-  &lt;span class=&quot;nb&quot;&gt;rm&lt;&#x2F;span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;&#x2F;span&gt; ..&#x2F;android&#x2F;app&#x2F;src&#x2F;main&#x2F;libs&#x2F;mobileNebula.aar
+  &lt;span class=&quot;nb&quot;&gt;mkdir&lt;&#x2F;span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;&#x2F;span&gt; ..&#x2F;android&#x2F;app&#x2F;src&#x2F;main&#x2F;libs
   &lt;span class=&quot;nb&quot;&gt;cp &lt;&#x2F;span&gt;mobileNebula.aar ..&#x2F;android&#x2F;app&#x2F;src&#x2F;main&#x2F;libs&#x2F;mobileNebula.aar

 &lt;span class=&quot;k&quot;&gt;else&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;(The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm -rf&lt;&#x2F;code&gt; isn’t necessary, since a) that file is about to be overwritten by
the subsequent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp&lt;&#x2F;code&gt; whether or not it’s there, and b) it’s just deleting a
single file so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-rf&lt;&#x2F;code&gt; is an unnecessary risk).&lt;&#x2F;p&gt;

&lt;p&gt;At this point I re-run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter build apk&lt;&#x2F;code&gt; and receive a new error. Progress!&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A problem occurred evaluating root project &#x27;android&#x27;.
&amp;gt; A problem occurred configuring project &#x27;:app&#x27;.
   &amp;gt; Removing unused resources requires unused code shrinking to be turned on. See http:&#x2F;&#x2F;d.android.com&#x2F;r&#x2F;tools&#x2F;shrink-resources.html for more information.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;I recall that in the original &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DefinedNet&#x2F;mobile_nebula&quot;&gt;mobile_nebula&lt;&#x2F;a&gt; README it mentions
to run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter build&lt;&#x2F;code&gt; command with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--no-shrink&lt;&#x2F;code&gt; option, so I try:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter build apk &lt;span class=&quot;nt&quot;&gt;--no-shrink&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Finally we really get somewhere. The command takes a very long time to run as it
downloads yet more dependencies (mostly android SDK stuff from the looks of it),
but unfortunately still errors out:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Execution failed for task &#x27;:app:processReleaseResources&#x27;.
&amp;gt; Could not resolve all files for configuration &#x27;:app:releaseRuntimeClasspath&#x27;.
   &amp;gt; Failed to transform mobileNebula-.aar (:mobileNebula:) to match attributes {artifactType=android-compiled-dependencies-resources, org.gradle.status=integration}.
      &amp;gt; Execution failed for AarResourcesCompilerTransform: &#x2F;home&#x2F;mediocregopher&#x2F;.gradle&#x2F;caches&#x2F;transforms-2&#x2F;files-2.1&#x2F;735fc805916d942f5311063c106e7363&#x2F;jetified-mobileNebula.
         &amp;gt; &#x2F;home&#x2F;mediocregopher&#x2F;.gradle&#x2F;caches&#x2F;transforms-2&#x2F;files-2.1&#x2F;735fc805916d942f5311063c106e7363&#x2F;jetified-mobileNebula&#x2F;AndroidManifest.xml
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Time for more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ag&lt;&#x2F;code&gt;-ing. I find the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android&#x2F;app&#x2F;build.gradle&lt;&#x2F;code&gt;, which has
the following block:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    implementation (name:&#x27;mobileNebula&#x27;, ext:&#x27;aar&#x27;) {
        exec {
            workingDir &#x27;..&#x2F;..&#x2F;&#x27;
            environment(&quot;ANDROID_NDK_HOME&quot;, android.ndkDirectory)
            environment(&quot;ANDROID_HOME&quot;, android.sdkDirectory)
            commandLine &#x27;.&#x2F;gen-artifacts.sh&#x27;, &#x27;android&#x27;
        }
    }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;I never set up the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANDROID_HOME&lt;&#x2F;code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANDROID_NDK_HOME&lt;&#x2F;code&gt; environment variables,
and I suppose that if I’m running the flutter command outside of android-studio
there wouldn’t be a way for flutter to know those values, so I try setting them
within my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env.sh&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;&#x2F;span&gt;&lt;span class=&quot;nv&quot;&gt;ANDROID_HOME&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;&#x2F;span&gt;~&#x2F;Android&#x2F;Sdk
&lt;span class=&quot;nb&quot;&gt;export &lt;&#x2F;span&gt;&lt;span class=&quot;nv&quot;&gt;ANDROID_NDK_HOME&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;&#x2F;span&gt;~&#x2F;Android&#x2F;Sdk&#x2F;ndk&#x2F;21.0.6113669
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Re-running the build command still results in the same error. But it occurs to
me that I probably had built the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mobileNebula.aar&lt;&#x2F;code&gt; without those set
previously, so maybe it was built with the wrong NDK version or something. I
tried deleting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nebula&#x2F;mobileNebula.aar&lt;&#x2F;code&gt; and try building again. This time…
new errors! Lots of them! Big ones and small ones!&lt;&#x2F;p&gt;

&lt;p&gt;At this point I’m a bit fed up, and want to try a completely fresh build. I back
up my modified &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env.sh&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gen-artifacts.sh&lt;&#x2F;code&gt; files, delete the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mobile_nebula&lt;&#x2F;code&gt;
repo, re-clone it, reinstall those files, and try building again. This time just
a single error:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Execution failed for task &#x27;:app:lintVitalRelease&#x27;.
&amp;gt; Could not resolve all artifacts for configuration &#x27;:app:debugRuntimeClasspath&#x27;.
   &amp;gt; Failed to transform libs.jar to match attributes {artifactType=processed-jar, org.gradle.libraryelements=jar, org.gradle.usage=java-runtime}.
      &amp;gt; Execution failed for JetifyTransform: &#x2F;tmp&#x2F;src&#x2F;mobile_nebula&#x2F;build&#x2F;app&#x2F;intermediates&#x2F;flutter&#x2F;debug&#x2F;libs.jar.
         &amp;gt; Failed to transform &#x27;&#x2F;tmp&#x2F;src&#x2F;mobile_nebula&#x2F;build&#x2F;app&#x2F;intermediates&#x2F;flutter&#x2F;debug&#x2F;libs.jar&#x27; using Jetifier. Reason: FileNotFoundException, message: &#x2F;tmp&#x2F;src&#x2F;mobile_nebula&#x2F;build&#x2F;app&#x2F;intermediates&#x2F;flutter&#x2F;debug&#x2F;libs.jar (No such file or directory). (Run with --stacktrace for more details.)
           Please file a bug at http:&#x2F;&#x2F;issuetracker.google.com&#x2F;issues&#x2F;new?component=460323.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;So that’s cool, apparently there’s a bug with flutter and I should file a
support ticket? Well, probably not. It seems that while
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&#x2F;app&#x2F;intermediates&#x2F;flutter&#x2F;debug&#x2F;libs.jar&lt;&#x2F;code&gt; indeed doesn’t exist in the
repo, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&#x2F;app&#x2F;intermediates&#x2F;flutter&#x2F;release&#x2F;libs.jar&lt;&#x2F;code&gt; &lt;em&gt;does&lt;&#x2F;em&gt;, so this appears
to possibly be an issue in declaring which build environment is being used.&lt;&#x2F;p&gt;

&lt;p&gt;After some googling I found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flutter&#x2F;flutter&#x2F;issues&#x2F;58247&quot;&gt;this flutter issue&lt;&#x2F;a&gt; related to the
error. Tldr: gradle’s not playing nicely with flutter. Downgrading could help,
but apparently building with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--debug&lt;&#x2F;code&gt; flag also works. I don’t want to
build a release version anyway, so this sits fine with me. I run…&lt;&#x2F;p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter build apk &lt;span class=&quot;nt&quot;&gt;--no-shrink&lt;&#x2F;span&gt; &lt;span class=&quot;nt&quot;&gt;--debug&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;And would you look at that, I got a result!&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;✓ Built build&#x2F;app&#x2F;outputs&#x2F;flutter-apk&#x2F;app-debug.apk.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;&#x2F;h2&gt;

&lt;p&gt;Building was probably the hard part, but I’m not totally out of the woods yet.
Theoretically I could email this apk to my phone or something, but I’d like
something with a faster turnover time; I need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;p&gt;I install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb&lt;&#x2F;code&gt; via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android-tools&lt;&#x2F;code&gt; package:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay &lt;span class=&quot;nt&quot;&gt;-S&lt;&#x2F;span&gt; android-tools
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb&lt;&#x2F;code&gt; will work, however, I need to turn on USB debugging on my phone,
which I do by following &lt;a href=&quot;https:&#x2F;&#x2F;www.droidviews.com&#x2F;how-to-enable-developer-optionsusb-debugging-mode-on-devices-with-android-4-2-jelly-bean&#x2F;&quot;&gt;this article&lt;&#x2F;a&gt;. Once connected I confirm
that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb&lt;&#x2F;code&gt; can talk to my phone by doing:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb devices
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;And then, finally, I can install the apk:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb install build&#x2F;app&#x2F;outputs&#x2F;flutter-apk&#x2F;app-debug.apk
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;NOT SO FAST! MORE ERRORS!&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb: failed to install build&#x2F;app&#x2F;outputs&#x2F;flutter-apk&#x2F;app-debug.apk: Failure [INSTALL_FAILED_UPDATE_INCOMPATIBLE: Package net.defined.mobile_nebula signatures do not match previously installed version; ignoring!]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;I’m guessing this is because I already have the real nebula app installed. I
uninstall it and try again.&lt;&#x2F;p&gt;

&lt;p&gt;AND IT WORKS!!! FUCK YEAH!&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Performing Streamed Install
Success
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;I can open the nebula app on my phone and it works… fine. There’s some
pre-existing networks already installed, which isn’t the case for the Play Store
version as far as I can remember, so I suspect those are only there in the
debugging build. Unfortunately the presence of these test networks causes the
app the throw a bunch of errors because it can’t contact those networks. Oh well.&lt;&#x2F;p&gt;

&lt;p&gt;The presence of those test networks, in a way, is actually a good thing, as it
means there’s probably already a starting point for what I want to do: building
a per-device nebula app with a config preloaded into it.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;further-steps&quot;&gt;Further Steps&lt;&#x2F;h2&gt;

&lt;p&gt;Beyond continuing on towards my actual goal of adding DNS resolvers to this app,
there’s a couple of other paths I could potentially go down at this point.&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;As mentioned, nixify the whole thing. I’m 99% sure the android-studio GUI
isn’t actually needed at all, and I only used it for installing the CMake and
NDK plugins because I didn’t bother to look up how to do it on the CLI.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Figuring out how to do a proper release build would be great, just for my own
education. Based on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flutter&#x2F;flutter&#x2F;issues&#x2F;58247&quot;&gt;flutter issue&lt;&#x2F;a&gt; it’s possible that all
that’s needed is to downgrade gradle, but maybe that’s not so easy.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Get an android emulator working so that I don’t have to install to my phone
everytime I want to test the app out. I’m not sure if that will also work for
the VPN aspect of the app, but it will at least help me iterate on UI changes
faster.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;But at this point I’m done for the day, I’ll continue on this project some other
time.&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Goodbye, Github Pages</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-01-23T00:00:00+00:00</published>
    <updated>2021-01-23T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-goodbye-github-pages/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-goodbye-github-pages/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/01/23/goodbye-github-pages.html</id>
        <link href="https://blog.mediocregopher.com/2021/01/23/goodbye-github-pages.html"/>
        <title>Goodbye, Github Pages</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-01-23T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-goodbye-github-pages/</id>
    <content type="html">
        &lt;p&gt;Slowly but surely I’m working on moving my digital life back to being
self-hosted, and this blog was an easy low-hanging fruit to tackle. Previously
the blog was hosted on Github Pages, which was easy enough but also in many ways
restricting. By self-hosting I’m able to have a lot more control over the
generation, delivery, and functionality of the blog.&lt;&#x2F;p&gt;

&lt;p&gt;For reference you can find the source code for the blog at
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mediocregopher&#x2F;blog.mediocregopher.com&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;mediocregopher&#x2F;blog.mediocregopher.com&lt;&#x2F;a&gt;. Yes, it will one day be hosted
elsewhere as well.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;nix&quot;&gt;Nix&lt;&#x2F;h2&gt;

&lt;p&gt;Nix is something I’m slowly picking up, but the more I use it the more it grows
on me. Rather than littering my system with ruby versions and packages I’ll
never otherwise use, nix allows me to create a sandboxed build pipeline for the
blog with perfectly reproducible results.&lt;&#x2F;p&gt;

&lt;p&gt;The first step in this process is to take the blog’s existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;&#x2F;code&gt; and
turn it into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gemset.nix&lt;&#x2F;code&gt; file, which is essentially a translation of the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;&#x2F;code&gt; into a file nix can understand. There’s a tool called
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nix-community&#x2F;bundix&quot;&gt;bundix&lt;&#x2F;a&gt; which does this, and it can be used from a nix shell without
having to actually install anything:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; nix-shell -p bundix --run &#x27;bundix&#x27;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;The second step of using nix is to set up a nix expression in the file
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default.nix&lt;&#x2F;code&gt;. This will actually build the static files. As a bonus I made my
expression to also allow for serving the site locally with dynamic updating
everytime I change a source file. My &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default.nix&lt;&#x2F;code&gt; looks like this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    # pkgs refers to all &quot;builtin&quot; nix pkgs and utilities. By importing from a
    # URL I&#x27;m able to always pin this default.nix to a specific version of those
    # packages.
    pkgs ? import (fetchTarball &quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;archive&#x2F;cd63096d6d887d689543a0b97743d28995bc9bc3.tar.gz&quot;) {},
    system ? builtins.currentSystem,
}:

    let
        # bundlerEnv looks for a Gemfile, Gemfile.lock, and gemset.nix inside
        # gemdir, and derives a package containing ruby and all desired gems.
        ruby_env = pkgs.bundlerEnv {
            name = &quot;ruby_env&quot;;
            ruby = pkgs.ruby;
            gemdir = .&#x2F;.;
        };
    in
        {
            # build will derive a package which contains the generated static
            # files of the blog. It uses the build.sh file (provided below) to
            # do this.
            build = derivation {
                name = &quot;mediocre-blog&quot;;

                # The build.sh file (source provided below) is executed in order
                # to actually build the site.
                builder = &quot;${pkgs.bash}&#x2F;bin&#x2F;bash&quot;;
                args = [ .&#x2F;build.sh ];

                # ruby_env is provided as an input to build.sh so that it can
                # use jekyll, and the src directory is provided so it can access
                # the blog&#x27;s source files. system is required by the derivation
                # function, and stdenv provides standard utilities to build.sh.
                inherit ruby_env system;
                src = .&#x2F;src;
                stdenv = pkgs.stdenv;
            };

            # serve will derive an environment specifically tailored for being
            # run in a nix-shell. The resulting shell will have ruby_env
            # provided for it, and will automatically run the `jekyll serve`
            # command to serve the blog locally.
            serve = pkgs.stdenv.mkDerivation {
                name = &quot;mediocre-blog-shell&quot;;

                # glibcLocales is required so to fill in LC_ALL and other locale
                # related environment vars. Without those jekyll&#x27;s scss compiler
                # fails.
                #
                # TODO probably get rid of the scss compiler.
                buildInputs = [ ruby_env pkgs.glibcLocales ];

                shellHook = &#x27;&#x27;
                    exec ${ruby_env}&#x2F;bin&#x2F;jekyll serve -s .&#x2F;src -d .&#x2F;_site -w -I -D
                &#x27;&#x27;;
            };
        }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;(Nix is a bit tricky to learn, but I highly recommend chapters 14 and 15 of &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nix&#x2F;stable&#x2F;#chap-writing-nix-expressions&quot;&gt;the
nix manual&lt;&#x2F;a&gt; for an overview of the language itself, if nothing else.)&lt;&#x2F;p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.sh&lt;&#x2F;code&gt; used by the nix expression to actually generate the static files
looks like this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# stdenv was given a dependency to build.sh, and so build.sh can use it to&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;# source in utilities like mkdir, which it needs.&lt;&#x2F;span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;&#x2F;span&gt; &lt;span class=&quot;nv&quot;&gt;$stdenv&lt;&#x2F;span&gt;&#x2F;setup
&lt;span class=&quot;nb&quot;&gt;set&lt;&#x2F;span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;# Set up the output directory. nix provides the $out variable which will be the&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;# root of the derived package&#x27;s filesystem, but for simplicity later we want to&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;# output the site within &#x2F;var&#x2F;www.&lt;&#x2F;span&gt;
&lt;span class=&quot;nv&quot;&gt;d&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;nv&quot;&gt;$out&lt;&#x2F;span&gt;&lt;span class=&quot;s2&quot;&gt;&#x2F;var&#x2F;www&#x2F;blog.mediocregopher.com&quot;&lt;&#x2F;span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;&#x2F;span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;&#x2F;span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;nv&quot;&gt;$d&lt;&#x2F;span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;# Perform the jekyll build command. Like stdenv the ruby_env was given as a&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;# dependency to build.sh, so it has to explicitly use it to have access to&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;# jekyll. src is another explicit dependency which was given to build.sh, and&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;# contains all the actual source files within the src directory of the repo.&lt;&#x2F;span&gt;
&lt;span class=&quot;nv&quot;&gt;$ruby_env&lt;&#x2F;span&gt;&#x2F;bin&#x2F;jekyll build &lt;span class=&quot;nt&quot;&gt;-s&lt;&#x2F;span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;nv&quot;&gt;$src&lt;&#x2F;span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;&#x2F;span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;&#x2F;span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;nv&quot;&gt;$d&lt;&#x2F;span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;With these pieces in place I can easily regenerate the site like so:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nix-build -A build
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Once run the static files will exist within a symlink called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result&lt;&#x2F;code&gt; in the
project’s root. Within the symlink will be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&#x2F;www&#x2F;blog.mediocregopher.com&lt;&#x2F;code&gt;
tree of directories, and within that will be the generated static files, all
without ever having to have installed ruby.&lt;&#x2F;p&gt;

&lt;p&gt;The expression also allows me to serve the blog while I’m working on it. Doing
so looks like this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nix-shell -A serve
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;When run I get a normal jekyll process running in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;&#x2F;code&gt; directory, serving
the site in real-time on port 4000, once again all without ever installing ruby.&lt;&#x2F;p&gt;

&lt;p&gt;As a final touch I introduced a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Makefile&lt;&#x2F;code&gt; to my repo to wrap these
commands, because even these were too much for me to remember:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;result:
	nix-build -A build

install: result
	nix-env -i &quot;$$(readlink result)&quot;

clean:
	rm result
	rm -rf _site

serve:
	nix-shell -A serve

update:
	nix-shell -p bundler --run &#x27;bundler update; bundler lock; bundix; rm -rf .bundle vendor&#x27;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;We’ll look at that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install&lt;&#x2F;code&gt; target in the next section.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;nginx&quot;&gt;nginx&lt;&#x2F;h2&gt;

&lt;p&gt;So now I have the means to build my site quickly, reliably, and without
cluttering up the rest of my system. Time to actually serve the files.&lt;&#x2F;p&gt;

&lt;p&gt;My home server has a docker network which houses most of my services that I run,
including nginx. nginx’s primary job is to listen on ports 80 and 443, accept
HTTP requests, and direct those requests to their appropriate service based on
their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Host&lt;&#x2F;code&gt; header. nginx is also great at serving static content from disk, so
I’ll take advantage of that for the blog.&lt;&#x2F;p&gt;

&lt;p&gt;The one hitch is that nginx is currently running within a docker container,
as are all my other services. Ideally I would:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;Get rid of the nginx docker container.&lt;&#x2F;li&gt;
  &lt;li&gt;Build a nix package containing nginx, all my nginx config files, and the blog
files themselves.&lt;&#x2F;li&gt;
  &lt;li&gt;Run that directly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;Unfortunately extracting nginx from docker is dependent on doing so for all
other services as well, or at least on running all services on the host network,
which I’m not prepared to do yet. So for now I’ve done something janky.&lt;&#x2F;p&gt;

&lt;p&gt;If you look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Makefile&lt;&#x2F;code&gt; above you’ll notice the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install&lt;&#x2F;code&gt; target. What
that target does is to install the static blog files to my nix profile, which
exists at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME&#x2F;.nix-profile&lt;&#x2F;code&gt;. nix allows any package to be installed to a
profile in this way. All packages within a profile are independent and can be
added, updated, and removed atomically. By installing the built blog package to
my profile I make it available at
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME&#x2F;.nix-profile&#x2F;var&#x2F;www&#x2F;blog.mediocregopher.com&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;p&gt;So to serve those files via nginx all I need to do is add a read-only volume to
the container…&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-v $HOME&#x2F;.nix-profile&#x2F;var&#x2F;www&#x2F;blog.mediocregopher.com:&#x2F;var&#x2F;www&#x2F;blog.mediocregopher.com:ro \
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;…add a new virtual host to my nginx config…&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen       80;
    server_name  blog.mediocregopher.com;
    root         &#x2F;var&#x2F;www&#x2F;blog.mediocregopher.com;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;…and finally direct the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog&lt;&#x2F;code&gt; A record for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mediocregopher.com&lt;&#x2F;code&gt; to my home
server’s IP. Cloudflare will handle TLS on port 443 for me in this case, as well
as hide my home IP, which is prudent.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;deploying&quot;&gt;Deploying&lt;&#x2F;h2&gt;

&lt;p&gt;So now it’s time to publish this new post to the blog, what are the actual
steps? It’s as easy as:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make clean install
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;This will remove any existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result&lt;&#x2F;code&gt;, regenerate the site (with the new post)
under a new symlink, and install&#x2F;update that newer package to my nix profile,
overwriting the previous package which was there.&lt;&#x2F;p&gt;

&lt;p&gt;EDIT: apparently this isn’t quite true. Because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME&#x2F;.nix-profile&lt;&#x2F;code&gt; is a
symlink docker doesn’t handle the case of that symlink being updated correctly,
so I also have to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker restart nginx&lt;&#x2F;code&gt; for changes to be reflected in
nginx.&lt;&#x2F;p&gt;

&lt;p&gt;And that’s it! Nix is a cool tool that I’m still getting the hang of, but
hopefully this post might be useful to anyone else thinking of self-hosting
their site.&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>The Web</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-01-14T00:00:00+00:00</published>
    <updated>2021-01-14T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-the-web/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-the-web/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/01/14/the-web.html</id>
        <link href="https://blog.mediocregopher.com/2021/01/14/the-web.html"/>
        <title>The Web</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-01-14T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-the-web/</id>
    <content type="html">
        &lt;p&gt;With the recent crisis in the US’s democratic process, there’s been much abuzz
in the world about social media’s undoubted role in the whole debacle. The
extent to which the algorithms of Facebook, Twitter, Youtube, TikTok, etc, have
played a role in the radicalization of large segments of the world’s population
is one popular topic. Another is the tactics those same companies are now
employing to try and euthanize the monster they made so much ad money in
creating.&lt;&#x2F;p&gt;

&lt;p&gt;I don’t want to talk about any of that; there is more to the web than
social media. I want to talk about what the web could be, and to do that I want
to first talk about what it has been.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;web-10&quot;&gt;Web 1.0&lt;&#x2F;h2&gt;

&lt;p&gt;In the 1950’s computers were generally owned by large organizations like
companies, universities, and governments. They were used to compute and manage
large amounts of data, and each existed independently of the other.&lt;&#x2F;p&gt;

&lt;p&gt;In the 60’s protocols began to be developed which would allow them to
communicate over large distances, and thereby share resources (both
computational and informational).&lt;&#x2F;p&gt;

&lt;p&gt;The funding of ARPANET by the US DoD led to the initial versions of the TCP&#x2F;IP
protocol in the 70’s, still used today as the backbone of virtually all internet
communication. Email also came about from ARPANET around this time.&lt;&#x2F;p&gt;

&lt;p&gt;The 80s saw the growth of the internet across the world, as ARPANET gave way to
NSFNET. It was during this time that the domain name system we use today was
developed. At this point the internet use was still mostly for large
non-commercial organizations; there was little commercial footprint, and little
private access. The first commercially available ISP, which allowed access to
the internet from private homes via dialup, wasn’t launched until 1989.&lt;&#x2F;p&gt;

&lt;p&gt;And so we find ourselves in the year 1989, when Tim Berners-Lee (TBL) first
proposed the World-Wide Web (WWW, or “the web”). You can find the original
proposal, which is surprisingly short and non-technical,
&lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;Proposal.html&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;p&gt;From reading TBL’s proposal it’s clear that what he was after was some mechanism
for hosting information on his machine in such a way that others could find and
view it, without it needing to be explicitly sent to them. He includes the
following under the “Applications” header:&lt;&#x2F;p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The application of a universal hypertext system, once in place, will cover
many areas such as document registration, on-line help, project documentation,
news schemes and so on.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p&gt;But out of such a humble scope grew one of the most powerful forces of the 21st
century. By the end of 1990 TBL had written the first HTML&#x2F;HTTP browser and
server. By the end of 1994 sites like IMDB, Yahoo, and Bianca’s Smut Shack were
live and being accessed by consumers. The web grew that fast.&lt;&#x2F;p&gt;

&lt;p&gt;In my view the characteristic of the web which catalyzed its adoption so quickly
was the place-ness of it. The web is not just a protocol for transferring
information, like email, but instead is a &lt;em&gt;place&lt;&#x2F;em&gt; where that information lives.
Any one place could be freely linked to any other place, and so complex and
interesting relations could be formed between people and ideas. The
contributions people make on the web can reverberate farther than they would or
could in any other medium precisely because those contributions aren’t tied to
some one-off event or a deteriorating piece of physical infrastructure, but are
instead given a home which is both permanent and everywhere.&lt;&#x2F;p&gt;

&lt;p&gt;The other advantage of the web, at the time, was its simplicity. HTML was so
simple it was basically human-readable. A basic HTTP server could be implemented
as a hobby project by anyone in any language. Hosting your own website was a
relatively straightforward task which anyone with a computer and an ISP could
undertake.&lt;&#x2F;p&gt;

&lt;p&gt;This was the environment early adopters of the web found themselves in.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;web-20&quot;&gt;Web 2.0&lt;&#x2F;h2&gt;

&lt;p&gt;The infamous dot-com boom took place in 2001. I don’t believe this was a failure
inherent in the principles of the web itself, but instead was a product of
people investing in a technology they didn’t fully understand. The web, as it
was then, wasn’t really designed with money-making in mind. It certainly allowed
for it, but that wasn’t the use-case being addressed.&lt;&#x2F;p&gt;

&lt;p&gt;But of course, in this world we live in, if there’s money to be made, it will
certainly be made.&lt;&#x2F;p&gt;

&lt;p&gt;By 2003 the phrase “Web 2.0” started popping up. I remember this. To me “Web
2.0” meant a new aesthetic on the web, complete with bubble buttons and centered
fix-width paragraph boxes. But what “Web 2.0” actually signified wasn’t related
to any new technology or aesthetic. It was a new strategy for how companies
could enable use of the web by non-expert users, i.e. users who don’t have the
inclination or means to host their own website. Web 2.0 was a strategy for
giving everyone a &lt;em&gt;place&lt;&#x2F;em&gt; of their own on the web.&lt;&#x2F;p&gt;

&lt;p&gt;“Web 2.0” was merely a label given to a movement which had already been in
motion for years. I think the following Wikipedia excerpt describes this period
best:&lt;&#x2F;p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In 2004, the term [“Web 2.0”] began its rise in popularity when O’Reilly Media
and MediaLive hosted the first Web 2.0 conference. In their opening remarks,
John Battelle and Tim O’Reilly outlined their definition of the “Web as
Platform”, where software applications are built upon the Web as opposed to upon
the desktop. The unique aspect of this migration, they argued, is that
“customers are building your business for you”. They argued that the
activities of users generating content (in the form of ideas, text, videos, or
pictures) could be “harnessed” to create value.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;p&gt;In other words, Web 2.0 turned the place-ness of the web into a commodity.
Rather than expect everyone to host, or arrange for the hosting, of their own
corner of the web, the technologists would do it for them for “free”! This
coincided with the increasing complexity of the underlying technology of the
web; websites grew to be flashy, interactive, and stateful applications which
&lt;em&gt;did&lt;&#x2F;em&gt; things rather than be places which &lt;em&gt;held&lt;&#x2F;em&gt; things. The idea of a hyperlink,
upon which the success of the web had been founded, became merely an
implementation detail.&lt;&#x2F;p&gt;

&lt;p&gt;And so the walled gardens began to be built. Myspace was founded in 2003,
Facebook opened to the public in 2006, Digg (the precursor to reddit) was
launched in 2004, Flickr launched in 2004 (and was bought by Yahoo in 2005),
Google bought Blogger in 2003, and Twitter launched in 2006. In effect this
period both opened the web up to everyone and established the way we still use
it today.&lt;&#x2F;p&gt;

&lt;p&gt;It’s upon these foundations that current events unfold. We have platforms whose
only incentive is towards capturing new users and holding their attention, to
the exclusion of other platforms, so they can be advertised to. Users are
enticed in because they are being offered a place on the web, a place of their
own to express themselves from, in order to find out the worth of their
expressions to the rest of the world. But they aren’t expressing to the world at
large, they are expressing to a social media platform, a business, and so only
the most lucrative of voices are heard.&lt;&#x2F;p&gt;

&lt;p&gt;So much for not wanting to talk about social media.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;web-30&quot;&gt;Web 3.0&lt;&#x2F;h2&gt;

&lt;p&gt;The new hot topic in crypto and hacker circles is “Web 3.0”, or the
decentralized web (dweb). The idea is that we can have all the good of the
current web (the accessibility, utility, permanency, etc) without all the bad
(the centralized platforms, censorship, advertising, etc). The way forward to
this utopian dream is by building decentralized applications (dApps).&lt;&#x2F;p&gt;

&lt;p&gt;dApps are constructed in a way where all the users of an application help to
host all the stateful content of that application. If I, as a user, post an
image to a dApp, the idea is that other users of that same dApp would lend their
meager computer resources to ensure my image is never forgotten, and in turn I
would lend mine for theirs.&lt;&#x2F;p&gt;

&lt;p&gt;In practice building successful dApps is enormously difficult for many reasons,
and really I’m not sure there &lt;em&gt;are&lt;&#x2F;em&gt; any successful ones (to date). While I
support the general sentiment behind them, I sometimes wonder about the
efficacy. What people want from the web is a place they can call their own, a
place from which they can express themselves and share their contributions with
others with all the speed and pervasiveness that the internet offers. A dApp is
just another walled garden with specific capabilities; it offers only free
hosting, not free expression.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;web-20b&quot;&gt;Web 2.0b&lt;&#x2F;h2&gt;

&lt;p&gt;I’m not here solely to complain (just mostly).&lt;&#x2F;p&gt;

&lt;p&gt;Thinking back to Web 1.0, and specifically to the turning point between 1.0 and
2.0, I’d like to propose that maybe we made a wrong turn. The issue at hand was
that hosting one’s own site was still too much of a technical burden, and the
direction we went was towards having businesses host them for us. Perhaps there
was another way.&lt;&#x2F;p&gt;

&lt;p&gt;What are the specific difficulties with hosting one’s own site? Here are the
ones I can think of:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bad tooling: basically none of the tools you’re required to use (web server,
TLS, DNS, your home router) are designed for the average person.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Aggregiously complex languages: making a site which looks half decent and can
do the things you want requires a &lt;em&gt;lot&lt;&#x2F;em&gt; of knowledge about the underlying
languages (CSS, HTML, Javascript, and whatever your server is written in).&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Single point-of-failure: if your machine is off, your site is down.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Security: it’s important to stay ahead of the hackers, but it takes time to
do so.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Hostile environment: this is separate from security, and includes difficulties
like dynamic home IPs and bad ISP policies (such as asymetric upload&#x2F;download
speeds).&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;These are each separate avenues of attack.&lt;&#x2F;p&gt;

&lt;p&gt;Bad tooling is a result of the fact that devs generally build technology for
themselves or their fellow devs, and only build for others when they’re being
paid to do it. This is merely an attitude problem.&lt;&#x2F;p&gt;

&lt;p&gt;Complex languages are really a sub-category of bad tooling. The concesus seems
to be that the average person isn’t interested or capable of working in
HTML&#x2F;CSS&#x2F;JS. This may be true today, but it wasn’t always. Most of my friends in
middle and high school were well within their interest and capability to create
the most heinous MySpace pages the world has ever seen, using nothing but CSS
generators and scraps of shitty JS they found lying around. So what changed? The
tools we use to build those pages did.&lt;&#x2F;p&gt;

&lt;p&gt;A hostile environment is not something any individual can do anything about, but
in the capitalist system we exist in we can at least hold in faith the idea that
eventually us customers will get what we want. It may take a long time, but all
monopolies break eventually, and someone will eventually sell us the internet
access we’re asking for. If all other pieces are in place I think we’ll have
enough people asking to make a difference.&lt;&#x2F;p&gt;

&lt;p&gt;For single point-of-failure we have to grant that more than one person will be
involved, since the vast majority of people aren’t going to be able to keep one
machine online consistently, let alone two or more machines. But I think we all
know at least one person who could keep a machine online with some reliability,
and they probably know a couple of other people who could do so as well. What
I’m proposing is that, rather than building tools for global decentralization,
we need tools for local decentralization, aka federation. We can make it
possible for a group of people to have their presence managed by a subset of
themselves. Those with the ability could help to host the online presence of
their family, friends, churches, etc, if given the right tools.&lt;&#x2F;p&gt;

&lt;p&gt;Security is the hard one, but also in many ways isn’t. What most people want
from the web is a place from which to express themselves. Expression doesn’t
take much more than a static page, usually, and there’s not much attacking one
can do against a static page. Additionally, we’ve already established that
there’s going to be at least a &lt;em&gt;couple&lt;&#x2F;em&gt; of technically minded people involved in
hosting this thing.&lt;&#x2F;p&gt;

&lt;p&gt;So that’s my idea that I’d like to build towards. First among these ideas is
that we need tools which can help people help each other host their content, and
on top of that foundation a new web can be built which values honest expression
rather than the lucrative madness which our current algorithms love so much.&lt;&#x2F;p&gt;

&lt;p&gt;This project was already somewhat started by
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Cryptorado-Community&#x2F;Cryptorado-Node&quot;&gt;Cryptorado&lt;&#x2F;a&gt; while I
was a regular attendee, but since COVID started my attendance has fallen off.
Hopefully one day it can resume. In the meantime I’m going to be working on
setting up these tools for myself, and see how far I can get.&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Ginger</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2021-01-09T00:00:00+00:00</published>
    <updated>2021-01-09T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-ginger/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-ginger/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2021/01/09/ginger.html</id>
        <link href="https://blog.mediocregopher.com/2021/01/09/ginger.html"/>
        <title>Ginger</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2021-01-09T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-ginger/</id>
    <content type="html">
        &lt;p&gt;This post is about a programming language that’s been bouncing around in my head
for a &lt;em&gt;long&lt;&#x2F;em&gt; time. I’ve tried to actually implement the language three or more
times now, but everytime I get stuck or run out of steam. It doesn’t help that
everytime I try again the form of the language changes significantly. But all
throughout the name of the language has always been “Ginger”. It’s a good name.&lt;&#x2F;p&gt;

&lt;p&gt;In the last few years the form of the language has somewhat solidified in my
head, so in lieu of actually working on it I’m going to talk about what it
currently looks like.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;abstract-syntax-lists&quot;&gt;Abstract Syntax Lists&lt;&#x2F;h2&gt;

&lt;p&gt;&lt;em&gt;In the beginning&lt;&#x2F;em&gt; there was assembly. Well, really in the beginning there were
punchcards, and probably something even more esoteric before that, but it was
all effectively the same thing: a list of commands the computer would execute
sequentially, with the ability to jump to odd places in the sequence depending
on conditions at runtime. For the purpose of this post, we’ll call this class of
languages “abstract syntax list” (ASL) languages.&lt;&#x2F;p&gt;

&lt;p&gt;Here’s a hello world program in my favorite ASL language, brainfuck:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;++++++++[&amp;gt;++++[&amp;gt;++&amp;gt;+++&amp;gt;+++&amp;gt;+&amp;lt;&amp;lt;&amp;lt;&amp;lt;-]&amp;gt;+&amp;gt;+&amp;gt;-&amp;gt;&amp;gt;+[&amp;lt;]&amp;lt;-]&amp;gt;&amp;gt;.&amp;gt;---.+++++++..+++.&amp;gt;&amp;gt;.&amp;lt;-.&amp;lt;.++
+.------.--------.&amp;gt;&amp;gt;+.&amp;gt;++.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;(If you’ve never seen brainfuck, it’s deliberately unintelligible. But it &lt;em&gt;is&lt;&#x2F;em&gt;
an ASL, each character representing a single command, executed by the brainfuck
runtime from left to right.)&lt;&#x2F;p&gt;

&lt;p&gt;ASLs did the job at the time, but luckily we’ve mostly moved on past them.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;abstract-syntax-trees&quot;&gt;Abstract Syntax Trees&lt;&#x2F;h2&gt;

&lt;p&gt;Eventually programmers upgraded to C-like languages. Rather than a sequence of
commands, these languages were syntactically represented by an “abstract syntax
tree” (AST). Rather than executing commands in essentially the same order they
are written, an AST language compiler reads the syntax into a tree of syntax
nodes. What it then does with the tree is language dependent.&lt;&#x2F;p&gt;

&lt;p&gt;Here’s a program which outputs all numbers from 0 to 9 to stdout, written in
(slightly non-idiomatic) Go:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;&#x2F;span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;When the Go compiler sees this, it’s going to first parse the syntax into an
AST. The AST might look something like this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(root)
   |-(:=)
   |   |-(i)
   |   |-(0)
   |
   |-(for)
       |-(if)
       |  |-(==)
       |  |  |-(i)
       |  |  |-(10)
       |  |
       |  |-(break)
       |
       |-(fmt.Println)
       |       |-(i)
       |
       |-(++)
           |-(i)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Each of the non-leaf nodes in the tree represents an operation, and the children
of the node represent the arguments to that operation, if any. From here the
compiler traverses the tree depth-first in order to turn each operation it finds
into the appropriate machine code.&lt;&#x2F;p&gt;

&lt;p&gt;There’s a sub-class of AST languages called the LISP (“LISt Processor”)
languages. In a LISP language the AST is represented using lists of elements,
where the first element in each list denotes the operation and the rest of the
elements in the list (if any) represent the arguments. Traditionally each list
is represented using parenthesis. For example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(+ 1 1)&lt;&#x2F;code&gt; represents adding 1 and
1 together.&lt;&#x2F;p&gt;

&lt;p&gt;As a more complex example, here’s how to print numbers 0 through 9 to stdout
using my favorite (and, honestly, only) LISP, Clojure:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-clj highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;nb&quot;&gt;doseq&lt;&#x2F;span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;&#x2F;span&gt;&lt;span class=&quot;w&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;&#x2F;span&gt;&lt;span class=&quot;w&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;nb&quot;&gt;println&lt;&#x2F;span&gt;&lt;span class=&quot;w&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;&#x2F;span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Much smaller, but the idea is there. In LISPs there is no differentiation
between the syntax, the AST, and the language’s data structures; they are all
one and the same. For this reason LISPs generally have very powerful macro
support, wherein one uses code written in the language to transform code written
in that same language. With macros users can extend a language’s functionality
to support nearly anything they need to, but because macro generation happens
&lt;em&gt;before&lt;&#x2F;em&gt; compilation they can still reap the benefits of compiler optimizations.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;ast-pitfalls&quot;&gt;AST Pitfalls&lt;&#x2F;h3&gt;

&lt;p&gt;The ASL (assembly) is essentially just a thin layer of human readability on top
of raw CPU instructions. It does nothing in the way of representing code in the
way that humans actually think about it (relationships of types, flow of data,
encapsulation of behavior). The AST is a step towards expressing code in human
terms, but it isn’t quite there in my opinion. Let me show why by revisiting the
Go example above:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;&#x2F;span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;When I understand this code I don’t understand it in terms of its syntax. I
understand it in terms of what it &lt;em&gt;does&lt;&#x2F;em&gt;. And what it does is this:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;with a number starting at 0, start a loop.&lt;&#x2F;li&gt;
  &lt;li&gt;if the number is greater than 9, stop the loop.&lt;&#x2F;li&gt;
  &lt;li&gt;otherwise, print the number.&lt;&#x2F;li&gt;
  &lt;li&gt;add one to the number.&lt;&#x2F;li&gt;
  &lt;li&gt;go to start of loop.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;This behavior could be further abstracted into the original problem statement,
“it prints numbers 0 through 9 to stdout”, but that’s too general, as there
are different ways for that to be accomplished. The Clojure example first
defines a list of numbers 0 through 9 and then iterates over that, rather than
looping over a single number. These differences are important when understanding
what code is doing.&lt;&#x2F;p&gt;

&lt;p&gt;So what’s the problem? My problem with ASTs is that the syntax I’ve written down
does &lt;em&gt;not&lt;&#x2F;em&gt; reflect the structure of the code or the flow of data which is in my
head. In the AST representation if you want to follow the flow of data (a single
number) you &lt;em&gt;have&lt;&#x2F;em&gt; to understand the semantic meaning of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:=&lt;&#x2F;code&gt;; the AST
structure itself does not convey how data is being moved or modified.
Essentially, there’s an extra implicit transformation that must be done to
understand the code in human terms.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;ginger-an-abstract-syntax-graph-language&quot;&gt;Ginger: An Abstract Syntax Graph Language&lt;&#x2F;h2&gt;

&lt;p&gt;In my view the next step is towards using graphs rather than trees for
representing our code. A graph has the benefit of being able to reference
“backwards” into itself, where a tree cannot, and so can represent the flow of
data much more directly.&lt;&#x2F;p&gt;

&lt;p&gt;I would like Ginger to be an ASG language where the language is the graph,
similar to a LISP. But what does this look like exactly? Well, I have a good
idea about what the graph &lt;em&gt;structure&lt;&#x2F;em&gt; will be like and how it will function, but
the syntax is something I haven’t bothered much with yet. Representing graph
structures in a text file is a problem to be tackled all on its own. For this
post we’ll use a made-up, overly verbose, and probably non-usable syntax, but
hopefully it will convey the graph structure well enough.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;nodes-edges-and-tuples&quot;&gt;Nodes, Edges, and Tuples&lt;&#x2F;h3&gt;

&lt;p&gt;All graphs have nodes, where each node contains a value. A single unique value
can only have a single node in a graph. Nodes are connected by edges, where
edges have a direction and can contain a value themselves.&lt;&#x2F;p&gt;

&lt;p&gt;In the context of Ginger, a node represents a value as expected, and the value
on an edge represents an operation to take on that value. For example:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 -incr-&amp;gt; n
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt; are both nodes in the graph, with an edge going from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;&#x2F;code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt; that
has the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incr&lt;&#x2F;code&gt;. When it comes time to interpret the graph we say that the
value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt; can be calculated by giving &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;&#x2F;code&gt; as the input to the operation
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incr&lt;&#x2F;code&gt; (increment). In other words, the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;p&gt;What about operations which have more than one input value? For this Ginger
introduces the tuple to its graph type. A tuple is like a node, except that it’s
anonymous, which allows more than one to exist within the same graph, as they do
not share the same value. For the purposes of this blog post we’ll represent
tuples like this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 -&amp;gt; } -add-&amp;gt; t
2 -&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;&#x2F;code&gt;’s value is the result of passing a tuple of two values, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;&#x2F;code&gt;, as
inputs to the operation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;&#x2F;code&gt;. In other words, the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;&#x2F;code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;p&gt;For the syntax being described in this post we allow that a single contiguous
graph can be represented as multiple related sections. This can be done because
each node’s value is unique, so when the same value is used in disparate
sections we can merge the two sections on that value. For example, the following
two graphs are exactly equivalent (note the parenthesis wrapping the graph which
has been split):&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 -&amp;gt; } -add-&amp;gt; t -incr-&amp;gt; tt
2 -&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(
    1 -&amp;gt; } -add-&amp;gt; t
    2 -&amp;gt; }

    t -incr-&amp;gt; tt
)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tt&lt;&#x2F;code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;&#x2F;code&gt; in both cases.)&lt;&#x2F;p&gt;

&lt;p&gt;A tuple with only one input edge, a 1-tuple, is a no-op, semantically, but can
be useful structurally to chain multiple operations together without defining
new value names. In the above example the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;&#x2F;code&gt; value can be eliminated using a
1-tuple.&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 -&amp;gt; } -add-&amp;gt; } -incr-&amp;gt; tt
2 -&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;When an integer is used as an operation on a tuple value then the effect is to
output the value in the tuple at that index. For example:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 -&amp;gt; } -0-&amp;gt; } -incr-&amp;gt; t
2 -&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;&#x2F;code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;&#x2F;code&gt;.)&lt;&#x2F;p&gt;

&lt;h3 id=&quot;operations&quot;&gt;Operations&lt;&#x2F;h3&gt;

&lt;p&gt;When a value sits on an edge it is used as an operation on the input of that
edge. Some operations will no doubt be builtin, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;&#x2F;code&gt;, but users should be
able to define their own operations. This can be done using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out&lt;&#x2F;code&gt;
special values. When a graph is used as an operation it is scanned for both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;&#x2F;code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out&lt;&#x2F;code&gt; values. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;&#x2F;code&gt; is set to the input value of the operation, and the value
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out&lt;&#x2F;code&gt; is used as the output of the operation.&lt;&#x2F;p&gt;

&lt;p&gt;Here we will define the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incr&lt;&#x2F;code&gt; operation and then use it. Note that we set the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incr&lt;&#x2F;code&gt; value to be an entire sub-graph which represents the operation’s body.&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;( in -&amp;gt; } -add-&amp;gt; out
   1 -&amp;gt; }            ) -&amp;gt; incr

5 -incr-&amp;gt; n
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;&#x2F;code&gt;.)&lt;&#x2F;p&gt;

&lt;p&gt;The output of an operation may itself be a tuple. Here’s an implementation and
usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double-incr&lt;&#x2F;code&gt;, which increments two values at once.&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;( in -0-&amp;gt; } -incr-&amp;gt; } -&amp;gt; out
                    }
  in -1-&amp;gt; } -incr-&amp;gt; }        ) -&amp;gt; double-incr

1 -&amp;gt; } -double-incr-&amp;gt; t -add-&amp;gt; tt
2 -&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;&#x2F;code&gt; is a 2-tuple with values &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;&#x2F;code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;&#x2F;code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tt&lt;&#x2F;code&gt; is `5.)&lt;&#x2F;p&gt;

&lt;h3 id=&quot;conditionals&quot;&gt;Conditionals&lt;&#x2F;h3&gt;

&lt;p&gt;The conditional is a bit weird, and I’m not totally settled on it yet. For now
we’ll use this. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; operation expects as an input a 2-tuple whose first
value is a boolean and whose second value will be passed along. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt;
operation is special in that it has &lt;em&gt;two&lt;&#x2F;em&gt; output edges. The first will be taken
if the boolean is true, the second if the boolean is false. The second value in
the input tuple, the one to be passed along, is used as the input to whichever
branch is taken.&lt;&#x2F;p&gt;

&lt;p&gt;Here is an implementation and usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;&#x2F;code&gt;, which takes two numbers and
outputs the greater of the two. Note that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt; operation has two output
edges, but our syntax doesn’t represent that very cleanly.&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;( in -gt-&amp;gt; } -if-&amp;gt; } -0-&amp;gt; out
     in -&amp;gt; }    -&amp;gt; } -1-&amp;gt; out ) -&amp;gt; max

1 -&amp;gt; } -max-&amp;gt; t
2 -&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;&#x2F;code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;&#x2F;code&gt;.)&lt;&#x2F;p&gt;

&lt;p&gt;It would be simple enough to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;&#x2F;code&gt; macro on top of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;&#x2F;code&gt;, to allow
for multiple conditionals to be tested at once.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;loops&quot;&gt;Loops&lt;&#x2F;h3&gt;

&lt;p&gt;Loops are tricky, and I have two thoughts about how they might be accomplished.
One is to literally draw an edge from the right end of the graph back to the
left, at the point where the loop should occur, as that’s conceptually what’s
happening. But representing that in a text file is difficult. For now I’ll
introduce the special &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recur&lt;&#x2F;code&gt; value, and leave this whole section as TBD.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recur&lt;&#x2F;code&gt; is cousin of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out&lt;&#x2F;code&gt;, in that it’s a special value and not an
operation.  It takes whatever value it’s set to and calls the current operation
with that as input. As an example, here is our now classic 0 through 9 printer
(assume &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;println&lt;&#x2F;code&gt; outputs whatever it was input):&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&#x2F;&#x2F; incr-1 is an operation which takes a 2-tuple and returns the same 2-tuple
&#x2F;&#x2F; with the first element incremented.
( in -0-&amp;gt; } -incr-&amp;gt; } -&amp;gt; out
            in -1-&amp;gt; }        ) -&amp;gt; incr-1

( in -eq-&amp;gt; } -if-&amp;gt; out
     in -&amp;gt; }    -&amp;gt; } -0-&amp;gt; } -println-&amp;gt; } -incr-1-&amp;gt; } -&amp;gt; recur ) -&amp;gt; print-range

0  -&amp;gt; } -print-range-&amp;gt; }
10 -&amp;gt; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h2&gt;

&lt;p&gt;This post is long enough, and I think gives at least a basic idea of what I’m
going for. The syntax presented here is &lt;em&gt;extremely&lt;&#x2F;em&gt; rudimentary, and is almost
definitely not what any final version of the syntax would look like. But the
general idea behind the structure is sound, I think.&lt;&#x2F;p&gt;

&lt;p&gt;I have a lot of further ideas for Ginger I haven’t presented here. Hopefully as
time goes on and I work on the language more some of those ideas can start
taking a more concrete shape and I can write about them.&lt;&#x2F;p&gt;

&lt;p&gt;The next thing I need to do for Ginger is to implement (again) the graph type
for it, since the last one I implemented didn’t include tuples. Maybe I can
extend it instead of re-writing it. After that it will be time to really buckle
down and figure out a syntax. Once a syntax is established then it’s time to
start on the compiler!&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Component-Oriented Programming</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2020-11-16T00:00:00+00:00</published>
    <updated>2020-11-16T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-component-oriented-programming/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-component-oriented-programming/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2020/11/16/component-oriented-programming.html</id>
        <link href="https://blog.mediocregopher.com/2020/11/16/component-oriented-programming.html"/>
        <title>Component-Oriented Programming</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2020-11-16T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-component-oriented-programming/</id>
    <content type="html">
        &lt;p&gt;&lt;a href=&quot;&#x2F;2019&#x2F;08&#x2F;02&#x2F;program-structure-and-composability.html&quot;&gt;A previous post in this
blog&lt;&#x2F;a&gt; focused on a
framework developed to make designing component-based programs easier. In
retrospect, the proposed pattern&#x2F;framework was over-engineered. This post
attempts to present the same ideas in a more distilled form, as a simple
programming pattern and without the unnecessary framework.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;&#x2F;h2&gt;

&lt;p&gt;Many languages, libraries, and patterns make use of a concept called a
“component,” but in each case the meaning of “component” might be slightly
different. Therefore, to begin talking about components, it is necessary to first
describe what is meant by “component” in this post.&lt;&#x2F;p&gt;

&lt;p&gt;For the purposes of this post, the properties of components include the
following.&lt;&#x2F;p&gt;

&lt;p&gt; 1… &lt;strong&gt;Abstract&lt;&#x2F;strong&gt;: A component is an interface consisting of one or more
methods.&lt;&#x2F;p&gt;

&lt;p&gt;   1a… A function might be considered a single-method component
&lt;em&gt;if&lt;&#x2F;em&gt; the language supports first-class functions.&lt;&#x2F;p&gt;

&lt;p&gt;   1b… A component, being an interface, may have one or more
implementations. Generally, there will be a primary implementation, which is
used during a program’s runtime, and secondary “mock” implementations, which are
only used when testing other components.&lt;&#x2F;p&gt;

&lt;p&gt; 2… &lt;strong&gt;Instantiatable&lt;&#x2F;strong&gt;: An instance of a component, given some set of
parameters, can be instantiated as a standalone entity. More than one of the
same component can be instantiated, as needed.&lt;&#x2F;p&gt;

&lt;p&gt; 3… &lt;strong&gt;Composable&lt;&#x2F;strong&gt;: A component may be used as a parameter of another
component’s instantiation. This would make it a child component of the one being
instantiated (the parent).&lt;&#x2F;p&gt;

&lt;p&gt; 4… &lt;strong&gt;Pure&lt;&#x2F;strong&gt;: A component may not use mutable global variables (i.e.,
singletons) or impure global functions (e.g., system calls). It may only use
constants and variables&#x2F;components given to it during instantiation.&lt;&#x2F;p&gt;

&lt;p&gt; 5… &lt;strong&gt;Ephemeral&lt;&#x2F;strong&gt;: A component may have a specific method used to clean
up all resources that it’s holding (e.g., network connections, file handles,
language-specific lightweight threads, etc.).&lt;&#x2F;p&gt;

&lt;p&gt;   5a… This cleanup method should &lt;em&gt;not&lt;&#x2F;em&gt; clean up any child
components given as instantiation parameters.&lt;&#x2F;p&gt;

&lt;p&gt;   5b… This cleanup method should not return until the
component’s cleanup is complete.&lt;&#x2F;p&gt;

&lt;p&gt;   5c… A component should not be cleaned up until all its
parent components are cleaned up.&lt;&#x2F;p&gt;

&lt;p&gt;Components are composed together to create component-oriented programs. This is
done by passing components as parameters to other components during
instantiation. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;&#x2F;code&gt; procedure of the program is responsible for
instantiating and composing the components of the program.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;

&lt;p&gt;It’s easier to show than to tell. This section posits a simple program and then
describes how it would be implemented in a component-oriented way. The program
chooses a random number and exposes an HTTP interface that allows users to try
and guess that number. The following are requirements of the program:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A guess consists of a name that identifies the user performing the guess and
the number that is being guessed;&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;A score is kept for each user who has performed a guess;&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Upon an incorrect guess, the user should be informed of whether they guessed
too high or too low, and 1 point should be deducted from their score;&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Upon a correct guess, the program should pick a new random number against
which to check subsequent guesses, and 1000 points should be added to the
user’s score;&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;The HTTP interface should have two endpoints: one for users to submit guesses,
and another that lists out user scores from highest to lowest;&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Scores should be saved to disk so they survive program restarts.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;It seems clear that there will be two major areas of functionality for our
program: score-keeping and user interaction via HTTP. Each of these can be
encapsulated into components called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scoreboard&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpHandlers&lt;&#x2F;code&gt;,
respectively.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scoreboard&lt;&#x2F;code&gt; will need to interact with a filesystem component to save&#x2F;restore
scores (because it can’t use system calls directly; see property 4). It would be
wasteful for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scoreboard&lt;&#x2F;code&gt; to save the scores to disk on every score update, so
instead it will do so every 5 seconds. A time component will be required to
support this.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpHandlers&lt;&#x2F;code&gt; will be choosing the random number which is being guessed, and
will therefore need a component that produces random numbers. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpHandlers&lt;&#x2F;code&gt;
will also be recording score changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scoreboard&lt;&#x2F;code&gt;, so it will need access to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scoreboard&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;p&gt;The example implementation will be written in go, which makes differentiating
HTTP handler functionality from the actual HTTP server quite easy; thus, there
will be an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpServer&lt;&#x2F;code&gt; component that uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpHandlers&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;p&gt;Finally, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logger&lt;&#x2F;code&gt; component will be used in various places to log useful
information during runtime.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;a href=&quot;&#x2F;assets&#x2F;component-oriented-design&#x2F;v1&#x2F;main.html&quot;&gt;The example implementation can be found
here.&lt;&#x2F;a&gt; While most of it can be
skimmed, it is recommended to at least read through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;&#x2F;code&gt; function to see
how components are composed together. Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;&#x2F;code&gt; is where all components
are instantiated, and that all components’ take in their child components as
part of their instantiation.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;dag&quot;&gt;DAG&lt;&#x2F;h2&gt;

&lt;p&gt;One way to look at a component-oriented program is as a directed acyclic graph
(DAG), where each node in the graph represents a component, and each edge
indicates that one component depends upon another component for instantiation.
For the previous program, it’s quite easy to construct such a DAG just by
looking at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;&#x2F;code&gt;, as in the following:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;net.Listener     rand.Rand        os.File
     ^               ^               ^
     |               |               |
 httpServer --&amp;gt; httpHandlers --&amp;gt; scoreboard --&amp;gt; time.Ticker
     |               |               |
     +---------------+---------------+--&amp;gt; log.Logger
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Note that all the leaves of the DAG (i.e., nodes with no children) describe the
points where the program meets the operating system via system calls. The leaves
are, in essence, the program’s interface with the outside world.&lt;&#x2F;p&gt;

&lt;p&gt;While it’s not necessary to actually draw out the DAG for every program one
writes, it can be helpful to at least think about the program’s structure in
these terms.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;&#x2F;h2&gt;

&lt;p&gt;Looking at the previous example implementation, one would be forgiven for having
the immediate reaction of “This seems like a lot of extra work for little gain.
Why can’t I just make the system calls where I need to, and not bother with
wrapping them in interfaces and all these other rules?”&lt;&#x2F;p&gt;

&lt;p&gt;The following sections will answer that concern by showing the benefits gained
by following a component-oriented pattern.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h3&gt;

&lt;p&gt;Testing is important, that much is being assumed.&lt;&#x2F;p&gt;

&lt;p&gt;A distinction to be made with testing is between unit and non-unit tests. Unit
tests are those for which there are no requirements for the environment outside
the test, such as the existence of global variables, running databases,
filesystems, or network services. Unit tests do not interact with the world
outside the testing procedure, but instead use mocks in place of the
functionality that would be expected by that world.&lt;&#x2F;p&gt;

&lt;p&gt;Unit tests are important because they are faster to run and more consistent than
non-unit tests. Unit tests also force the programmer to consider different
possible states of a component’s dependencies during the mocking process.&lt;&#x2F;p&gt;

&lt;p&gt;Unit tests are often not employed by programmers, because they are difficult to
implement for code that does not expose any way to swap out dependencies for
mocks of those dependencies. The primary culprit of this difficulty is the
direct usage of singletons and impure global functions. For component-oriented
programs, all components inherently allow for the swapping out of any
dependencies via their instantiation parameters, so there’s no extra effort
needed to support unit tests.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;a href=&quot;&#x2F;assets&#x2F;component-oriented-design&#x2F;v1&#x2F;main_test.html&quot;&gt;Tests for the example implementation can be found
here.&lt;&#x2F;a&gt; Note that all
dependencies of each component being tested are mocked&#x2F;stubbed next to them.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;&#x2F;h3&gt;

&lt;p&gt;Practically all programs require some level of runtime configuration. This may
take the form of command-line arguments, environment variables, configuration
files, etc.&lt;&#x2F;p&gt;

&lt;p&gt;For a component-oriented program, all components are instantiated in the same
place, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;&#x2F;code&gt;, so it’s very easy to expose any arbitrary parameter to the user
via configuration. For any component that is affected by a configurable
parameter, that component merely needs to take an instantiation parameter for
that configurable parameter; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;&#x2F;code&gt; can connect the two together. This accounts
for the unit testing of a component with different configurations, while still
allowing for the configuration of any arbitrary internal functionality.&lt;&#x2F;p&gt;

&lt;p&gt;For more complex configuration systems, it is also possible to implement a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration&lt;&#x2F;code&gt; component that wraps whatever configuration-related
functionality is needed, which other components use as a sub-component. The
effect is the same.&lt;&#x2F;p&gt;

&lt;p&gt;To demonstrate how configuration works in a component-oriented program, the
example program’s requirements will be augmented to include the following:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The point change values for both correct and incorrect guesses (currently
hardcoded at 1000 and 1, respectively) should be configurable on the
command-line;&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;The save file’s path, HTTP listen address, and save interval should all be
configurable on the command-line.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;&lt;a href=&quot;&#x2F;assets&#x2F;component-oriented-design&#x2F;v2&#x2F;main.html&quot;&gt;The new implementation, with newly configurable parameters, can be found
here.&lt;&#x2F;a&gt; Most of the program has
remained the same, and all unit tests from before remain valid. The primary
difference is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scoreboard&lt;&#x2F;code&gt; takes in two new parameters for the point change
values, and configuration is set up inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;&#x2F;code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flags&lt;&#x2F;code&gt; package.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;setupruntimecleanup&quot;&gt;Setup&#x2F;Runtime&#x2F;Cleanup&lt;&#x2F;h3&gt;

&lt;p&gt;A program can be split into three stages: setup, runtime, and cleanup. Setup is
the stage during which the internal state is assembled to make runtime possible.
Runtime is the stage during which a program’s actual function is being
performed. Cleanup is the stage during which the runtime stops and internal
state is disassembled.&lt;&#x2F;p&gt;

&lt;p&gt;A graceful (i.e., reliably correct) setup is quite natural to accomplish for
most. On the other hand, a graceful cleanup is, unfortunately, not a programmer’s
first concern (if it is a concern at all).&lt;&#x2F;p&gt;

&lt;p&gt;When building reliable and correct programs, a graceful cleanup is as important
as a graceful setup and runtime. A program is still running while it is being
cleaned up, and it’s possibly still acting on the outside world. Shouldn’t
it behave correctly during that time?&lt;&#x2F;p&gt;

&lt;p&gt;Achieving a graceful setup and cleanup with components is quite simple.&lt;&#x2F;p&gt;

&lt;p&gt;During setup, a single-threaded procedure (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;&#x2F;code&gt;) first constructs the leaf
components, then the components that take those leaves as parameters, then the
components that take &lt;em&gt;those&lt;&#x2F;em&gt; as parameters, and so on, until the component DAG
is fully constructed.&lt;&#x2F;p&gt;

&lt;p&gt;At this point, the program’s runtime has begun.&lt;&#x2F;p&gt;

&lt;p&gt;Once the runtime is over, signified by a process signal or some other mechanism,
it’s only necessary to call each component’s cleanup method (if any; see
property 5) in the reverse of the order in which the components were
instantiated.  This order is inherently deterministic, as the components were
instantiated by a single-threaded procedure.&lt;&#x2F;p&gt;

&lt;p&gt;Inherent to this pattern is the fact that each component will certainly be
cleaned up before any of its child components, as its child components must have
been instantiated first, and a component will not clean up child components
given as parameters (properties 5a and 5c). Therefore, the pattern avoids
use-after-cleanup situations.&lt;&#x2F;p&gt;

&lt;p&gt;To demonstrate a graceful cleanup in a component-oriented program, the example
program’s requirements will be augmented to include the following:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The program will terminate itself upon an interrupt signal;&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;During termination (cleanup), the program will save the latest set of scores
to disk one final time.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;&lt;a href=&quot;&#x2F;assets&#x2F;component-oriented-design&#x2F;v3&#x2F;main.html&quot;&gt;The new implementation that accounts for these new requirements can be found
here.&lt;&#x2F;a&gt; For this example, go’s
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defer&lt;&#x2F;code&gt; feature could have been used instead, which would have been even
cleaner, but was omitted for the sake of those using other languages.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;

&lt;p&gt;The component pattern helps make programs more reliable with only a small amount
of extra effort incurred. In fact, most of the pattern has to do with
establishing sensible abstractions around global functionality and remembering
certain idioms for how those abstractions should be composed together, something
most of us already do to some extent anyway.&lt;&#x2F;p&gt;

&lt;p&gt;While beneficial in many ways, component-oriented programming is merely a tool
that can be applied in many cases. It is certain that there are cases where it
is not the right tool for the job, so apply it deliberately and intelligently.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;criticismsquestions&quot;&gt;Criticisms&#x2F;Questions&lt;&#x2F;h2&gt;

&lt;p&gt;In lieu of a FAQ, I will attempt to premeditate questions and criticisms of the
component-oriented programming pattern laid out in this post.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;strong&gt;This seems like a lot of extra work.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;

&lt;p&gt;Building reliable programs is a lot of work, just as building a
reliable &lt;em&gt;anything&lt;&#x2F;em&gt; is a lot of work. Many of us work in an industry that likes
to balance reliability (sometimes referred to by the more specious “quality”)
with malleability and deliverability, which naturally leads to skepticism of any
suggestions requiring more time spent on reliability. This is not necessarily a
bad thing, it’s just how the industry functions.&lt;&#x2F;p&gt;

&lt;p&gt;All that said, a pattern need not be followed perfectly to be worthwhile, and
the amount of extra work incurred by it can be decided based on practical
considerations. I merely maintain that code which is (mostly) component-oriented
is easier to maintain in the long run, even if it might be harder to get off the
ground initially.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;strong&gt;My language makes this difficult.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;

&lt;p&gt;I don’t know of any language which makes this pattern particularly easier than
others, so, unfortunately, we’re all in the same boat to some extent (though I
recognize that some languages, or their ecosystems, make it more difficult than
others). It seems to me that this pattern shouldn’t be unbearably difficult for
anyone to implement in any language either, however, as the only language
feature required is abstract typing.&lt;&#x2F;p&gt;

&lt;p&gt;It would be nice to one day see a language that explicitly supports this
pattern by baking the component properties in as compiler-checked rules.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;strong&gt;My &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;&#x2F;code&gt; is too big&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;

&lt;p&gt;There’s no law saying all component construction needs to happen in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;&#x2F;code&gt;,
that’s just the most sensible place for it. If there are large sections of your
program that are independent of each other, then they could each have their own
construction functions that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;&#x2F;code&gt; then calls.&lt;&#x2F;p&gt;

&lt;p&gt;Other questions that are worth asking include: Can my program be split up
into multiple programs? Can the responsibilities of any of my components be
refactored to reduce the overall complexity of the component DAG? Can the
instantiation of any components be moved within their parent’s
instantiation function?&lt;&#x2F;p&gt;

&lt;p&gt;(This last suggestion may seem to be disallowed, but is fine as long as the
parent’s instantiation function remains pure.)&lt;&#x2F;p&gt;

&lt;p&gt;&lt;strong&gt;Won’t this will result in over-abstraction?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;

&lt;p&gt;Abstraction is a necessary tool in a programmer’s toolkit, there is simply no
way around it. The only questions are “how much?” and “where?”&lt;&#x2F;p&gt;

&lt;p&gt;The use of this pattern does not affect how those questions are answered, in my
opinion, but instead aims to more clearly delineate the relationships and
interactions between the different abstracted types once they’ve been
established using other methods. Over-abstraction is possible and avoidable
regardless of which language, pattern, or framework is being used.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;strong&gt;Does CoP conflict with object-oriented or functional programming?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;

&lt;p&gt;I don’t think so. OoP languages will have abstract types as part of their core
feature-set; most difficulties are going to be with deliberately &lt;em&gt;not&lt;&#x2F;em&gt; using
other features of an OoP language, and with imported libraries in the language
perhaps making life inconvenient by not following CoP (specifically regarding
cleanup and the use of singletons).&lt;&#x2F;p&gt;

&lt;p&gt;For functional programming, it may well be that, depending on the language, CoP
is technically being used, as functional languages are already generally
antagonistic toward globals and impure functions, which is most of the battle.
If anything, the transition from functional to component-oriented programming
will generally be an organizational task.&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Visualization 3</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2020-07-07T00:00:00+00:00</published>
    <updated>2020-07-07T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-visualization-3/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-visualization-3/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2020/07/07/viz-3.html</id>
        <link href="https://blog.mediocregopher.com/2020/07/07/viz-3.html"/>
        <title>Visualization 3</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2020-07-07T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-visualization-3/</id>
    <content type="html">
        &lt;canvas id=&quot;canvas&quot; style=&quot;padding-bottom: 2rem;&quot;&gt;&lt;&#x2F;canvas&gt;

&lt;p&gt;This visualization is built from the ground up. On every frame a random set of
pixels is chosen. Each chosen pixel calculates the average of its color and the
color of a random neighbor. Some random color drift is added in as well. It
replaces its own color with that calculated color.&lt;&#x2F;p&gt;

&lt;p&gt;Choosing a neighbor is done using the “asteroid rule”, ie a pixel at the very
top row is considered to be the neighbor of the pixel on the bottom row of the
same column.&lt;&#x2F;p&gt;

&lt;p&gt;Without the asteroid rule the pixels would all eventually converge into a single
uniform color, generally a light blue, due to the colors at the edge, the reds,
being quickly averaged away. With the asteroid rule in place the canvas has no
edges, thus no position on the canvas is favored and balance can be maintained.&lt;&#x2F;p&gt;

&lt;script type=&quot;text&#x2F;javascript&quot;&gt;
let rectSize = 12;

function randn(n) {
    return Math.floor(Math.random() * n);
}

let canvas = document.getElementById(&quot;canvas&quot;);
canvas.width = window.innerWidth - (window.innerWidth % rectSize);
canvas.height = window.innerHeight- (window.innerHeight % rectSize);
let ctx = canvas.getContext(&quot;2d&quot;);

let w = canvas.width &#x2F; rectSize;
let h = canvas.height &#x2F; rectSize;

let matrices = new Array(2);
matrices[0] = new Array(w);
matrices[1] = new Array(w);
for (let x = 0; x &lt; w; x++) {
    matrices[0][x] = new Array(h);
    matrices[1][x] = new Array(h);
    for (let y = 0; y &lt; h; y++) {
        let el = {
            h: 360 * (x &#x2F; w),
            s: &quot;100%&quot;,
            l: &quot;50%&quot;,
        };
        matrices[0][x][y] = el;
        matrices[1][x][y] = el;
    }
}

&#x2F;&#x2F; draw initial canvas, from here on out only individual rectangles will be
&#x2F;&#x2F; filled as they get updated.
for (let x = 0; x &lt; w; x++) {
    for (let y = 0; y &lt; h; y++) {
        let el = matrices[0][x][y];
        ctx.fillStyle = `hsl(${el.h}, ${el.s}, ${el.l})`;
        ctx.fillRect(x * rectSize, y * rectSize, rectSize, rectSize);
    }
}


let requestAnimationFrame = 
  window.requestAnimationFrame || 
  window.mozRequestAnimationFrame || 
  window.webkitRequestAnimationFrame || 
  window.msRequestAnimationFrame;

let neighbors = [
    [-1, -1], [0, -1], [1, -1],
    [-1, 0], [1, 0],
    [-1, 1], [0, 1], [1, 1],
];

function randNeighborAsteroid(matrix, x, y) {
    let neighborCoord = neighbors[randn(neighbors.length)];
    let neighborX = x+neighborCoord[0];
    let neighborY = y+neighborCoord[1];
    neighborX = (neighborX + w) % w;
    neighborY = (neighborY + h) % h;
    return matrix[neighborX][neighborY];
}

function randNeighbor(matrix, x, y) {
    while (true) {
        let neighborCoord = neighbors[randn(neighbors.length)];
        let neighborX = x+neighborCoord[0];
        let neighborY = y+neighborCoord[1];
        if (neighborX &lt; 0 || neighborX &gt;= w || neighborY &lt; 0 || neighborY &gt;= h) {
            continue;
        }
        return matrix[neighborX][neighborY];
    }
}

let drift = 10;
function genChildH(elA, elB) {
    &#x2F;&#x2F; set the two h values, h1 &lt;= h2
    let h1 = elA.h;
    let h2 = elB.h;
    if (h1 &gt; h2) {
        h1 = elB.h;
        h2 = elA.h;
    }

    &#x2F;&#x2F; diff must be between 0 (inclusive) and 360 (exclusive). If it&#x27;s greater
    &#x2F;&#x2F; than 180 then it&#x27;s not the shortest path around, that must be the other
    &#x2F;&#x2F; way around the circle.
    let hChild;
    let diff = h2 - h1;
    if (diff &gt; 180) {
        diff = 360 - diff;
        hChild = h2 + (diff &#x2F; 2);
    } else {
        hChild = h1 + (diff &#x2F; 2);
    }

    hChild += (Math.random() * drift * 2) - drift;
    hChild = (hChild + 360) % 360;
    return hChild;
}

let tick = 0;
function doTick() {
    tick++;
    let currI = tick % 2;
    let curr = matrices[currI];
    let lastI = (tick - 1) % 2;
    let last = matrices[lastI];

    for (let i = 0; i &lt; (w * h &#x2F; 2); i++) {
        let x = randn(w);
        let y = randn(h);
        if (curr[x][y].lastTick == tick) continue;

        let neighbor = randNeighborAsteroid(last, x, y);
        curr[x][y].h = genChildH(curr[x][y], neighbor);
        curr[x][y].lastTick = tick;
        ctx.fillStyle = `hsl(${curr[x][y].h}, ${curr[x][y].s}, ${curr[x][y].l})`;
        ctx.fillRect(x * rectSize, y * rectSize, rectSize, rectSize);
    }

    matrices[currI] = curr;
    requestAnimationFrame(doTick);
}

requestAnimationFrame(doTick);

&lt;&#x2F;script&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Nix and small containers with Docker multi-stage builds</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2020-05-15T00:00:00+00:00</published>
    <updated>2020-05-15T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-nix-and-small-containers-with-docker-multi-stage-builds/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-nix-and-small-containers-with-docker-multi-stage-builds/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/nix-and-small-containers/</id>
        <link href="https://marcopolo.io/code/nix-and-small-containers/"/>
        <title>Nix and small containers with Docker multi-stage builds</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2020-05-15T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-nix-and-small-containers-with-docker-multi-stage-builds/</id>
    <content type="html">
        &lt;p&gt;Multi Stage builds are great for minimizing the size of your container. The
general idea is you have a stage as your builder and another stage as your
product. This allows you to have a full development and build container while
still having a lean production container. The production container only carries
its runtime dependencies.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; golang:1.7.3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;go&#x2F;src&#x2F;github.com&#x2F;alexellis&#x2F;href-counter&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;go get -d -v golang.org&#x2F;x&#x2F;net&#x2F;html
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; app.go .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; alpine:latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;apk --no-cache add ca-certificates
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;root&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; --from=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &#x2F;go&#x2F;src&#x2F;github.com&#x2F;alexellis&#x2F;href-counter&#x2F;app .
CMD [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(from Docker&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;develop&#x2F;develop-images&#x2F;multistage-build&#x2F;&quot;&gt;docs on multi-stage&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;Sounds great, right? What&#x27;s the catch? Well, it&#x27;s not always easy to know what the
runtime dependencies are. For example you may have installed something in &#x2F;lib
that was needed in the build process. But it turned out to be a shared library
and now it needs to be included in the production container. Tricky! Is there
some automated way to know all your runtime dependencies?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enter-nix&quot;&gt;Enter Nix&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;&quot;&gt;Nix&lt;&#x2F;a&gt; is a functional and immutable package manager. It works great for
reproducible builds. It keeps track of packages and their dependencies via their
content hashes. And, relevant for this exercise, it also keeps track of the
dependencies of a built package. That means we can use Nix to build our project
and then ask Nix what our runtime dependencies are. With that information we can
copy just those files to the product stage of our multi-stage build and end up
with the smallest possible docker container.&lt;&#x2F;p&gt;
&lt;p&gt;Our general strategy will be to use a Nix builder to build our code. Ask the Nix
builder to tell us all the runtime dependencies of our built executable. Then
copy the executable with all it&#x27;s runtime dependencies to a fresh container. Our
expectation is that this will result in a minimal production container.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;
&lt;p&gt;As a simple example let&#x27;s package a &amp;quot;Hello World&amp;quot; program in Rust. The code is
what you&#x27;d expect:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;nix-build-expression&quot;&gt;Nix build expression&lt;&#x2F;h3&gt;
&lt;p&gt;If we were just building this locally, we&#x27;d just run &lt;code&gt;cargo build --release&lt;&#x2F;code&gt;.
But we are going to have Nix build this for us so that it can track the runtime
dependencies. Therefore we need a &lt;code&gt;default.nix&lt;&#x2F;code&gt; file to describe the build
process. Our &lt;code&gt;default.nix&lt;&#x2F;code&gt; build file looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;nixpkgs&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{});
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rustPlatform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buildRustPackage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello-rust&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;buildInputs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo rustc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This is a shasum over our crate dependencies
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;cargoSha256 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1s4vg081ci6hskb3kk965nxnx384w8xb7n7yc4g93hj55qsk4vw5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Use this to figure out the correct Sha256
  # cargoSha256 = lib.fakeSha256;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;buildPhase &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
    cargo build --release
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&amp;#39;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;checkPhase &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&amp;quot;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;installPhase &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
    mkdir -p $out&#x2F;bin
    cp target&#x2F;release&#x2F;hello $out&#x2F;bin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&amp;#39;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Breaking down the Nix expression: we specify what our inputs our to our
build: &lt;code&gt;cargo&lt;&#x2F;code&gt; and &lt;code&gt;rustc&lt;&#x2F;code&gt;; we figure out what the sha256sum is of our crate
dependencies; and we define some commands to build and install the executable.&lt;&#x2F;p&gt;
&lt;p&gt;We can verify this works locally on our machine by running &lt;code&gt;nix-build .&lt;&#x2F;code&gt;
(assuming you have Nix installed locally). You&#x27;ll end up with a symlink named
result that points the compiled executable residing in &#x2F;nix&#x2F;store. Running
&lt;code&gt;.&#x2F;result&#x2F;bin&#x2F;hello&lt;&#x2F;code&gt; should print &amp;quot;Hello, world!&amp;quot;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;docker-file&quot;&gt;Docker file&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we&#x27;ve built our Nix expression that defines how the code is built, we
can add Docker to the mix. The goal is to have a builder stage that runs the
nix-build command, then have a production stage that copies the executable and
its runtime dependencies from builder. The production stage container will
therefore have only the minimal amount of stuff needed to run.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Use nix as the builder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; nixos&#x2F;nix:latest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;AS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;builder

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Update the channel so we can get the latest packages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;nix-channel --update nixpkgs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;
WORKDIR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;app

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Run the builder first without our code to fetch build dependencies.
# This will fail, but that&amp;#39;s okay. We just want to have the build dependencies
# cached as a layer. This is just a caching optimization that can be removed.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; default.nix .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;nix-build . || true

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; . .

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Now that our code is here we actually build it
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;nix-build .

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Copy all the run time dependencies into &#x2F;tmp&#x2F;nix-store-closure
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;mkdir &#x2F;tmp&#x2F;nix-store-closure
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Output references (Runtime dependencies):&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; $(nix-store -qR result&#x2F;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;cp -R $(nix-store -qR result&#x2F;) &#x2F;tmp&#x2F;nix-store-closure

ENTRYPOINT [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;sh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; ]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Our production stage
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; scratch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Copy the runtime dependencies into &#x2F;nix&#x2F;store
# Note we don&amp;#39;t actually have nix installed on this container. But that&amp;#39;s fine,
# we don&amp;#39;t need it, the built code only relies on the given files existing, not
# Nix.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; --from=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &#x2F;tmp&#x2F;nix-store-closure &#x2F;nix&#x2F;store
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; --from=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &#x2F;app&#x2F;result &#x2F;app
CMD [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;app&#x2F;bin&#x2F;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we build this &lt;code&gt;Dockerfile&lt;&#x2F;code&gt; with &lt;code&gt;docker build .&lt;&#x2F;code&gt;, we&#x27;ll end up with an 33MB
container. Compare this to a naive
&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;MarcoPolo&#x2F;7953f1ca2691405b5b04659027967336&quot;&gt;Dockerfile&lt;&#x2F;a&gt;
where we end up with a 624 MB container! That&#x27;s an order of magnitude smaller
for a relatively simple change.&lt;&#x2F;p&gt;
&lt;p&gt;Note that our executable has a shared library dependency on libc. Alpine
linux doesn&#x27;t include libc, but this still works. How? When we build our code we
reference the libc shared library stored inside &lt;code&gt;&#x2F;nix&#x2F;store&lt;&#x2F;code&gt;. Then when we copy
the executable nix tells us that the libc shared library is also a dependency so
we copy that too. Our executable uses only the libc inside &lt;code&gt;&#x2F;nix&#x2F;store&lt;&#x2F;code&gt; and
doesn&#x27;t rely on any system provided libraries in &lt;code&gt;&#x2F;lib&lt;&#x2F;code&gt; or elsewhere.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;With a simple Nix build expression and the use of Docker&#x27;s multi stage builds we
can use Docker&#x27;s strength of providing a consistent and portable environment
with Nix&#x27;s fine grained dependency resolution to create a minimal production
container.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-note-on-statically-linked-executables&quot;&gt;A note on statically linked executables&lt;&#x2F;h2&gt;
&lt;p&gt;Yes, you could build the hello world example as a statically linked musl-backed
binary. But that&#x27;s not the point. Sometimes code relies on a shared library, and
it&#x27;s just not worth or impossible to convert it. The beauty of this system is
that it doesn&#x27;t matter if the output executable is fully statically linked or
not. It will work just the same and copy over the minimum amount of code needed
for the production container to work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-note-on-nix-s-dockertools&quot;&gt;A note on Nix&#x27;s dockerTools&lt;&#x2F;h2&gt;
&lt;p&gt;Nix proves a set of functions for creating Docker images:
&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;nixpkgs&#x2F;manual&#x2F;#sec-pkgs-dockerTools&quot;&gt;pkgs.dockerTools&lt;&#x2F;a&gt;. It&#x27;s
very cool, and I recommend checking it. Unlike docker it produces
deterministic images. Note, for all but the simplest examples, KVM is required.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-note-on-bazel-s-rules-docker&quot;&gt;A note on Bazel&#x27;s rules_docker&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t know much about this, but I&#x27;d assume this would be similar to what I&#x27;ve
described. If you know more about this, please let me know!&lt;&#x2F;p&gt;

      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Trading in the Rain</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2020-04-26T00:00:00+00:00</published>
    <updated>2020-04-26T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-trading-in-the-rain/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-trading-in-the-rain/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2020/04/26/trading-in-the-rain.html</id>
        <link href="https://blog.mediocregopher.com/2020/04/26/trading-in-the-rain.html"/>
        <title>Trading in the Rain</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2020-04-26T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-trading-in-the-rain/</id>
    <content type="html">
        &lt;!-- MIDI.js --&gt;
&lt;!-- polyfill --&gt;
&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;MIDI.js&#x2F;inc&#x2F;shim&#x2F;Base64.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;MIDI.js&#x2F;inc&#x2F;shim&#x2F;Base64binary.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;MIDI.js&#x2F;inc&#x2F;shim&#x2F;WebAudioAPI.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;!-- MIDI.js package --&gt;
&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;MIDI.js&#x2F;js&#x2F;midi&#x2F;audioDetect.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;MIDI.js&#x2F;js&#x2F;midi&#x2F;gm.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;MIDI.js&#x2F;js&#x2F;midi&#x2F;loader.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;MIDI.js&#x2F;js&#x2F;midi&#x2F;plugin.audiotag.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;MIDI.js&#x2F;js&#x2F;midi&#x2F;plugin.webaudio.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;MIDI.js&#x2F;js&#x2F;midi&#x2F;plugin.webmidi.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;!-- utils --&gt;
&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;MIDI.js&#x2F;js&#x2F;util&#x2F;dom_request_xhr.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;MIDI.js&#x2F;js&#x2F;util&#x2F;dom_request_script.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;!-- &#x2F; MIDI.js --&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;Distributor.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;MusicBox.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;RainCanvas.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;CW.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;SeriesComposer.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;trading-in-the-rain&#x2F;main.js&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;

&lt;div id=&quot;tradingInRainModal&quot;&gt;
For each pair listed below, live trade data will be pulled down from the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.cryptowat.ch&#x2F;websocket-api&#x2F;&quot;&gt;Cryptowat.ch Websocket
API&lt;&#x2F;a&gt; and used to generate musical rain drops. The price of each trade
determines both the musical note and position of the rain drop on the screen,
while the volume of each trade determines how long the note is held and how big
the rain drop is.

&lt;p id=&quot;markets&quot;&gt;Pairs to be generated, by color:&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;button id=&quot;button&quot; onclick=&quot;run()&quot;&gt;Click Here to Begin&lt;&#x2F;button&gt;
&lt;p id=&quot;progress&quot;&gt;&lt;&#x2F;p&gt;

&lt;script type=&quot;text&#x2F;javascript&quot;&gt;
  fillMarketP();
  if (window.addEventListener) window.addEventListener(&quot;load&quot;, autorun, false);
  else if (window.attachEvent) window.attachEvent(&quot;onload&quot;, autorun);
  else window.onload = autorun;
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;

&lt;canvas id=&quot;rainCanvas&quot; style=&quot;&quot;&gt;&lt;&#x2F;canvas&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>From C to Rust to C again. Or: Re-exporting C exports in Rust</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2019-12-12T00:00:00+00:00</published>
    <updated>2019-12-12T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-from-c-to-rust-to-c-again-or-re-exporting-c-exports-in-rust/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-from-c-to-rust-to-c-again-or-re-exporting-c-exports-in-rust/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/from-c-to-rust-to-c/</id>
        <link href="https://marcopolo.io/code/from-c-to-rust-to-c/"/>
        <title>From C to Rust to C again. Or: Re-exporting C exports in Rust</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2019-12-12T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-from-c-to-rust-to-c-again-or-re-exporting-c-exports-in-rust/</id>
    <content type="html">
        &lt;p&gt;The only difference between being a grown up and being a kid, in my experience, is as a grown up, you have much fewer people who are willing to play the game &lt;em&gt;telephone&lt;&#x2F;em&gt; with you. Luckily for me, I have access to a computer, a C compiler, and a Rust compiler. Let me show you how I played telephone with Rust &amp;amp; C.&lt;&#x2F;p&gt;
&lt;p&gt;tl;dr:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust can&#x27;t re-export from a linked C library (unless you rename) when compiled as a cdylib.&lt;&#x2F;li&gt;
&lt;li&gt;Look at this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;issues&#x2F;2771&quot;&gt;issue&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Imagine you have some C code that provides &lt;code&gt;add_two&lt;&#x2F;code&gt;. It looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; n + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And you can even let Cargo deal with building your C library by making a build.rs with &lt;code&gt;cc&lt;&#x2F;code&gt;. Like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cc;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    cc::Build::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&#x2F;c&#x2F;foo.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you want to be able to call &lt;code&gt;add_two&lt;&#x2F;code&gt; from Rust. Easy! You look at the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;ffi.html&quot;&gt;FFI&lt;&#x2F;a&gt; section in the Nomicon. And follow it like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, kind = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)]
#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;no_mangle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;no_mangle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub extern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(x) };
    a - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tests {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;::*;
    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;it_works&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
        assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
        assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now for the last chain in our telephone. We&#x27;ll make a new C file that will call our Rust defined &lt;code&gt;add_one&lt;&#x2F;code&gt; and our C defined &lt;code&gt;add_two&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use Clang to build this file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;clang call_rust.c -lrust_c_playground -L.&#x2F;target&#x2F;debug -o call_rust
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we have an executable called &lt;code&gt;call_rust&lt;&#x2F;code&gt; which calls a Rust defined function and calls a C defined function that it pulled in from a single Rust Library (called &lt;code&gt;librust_c_playground.dylib&lt;&#x2F;code&gt; on macOS). The flags in the clang command mean: &lt;code&gt;-l&lt;&#x2F;code&gt; link this library; &lt;code&gt;-L&lt;&#x2F;code&gt; look here for the library.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve built the code, now we can even run it!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&#x2F;call_rust
echo $? # Print the return code of our program, hopefully 42
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! We&#x27;ve called C from a Rust Library from a C program. But there&#x27;s a catch. This won&#x27;t work if you are building a &lt;code&gt;cdylib&lt;&#x2F;code&gt;. There isn&#x27;t an RFC yet on how to re-export C externs. In the mean time you&#x27;ll either have to: re-export under a different name, or build a &lt;code&gt;dylib&lt;&#x2F;code&gt;. See this issue: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;issues&#x2F;2771&quot;&gt;Re-exporting C symbols for cdylib&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Hope this helps.&lt;&#x2F;p&gt;

      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Wasm is the future of serverless. Terrafirma, serverless wasm functions.</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2019-11-06T00:00:00+00:00</published>
    <updated>2019-11-06T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-wasm-is-the-future-of-serverless-terrafirma-serverless-wasm-functions/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-wasm-is-the-future-of-serverless-terrafirma-serverless-wasm-functions/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/terrafirma/</id>
        <link href="https://marcopolo.io/code/terrafirma/"/>
        <title>Wasm is the future of serverless. Terrafirma, serverless wasm functions.</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2019-11-06T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-wasm-is-the-future-of-serverless-terrafirma-serverless-wasm-functions/</id>
    <content type="html">
        &lt;p&gt;When I ran into Fastly&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;wasm.fastlylabs.com&#x2F;&quot;&gt;Terrarium&lt;&#x2F;a&gt;, the appeal of Webassembly (wasm) finally clicked for me. We could have lightweight sandboxes and bring in my own language and libraries without the overhead of a full OS VM or &lt;a href=&quot;https:&#x2F;&#x2F;blog.iron.io&#x2F;the-overhead-of-docker-run&#x2F;&quot;&gt;Docker&lt;&#x2F;a&gt;. That&#x27;s great for the serverless provider, but it&#x27;s also great for the end user. Less overhead means faster startup time and less total cost.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-much-faster&quot;&gt;How much faster?&lt;&#x2F;h2&gt;
&lt;p&gt;On my machine™, a hello world shell script takes 3ms, a docker equivalent takes 700ms, and a wasm equivalent takes 15ms.&lt;&#x2F;p&gt;
&lt;p&gt;Following &lt;a href=&quot;https:&#x2F;&#x2F;blog.iron.io&#x2F;the-overhead-of-docker-run&#x2F;&quot;&gt;this experiment&lt;&#x2F;a&gt; I get these results:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Running: .&#x2F;hello.sh
avg: 3.516431ms
Running: docker run treeder&#x2F;hello:sh
avg: 692.306769ms
Running: docker run --rm treeder&#x2F;hello:sh
avg: 725.912422ms
Running: docker start -a reuse
avg: 655.059021ms
Running: node hello.js
avg: 79.233337ms
Running: wasmer run wasi-hello-world.wasm
avg: 15.155896ms
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When I think about how WASM, Docker, and OS VMs (compute instances) play together, I picture this graph below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;code&#x2F;wasm-graph.png&quot; alt=&quot;Safety versus overhead – Raw binary is fast unsafe; was is fast and safe; docker is safe.&quot; title=&quot;Safety vs Overhead&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The trend is that if you want safety and isolation, you must pay for it with overhead. WASM&#x27;s exception to that rule is what I think makes it so promising and interesting. Wasm provides the fastest way to run arbitrary user code in a sandboxed environment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-webassembly&quot;&gt;What is Webassembly?&lt;&#x2F;h2&gt;
&lt;p&gt;Webassembly is a spec for a lightweight and sandboxed VM. Webassembly is run by a host, and can&#x27;t do any side effects, unless it calls a function provided by the host. For example, if your WASM code wanted to make a GET request to a website, it could only do that by asking the host to help. The host exposes these helper function to the WASM guest. In Terrafirma, these are the &lt;code&gt;hostcall_*&lt;&#x2F;code&gt; functions in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;go-wasm-terrafirma&#x2F;blob&#x2F;master&#x2F;imports.go&quot;&gt;&lt;code&gt;imports.go&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. It&#x27;s called &lt;code&gt;imports.go&lt;&#x2F;code&gt; because it is what your WASM code is importing from the host.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bring-your-own-tools&quot;&gt;Bring your own tools&lt;&#x2F;h2&gt;
&lt;p&gt;As long as you can compile everything to a .wasm file, you can use whatever tools and language you want. All I have to do is provide a runtime, and all you have to do is provide a wasm file. However, there is a subtle caveat here. The only way you can run side effects is with the host cooperation. So you (or some library you use) must understand the environment you&#x27;re running in in order to do anything interesting.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-about-a-standard-wasm-environment&quot;&gt;What about a standard WASM Environment?&lt;&#x2F;h2&gt;
&lt;p&gt;There isn&#x27;t a mature industry standard for what imports a host should provide to the WASM code running outside the browser. The closest thing we have is &lt;a href=&quot;https:&#x2F;&#x2F;wasi.dev&#x2F;&quot;&gt;WASI&lt;&#x2F;a&gt;, which defines a POSIX inspired set of syscalls that a host should implement. It&#x27;s useful because it allows code would otherwise require a real syscall to work in a WASM environment. For example, In Rust you can build with the &lt;code&gt;--target wasm32-wasi&lt;&#x2F;code&gt; flag and your code will just work in any &lt;a href=&quot;https:&#x2F;&#x2F;wasmer.io&#x2F;&quot;&gt;wasi environment&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;terrafirma&quot;&gt;Terrafirma&lt;&#x2F;h2&gt;
&lt;p&gt;Phew! Finally at TerraFirma. TerraFirma is a WASM runtime environment I wrote to let you run wasm code in the cloud. You upload your wasm file by copying it into a shared &lt;a href=&quot;https:&#x2F;&#x2F;keybase.io&#x2F;docs&#x2F;kbfs&quot;&gt;KBFS folder&lt;&#x2F;a&gt; with the keybase user &lt;a href=&quot;https:&#x2F;&#x2F;keybase.io&#x2F;kbwasm&quot;&gt;kbwasm&lt;&#x2F;a&gt;. Then you setup some DNS records to point your domain to TerraFirma&#x27;s servers. And that&#x27;s it! You can update the wasm code at any time by overwriting the old .wasm file with the new one.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code-examples&quot;&gt;Code Examples&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;terrafirma-hello-world&quot;&gt;Hello World&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;terrafirma-scraper&quot;&gt;Scraper Endpoint&lt;&#x2F;a&gt; – A web scraper that uses Servo – a new browser engine from Mozilla.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;terrafirma-hello-world-tutorial&quot;&gt;Terrafirma – Hello World Tutorial&lt;&#x2F;h3&gt;
&lt;p&gt;This example uses Rust, so if you don&#x27;t have that setup &lt;a href=&quot;https:&#x2F;&#x2F;rustup.rs&#x2F;&quot;&gt;go here first&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Point your domain to TerraFirma servers (&lt;code&gt;terrafirma.marcopolo.io&lt;&#x2F;code&gt; or &lt;code&gt;52.53.126.109&lt;&#x2F;code&gt;) with an A record, and set a &lt;code&gt;TXT&lt;&#x2F;code&gt; record to point to your shared folder (e.g. &lt;code&gt;&amp;quot;kbp=&#x2F;keybase&#x2F;private&#x2F;&amp;lt;my_keybase_username&amp;gt;,kbwasm&#x2F;&amp;quot;&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
example.com 300 A terrafirma.marcopolo.io

_keybase_pages.example.com 300 TXT &amp;quot;kbp=&#x2F;keybase&#x2F;private&#x2F;&amp;lt;my_keybase_username&amp;gt;,kbwasm&#x2F;&amp;quot;

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Verify the DNS records are correct&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
$ dig example.com A
...
;; ANSWER SECTION:
wasm.marcopolo.io.      300     IN      A       52.53.126.109
...

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&#x2F;&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
$ dig _keybase_pages.example.com TXT
...
;; ANSWER SECTION:
_keybase_pages.example.com &amp;lt;number&amp;gt; IN TXT &amp;quot;kbp=&#x2F;keybase&#x2F;private&#x2F;&amp;lt;my_keybase_username&amp;gt;,kbpbot&#x2F;&amp;quot;
...

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Clone the Hello World Repo&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;git clone git@github.com:MarcoPolo&#x2F;terrafirma-hello-world.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Build it&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;cd terrafirma-hello-world
cargo build --release
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Deploy it&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
cp target&#x2F;wasm32-unknown-unknown&#x2F;release&#x2F;terrafirma_helloworld.wasm &#x2F;keybase&#x2F;private&#x2F;&amp;lt;your_kb_username&amp;gt;,kbwasm&#x2F;hello.wasm

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Test it&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;curl https:&#x2F;&#x2F;example.com&#x2F;hello.wasm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Thoughts on &quot;Why is React doing this?&quot;</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2019-09-06T00:00:00+00:00</published>
    <updated>2019-09-06T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-thoughts-on-why-is-react-doing-this/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-thoughts-on-why-is-react-doing-this/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/why-react-response/</id>
        <link href="https://marcopolo.io/code/why-react-response/"/>
        <title>Thoughts on &quot;Why is React doing this?&quot;</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2019-09-06T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-thoughts-on-why-is-react-doing-this/</id>
    <content type="html">
        &lt;h1 id=&quot;response-to-why-react&quot;&gt;Response to &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;sebmarkbage&#x2F;a5ef436427437a98408672108df01919&quot;&gt;Why React?&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Some quick thoughts I had after reading the &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;sebmarkbage&#x2F;a5ef436427437a98408672108df01919&quot;&gt;Why React?&lt;&#x2F;a&gt; gist.&lt;&#x2F;p&gt;
&lt;p&gt;Disclaimer: &lt;em&gt;I want to be critical with React. I don&#x27;t disagree that it has done some amazing things&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compiled-output-results-in-smaller-apps&quot;&gt;&amp;quot;Compiled output results in smaller apps&amp;quot;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;E.g. Svelte apps start smaller but the compiler output is 3-4x larger per component than the equivalent VDOM approach.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This may be true currently, but that doesn&#x27;t mean it will always be true of compiled-to frameworks. A theoretical compiler can produce a component that uses a shared library for all components. If a user doesn&#x27;t use all the features of a framework, then a compiler could remove the unused features from the output. Which is something that could not happen with a framework that relies on a full runtime.&lt;&#x2F;p&gt;
&lt;p&gt;Note: I&#x27;m not advocating for a compiled-to approach, I just think this point was misleading&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dom-is-stateful-imperative-so-we-should-embrace-it&quot;&gt;&amp;quot;DOM is stateful&#x2F;imperative, so we should embrace it&amp;quot;&lt;&#x2F;h2&gt;
&lt;p&gt;I agree with OP here. Most use-cases would not benefit from an imperative UI api.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;react-leaks-implementation-details-through-usememo&quot;&gt;&amp;quot;React leaks implementation details through useMemo&amp;quot;&lt;&#x2F;h2&gt;
&lt;p&gt;A common problem to bite new comers is when they pass a closure to a component, and that closure gets changed every time which causes their component to re-render every time. &lt;code&gt;useMemo&lt;&#x2F;code&gt; can fix this issue, but it offloads a bit of work to the developer.&lt;&#x2F;p&gt;
&lt;p&gt;In the above context, it&#x27;s an implementation detail. I&#x27;m not saying it&#x27;s the wrong or right trade off, I&#x27;m only saying that the reason you have to reach for &lt;code&gt;useMemo&lt;&#x2F;code&gt; when passing around closures is because of how React is implemented. So the quote is accurate.&lt;&#x2F;p&gt;
&lt;p&gt;Is that a bad thing? That&#x27;s where it gets more subjective. I think it is, because these types of things happen very often and, in a big app, you quickly succumb to death by a thousand cuts (one closure causing a component to re-render isn&#x27;t a big deal, but when you have hundreds of components with various closures it gets hairy).&lt;&#x2F;p&gt;
&lt;p&gt;The next example OP posts is about setting users in a list.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setUsers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;([
  ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.name !== &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sebastian&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;),
  { name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sebastian&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; }
]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you are happy with that syntax, and the tradeoff of having to use &lt;code&gt;key&lt;&#x2F;code&gt; props whenever you display lists, and relying on React&#x27;s heuristics to efficiently update the views corresponding to the list, then React is fine. If, however, you are okay with a different syntax you may be interested in another idea I&#x27;ve seen. The basic idea is you keep track of the diffs themselves instead of the old version vs. the new version. Knowing the diffs directly let you know exactly how to update the views directly so you don&#x27;t have to rely on the &lt;code&gt;key&lt;&#x2F;code&gt; prop, heuristics, and you can efficiently&#x2F;quickly update the View list. This is similar to how &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;immerjs&#x2F;immer&quot;&gt;Immer&lt;&#x2F;a&gt; works. &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures-signals&#x2F;0.3.8&#x2F;futures_signals&#x2F;tutorial&#x2F;index.html&quot;&gt;Futures Signals&lt;&#x2F;a&gt; also does this to efficiently send updates of a list to consumers (look at &lt;code&gt;SignalVec&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;stale-closures-in-hooks-are-confusing&quot;&gt;&amp;quot;Stale closures in Hooks are confusing&amp;quot;&lt;&#x2F;h2&gt;
&lt;p&gt;I agree with OP&#x27;s points here. It&#x27;s important to know where your data is coming from. In the old hook-less style of React, your data was what you got from your props&#x2F;state and nothing else. With hooks, it&#x27;s easier to work with stale data that comes in from outside your props. It&#x27;s a learning curve, but not necessarily bad.&lt;&#x2F;p&gt;
&lt;p&gt;One thing I find interesting is that the use of hooks moves functional components into becoming more stateful components. I think this is fine, but it loses the pure functional guarantees you had before.&lt;&#x2F;p&gt;
&lt;p&gt;I haven&#x27;t yet made up my mind about hooks that interact with the context. (i.e. &lt;code&gt;useSelector&lt;&#x2F;code&gt; or &lt;code&gt;useDispatch&lt;&#x2F;code&gt;) since the context is less structured. i.e. This component&#x27;s selector function for &lt;code&gt;useSelector&lt;&#x2F;code&gt; relies on the state being &lt;code&gt;X&lt;&#x2F;code&gt;, but &lt;code&gt;X&lt;&#x2F;code&gt; isn&#x27;t passed in, it&#x27;s set as the store in redux configuration file somewhere else. Now that the component relies on the shape of the store being &lt;code&gt;X&lt;&#x2F;code&gt; it makes it harder to move out. This may not actually matter in practice, and it may be much more useful to be able to pull arbitrary things out of your store. Hence why I&#x27;m currently undecided about it.&lt;&#x2F;p&gt;

      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Bart Facts</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2019-09-05T00:00:00+00:00</published>
    <updated>2019-09-05T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-bart-facts/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-bart-facts/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/bart-facts/</id>
        <link href="https://marcopolo.io/code/bart-facts/"/>
        <title>Bart Facts</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2019-09-05T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-bart-facts/</id>
    <content type="html">
        &lt;p&gt;&lt;a href=&quot;&#x2F;code&#x2F;bart-facts.html&quot;&gt;Click Here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;

      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>My Experience at The Recurse Center</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2019-08-23T00:00:00+00:00</published>
    <updated>2019-08-23T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-my-experience-at-the-recurse-center/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-my-experience-at-the-recurse-center/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/my-recurse-experience/</id>
        <link href="https://marcopolo.io/code/my-recurse-experience/"/>
        <title>My Experience at The Recurse Center</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2019-08-23T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-my-experience-at-the-recurse-center/</id>
    <content type="html">
        &lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.recurse.com&#x2F;&quot;&gt;The Recurse Center&lt;&#x2F;a&gt; is this magical place where hours fly by, and you can be as distracted or as focused as you choose to be. It&#x27;s composed of two nice floors of a building in downtown Brooklyn. They provide a space where you can progress on your own programming specific goals at your own self direction.&lt;&#x2F;p&gt;
&lt;p&gt;Some of my best friends are RCers. All of them really enjoyed their time at RC, and would recommend it to anyone who would listen. With glowing praise from people I deeply respect, how could I not give it a try? It also helped that I had a friend and former co-worker (Fred) applying for a week long batch as well.&lt;&#x2F;p&gt;
&lt;p&gt;Initially I was skeptical about it. It also seemed like quite a bit of work. I spent days on their &amp;quot;What do you want to be doing in 2 years question&amp;quot;; I&#x27;d have to do two interviews; and I&#x27;d have to figure out living logistics. Given those hurdles I was skeptical of what the benefit of the program would be. Despite my skepticism I decided to trust my friends. Well... Truthfully Fred nudged me along, and I&#x27;m very glad he did.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-mini-batch-1-week-long-program&quot;&gt;The Mini Batch. (1 Week long program)&lt;&#x2F;h1&gt;
&lt;p&gt;The mini batch seems like a strategy to bring in folks who cannot be in NYC for 6 or 12 weeks or are not ready for that level of commitment (That&#x27;s me!). It felt much shorter than I was expecting (and I was expecting it to be short). Every day of the week puts you 20% closer to the end of the program! After seeing how fast a week goes by, 6 and 12 weeks don&#x27;t seem so long.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-s-special-about-the-recurse-center&quot;&gt;What&#x27;s special about The Recurse Center&lt;&#x2F;h1&gt;
&lt;p&gt;The project I worked on is something I&#x27;ve been toying with in my mind for a while. I even wrote a couple toy implementations that never got fleshed out. I&#x27;ve been toying with the idea for at least 4 months, and hadn&#x27;t made much progress. After a week at RC, however, starting from scratch, I&#x27;d already gotten much farther than ever before. I believe it was a combination of a couple things at RC.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;You can spend your time programming on your own projects (and people will think that&#x27;s neat)
&lt;ul&gt;
&lt;li&gt;Contrast this with most places where the external pressures ask:
&lt;ul&gt;
&lt;li&gt;At home: &amp;quot;What are you doing that for? Is it for work? Oh, It isn&#x27;t? Okay.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;On Vacation: &amp;quot;Why are you on your computer when you could be outside exploring?&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Hackathon: &amp;quot;What are you working on? How is going to make us two boat loads of money?&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;A social space &lt;em&gt;and&lt;&#x2F;em&gt; quiet space.
&lt;ul&gt;
&lt;li&gt;The Recurse Center has two floors. A quiet floor (imagine a less strict library) and an active&#x2F;social floor (where people talk freely, express freely, and openly invite each other to pair program something with them.). I think this is really important and, thinking back to previous jobs, I think it would be a great addition to any company with enough programmers. Sometimes I want to talk to people, and be interrupted, and pair with someone; but sometimes I just want to sit down, uninterrupted, and get lost in my problem space and thoughts.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Diversity.
&lt;ol&gt;
&lt;li&gt;The diversity in the people who attend.
&lt;ul&gt;
&lt;li&gt;Being at RC lets me preview a world where our industry is more inclusive and diverse.&lt;&#x2F;li&gt;
&lt;li&gt;People with different backgrounds bring different thoughts and potential solutions.&lt;&#x2F;li&gt;
&lt;li&gt;A monoculture of ideas is a recipe for stagnation. Team work &lt;a href=&quot;https:&#x2F;&#x2F;www.nytimes.com&#x2F;2016&#x2F;02&#x2F;28&#x2F;magazine&#x2F;what-google-learned-from-its-quest-to-build-the-perfect-team.html?smid=pl-share&quot;&gt;objectively&lt;&#x2F;a&gt; leads to better solutions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The diversity in the knowledge backgrounds.
&lt;ul&gt;
&lt;li&gt;Quick example: Imagine you want to know how VGA character buffers work, you can find someone who spent at least a week studying it in a matter of minutes.&lt;&#x2F;li&gt;
&lt;li&gt;You can get pleasantly side-tracked with someone else&#x27;s rabbit hole.&lt;&#x2F;li&gt;
&lt;li&gt;You can explore the limits of your knowledge when explaining things you thought you understood to people who are genuinely curious!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Not a startup incubator
&lt;ul&gt;
&lt;li&gt;I used to go to hackathons because I liked the idea of building something fun with friends. I stopped going because it turned into a competition to see which one of these 48 hour projects can become the next unicorn startup. (Incidentally, Brian and I started our own hackathon we call the &lt;a href=&quot;https:&#x2F;&#x2F;cryptic.house&#x2F;&quot;&gt;Dumbathon&lt;&#x2F;a&gt; which tries to find the original spirit of the hackathon.)&lt;&#x2F;li&gt;
&lt;li&gt;At RC, no one ever asks &amp;quot;How are you going to make money off this?&amp;quot; If all you end up after your batch is a deeper understanding of problems that interest you, then you&#x27;ve had a successful time there and no one will tell you differently.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Lightweight Social Rules.
&lt;ul&gt;
&lt;li&gt;Interacting with a lot of new people is &lt;em&gt;hard&lt;&#x2F;em&gt;. RC has 4 &lt;a href=&quot;https:&#x2F;&#x2F;www.recurse.com&#x2F;social-rules&quot;&gt;lightweight social rules&lt;&#x2F;a&gt; to help people be nice to each other. On top of that, there&#x27;s an understanding that everyone here is clever and everyone is here because they truly want to be here. That level of commitment isn&#x27;t common in most interactions. The combination of those two things make it a joy to interact with other RCers in the space and get lost talking about your programming project or hearing about their recent problems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;why-i-think-you-should-do-it&quot;&gt;Why I think you should do it&lt;&#x2F;h1&gt;
&lt;p&gt;It may seem selfish or purely indulgent to take away time from your life to go to a programmer&#x27;s retreat, it isn&#x27;t. Take history&#x27;s most selfless person, The Buddha. He dedicated his life to reducing the suffering of those around him. One lesser know story about The Buddha is that he would have &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Vassa&quot;&gt;3 month retreats&lt;&#x2F;a&gt; yearly where he and his disciples could refocus and reinvest their energies. I tell this anecdote not to liken us to The Buddha, but to point out that the prototypical selfless person found these retreats useful.&lt;&#x2F;p&gt;
&lt;p&gt;I think in the daily grind it&#x27;s easy to loose sight of the things that matter to you. Often when at a normal job, your goals of growth and learning don&#x27;t align with the bottom line of the business. That&#x27;s okay, but it&#x27;s very nice to be able to step back and re-hone your tool set.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;my-project&quot;&gt;My Project&lt;&#x2F;h1&gt;
&lt;p&gt;In a week, I built an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;android-wired&quot;&gt;Android UI Library for Rust&lt;&#x2F;a&gt;. I am proud of it, and I&#x27;ll have another post that details it at length.&lt;&#x2F;p&gt;

      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>I moved my blog over to Zola, you should too</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2019-08-22T00:00:00+00:00</published>
    <updated>2019-08-22T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-i-moved-my-blog-over-to-zola-you-should-too/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-i-moved-my-blog-over-to-zola-you-should-too/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/migrating-to-zola/</id>
        <link href="https://marcopolo.io/code/migrating-to-zola/"/>
        <title>I moved my blog over to Zola, you should too</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2019-08-22T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-i-moved-my-blog-over-to-zola-you-should-too/</id>
    <content type="html">
        &lt;h1 id=&quot;blogging&quot;&gt;Blogging&lt;&#x2F;h1&gt;
&lt;p&gt;I started this blog like many other folks, on GitHub Pages. It was great at
the time. You can have a source repo that compiles to a blog. Neat! Over time
though I started really feeling the pain points with it. When I wanted to
write a quick post about something I&#x27;d often spend hours just trying to get
the right Ruby environment set up so I can see my blog locally. When I got an
email from GitHub saying that my blog repo has a security vulnerability in
one of its Gems, I took the opportunity to switch over to
&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&quot;&gt;Zola&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zola&quot;&gt;Zola&lt;&#x2F;h1&gt;
&lt;p&gt;Zola make more sense to me than Jekyll. I think about my posts in a
hierarchy. I&#x27;d like my source code to match my mental representation. If you
look at the &lt;a href=&quot;https:&#x2F;&#x2F;marcopolo.io&#x2F;code&#x2F;migrating-to-zola&#x2F;&quot;&gt;source&lt;&#x2F;a&gt; of this blog, you&#x27;ll see I have 3 folders (code, books,
life). In each folder there are relevant posts. I wanted my blog to show the
contents folder as different sections. For the life of me I couldn&#x27;t figure
out how to do that in Jekyll. I ended up just using a single folder for all
my posts and using the category metadata in the front-matter to create the
different sections. With Zola, this kind of just worked. I had to create an
&lt;code&gt;_index.md&lt;&#x2F;code&gt; file to provide some metadata, but nothing overly verbose.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;i-m-not-a-jekyll-pro&quot;&gt;I&#x27;m not a Jekyll pro...&lt;&#x2F;h1&gt;
&lt;p&gt;Or even really any level past beginner. I image if you&#x27;ve already heavily
invested yourself in the Jekyll ecosystem this probably wouldn&#x27;t make sense
for you. I&#x27;m sure there are all sorts of tricks and features that Jekyll
can do that Zola cannot. I&#x27;m Okay with that. I really don&#x27;t need that much
from my blogging library.&lt;&#x2F;p&gt;
&lt;p&gt;Zola has 3 commands: &lt;code&gt;build&lt;&#x2F;code&gt;, &lt;code&gt;serve&lt;&#x2F;code&gt;, and &lt;code&gt;init&lt;&#x2F;code&gt;. They do what you&#x27;d expect
and nothing more. I really admire this philosophy. Whittle down your feature
set and make those features a &lt;em&gt;joy&lt;&#x2F;em&gt; to use.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;fast&quot;&gt;Fast&lt;&#x2F;h1&gt;
&lt;p&gt;Changes in Zola propagate quickly. Zola rebuilds my (admittedly very small blog) in less than a millisecond. Zola comes with a livereload script that automatically updates your browser when you are in &lt;code&gt;serve&lt;&#x2F;code&gt; mode. It&#x27;s feasible to write your post and see how it renders almost instantly.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;transition&quot;&gt;Transition&lt;&#x2F;h1&gt;
&lt;p&gt;The biggest change was converting Jekyll&#x27;s front-matter (the stuff at the top
of the md files) format into Zola&#x27;s front-matter format. Which was changing
this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;---
layout: post
title: Interacting with Go from React Native through JSI
categories: javascript react-native jsi go
---

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;into this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+++
title = &amp;quot;Interacting with Go from React Native through JSI&amp;quot;
[taxonomies]
tags = [&amp;quot;javascript&amp;quot;, &amp;quot;react-native&amp;quot;, &amp;quot;JSI&amp;quot;, &amp;quot;Go&amp;quot;]
+++
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There was also a slight rewrite in the template files that was necessary
since Zola uses the &lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.com&quot;&gt;Tera Templating Engine&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The rest was just moving (I&#x27;d argue organizing) files around.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;prettier-repo&quot;&gt;Prettier Repo&lt;&#x2F;h1&gt;
&lt;p&gt;I think at the end the repo became a little prettier to look at. You could
argue it&#x27;s a small thing, but I think these small things matter. It&#x27;s already
hard enough to sit down and write a post. I want every bit of the experience
to be beautiful.&lt;&#x2F;p&gt;
&lt;p&gt;But don&#x27;t take my word for it! judge yourself: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;marcopolo.github.io&#x2F;tree&#x2F;jekyll_archive&quot;&gt;Jekyll&lt;&#x2F;a&gt; vs. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;marcopolo.github.io&quot;&gt;Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;

      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Program Structure and Composability</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2019-08-02T00:00:00+00:00</published>
    <updated>2019-08-02T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-program-structure-and-composability/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-program-structure-and-composability/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2019/08/02/program-structure-and-composability.html</id>
        <link href="https://blog.mediocregopher.com/2019/08/02/program-structure-and-composability.html"/>
        <title>Program Structure and Composability</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2019-08-02T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-program-structure-and-composability/</id>
    <content type="html">
        &lt;h2 id=&quot;part-0-introduction&quot;&gt;Part 0: Introduction&lt;&#x2F;h2&gt;

&lt;p&gt;This post is focused on a concept I call “program structure,” which I will try
to shed some light on before discussing complex program structures. I will then
discuss why complex structures can be problematic to deal with, and will finally
discuss a pattern for dealing with those problems.&lt;&#x2F;p&gt;

&lt;p&gt;My background is as a backend engineer working on large projects that have had
many moving parts; most had multiple programs interacting with each other, used
many different databases in various contexts, and faced large amounts of load
from millions of users. Most of this post will be framed from my perspective,
and will present problems in the way I have experienced them. I believe,
however, that the concepts and problems I discuss here are applicable to many
other domains, and I hope those with a foot in both backend systems and a second
domain can help to translate the ideas between the two.&lt;&#x2F;p&gt;

&lt;p&gt;Also note that I will be using Go as my example language, but none of the
concepts discussed here are specific to Go. To that end, I’ve decided to favor
readable code over “correct” code, and so have elided things that most gophers
hold near-and-dear, such as error checking and proper documentation, in order to
make the code as accessible as possible to non-gophers as well. As with before,
I trust that someone with a foot in Go and another language can help me
translate between the two.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;part-1-program-structure&quot;&gt;Part 1: Program Structure&lt;&#x2F;h2&gt;

&lt;p&gt;In this section I will discuss the difference between directory and program
structure, show how global state is antithetical to compartmentalization (and
therefore good program structure), and finally discuss a more effective way to
think about program structure.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;directory-structure&quot;&gt;Directory Structure&lt;&#x2F;h3&gt;

&lt;p&gt;For a long time, I thought about program structure in terms of the hierarchy
present in the filesystem. In my mind, a program’s structure looked like this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&#x2F;&#x2F; The directory structure of a project called gobdns.
src&#x2F;
    config&#x2F;
    dns&#x2F;
    http&#x2F;
    ips&#x2F;
    persist&#x2F;
    repl&#x2F;
    snapshot&#x2F;
    main.go
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;What I grew to learn was that this conflation of “program structure” with
“directory structure” is ultimately unhelpful. While it can’t be denied that
every program has a directory structure (and if not, it ought to), this does not
mean that the way the program looks in a filesystem in any way corresponds to
how it looks in our mind’s eye.&lt;&#x2F;p&gt;

&lt;p&gt;The most notable way to show this is to consider a library package. Here is the
structure of a simple web-app which uses redis (my favorite database) as a
backend:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src&#x2F;
    redis&#x2F;
    http&#x2F;
    main.go
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;If I were to ask you, based on that directory structure, what the program does
in the most abstract terms, you might say something like: “The program
establishes an http server that listens for requests. It also establishes a
connection to the redis server. The program then interacts with redis in
different ways based on the http requests that are received on the server.”&lt;&#x2F;p&gt;

&lt;p&gt;And that would be a good guess. Here’s a diagram that depicts the program
structure, wherein the root node, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.go&lt;&#x2F;code&gt;, takes in requests from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;&#x2F;code&gt; and
processes them using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;div style=&quot;
  box-sizing: border-box;
  text-align: center;
  padding-left: 2em;
  padding-right: 2em;
  margin-bottom: 1em;&quot;&gt;
  &lt;a href=&quot;&#x2F;img&#x2F;program-structure&#x2F;diag1.jpg&quot; target=&quot;_blank&quot;&gt;
    &lt;picture&gt;
      &lt;source srcset=&quot;&#x2F;img&#x2F;program-structure&#x2F;500px&#x2F;diag1.jpg&quot; &#x2F;&gt;
      &lt;img style=&quot;max-height: 60vh;&quot; src=&quot;&#x2F;img&#x2F;program-structure&#x2F;diag1.jpg&quot; alt=&quot;Example 1&quot; &#x2F;&gt;
    &lt;&#x2F;picture&gt;
  &lt;&#x2F;a&gt;&lt;br &#x2F;&gt;&lt;em&gt;Example 1&lt;&#x2F;em&gt;
&lt;&#x2F;div&gt;

&lt;p&gt;This is certainly a viable guess for how a program with that directory
structure operates, but consider another answer: “A component of the program
called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;&#x2F;code&gt; establishes an http server that listens for requests. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;&#x2F;code&gt;
also establishes a connection to a redis server. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;&#x2F;code&gt; then interacts with
that redis connection in different ways based on the http requests that are
received on the http server. Additionally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;&#x2F;code&gt; tracks statistics about
these interactions and makes them available to other components. The root
component of the program establishes a connection to a second redis server, and
stores those statistics in that redis server.” Here’s another diagram to depict
&lt;em&gt;that&lt;&#x2F;em&gt; program.&lt;&#x2F;p&gt;

&lt;div style=&quot;
  box-sizing: border-box;
  text-align: center;
  padding-left: 2em;
  padding-right: 2em;
  margin-bottom: 1em;&quot;&gt;
  &lt;a href=&quot;&#x2F;img&#x2F;program-structure&#x2F;diag2.jpg&quot; target=&quot;_blank&quot;&gt;
    &lt;picture&gt;
      &lt;source srcset=&quot;&#x2F;img&#x2F;program-structure&#x2F;500px&#x2F;diag2.jpg&quot; &#x2F;&gt;
      &lt;img style=&quot;max-height: 60vh;&quot; src=&quot;&#x2F;img&#x2F;program-structure&#x2F;diag2.jpg&quot; alt=&quot;Example 2&quot; &#x2F;&gt;
    &lt;&#x2F;picture&gt;
  &lt;&#x2F;a&gt;&lt;br &#x2F;&gt;&lt;em&gt;Example 2&lt;&#x2F;em&gt;
&lt;&#x2F;div&gt;

&lt;p&gt;The directory structure could apply to either description; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt; is just a
library which allows for interaction with a redis server, but it doesn’t
specify &lt;em&gt;which&lt;&#x2F;em&gt; or &lt;em&gt;how many&lt;&#x2F;em&gt; servers. However, those are extremely important
factors that are definitely reflected in our concept of the program’s
structure, and not in the directory structure. &lt;strong&gt;What the directory structure
reflects are the different &lt;em&gt;kinds&lt;&#x2F;em&gt; of components available to use, but it does
not reflect how a program will use those components.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;

&lt;h3 id=&quot;global-state-vs-compartmentalization&quot;&gt;Global State vs Compartmentalization&lt;&#x2F;h3&gt;

&lt;p&gt;The directory-centric view of structure often leads to the use of global
singletons to manage access to external resources like RPC servers and
databases. In examples 1 and 2 the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt; library might contain code which
looks something like this:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; A mapping of connection names to redis connections.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;globalConns&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RedisConn&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;&#x2F;span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RedisConn&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;globalConns&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;n&quot;&gt;globalConns&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;makeRedisConnection&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;globalConns&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Even though this pattern would work, it breaks with our conception of the
program structure in more complex cases like example 2. Rather than the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt;
component being owned by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;&#x2F;code&gt; component, which actually uses it, it
would be practically owned by &lt;em&gt;all&lt;&#x2F;em&gt; components, since all are able to use it.
Compartmentalization has been broken, and can only be held together through
sheer human discipline.&lt;&#x2F;p&gt;

&lt;p&gt;&lt;strong&gt;This is the problem with all global state. It is shareable among all
components of a program, and so is accountable to none of them.&lt;&#x2F;strong&gt; One must look
at an entire codebase to understand how a globally held component is used,
which might not even be possible for a large codebase. Therefore, the
maintainers of these shared components rely entirely on the discipline of their
fellow coders when making changes, usually discovering where that discipline
broke down once the changes have been pushed live.&lt;&#x2F;p&gt;

&lt;p&gt;Global state also makes it easier for disparate programs&#x2F;components to share
datastores for completely unrelated tasks. In example 2, rather than creating a
new redis instance for the root component’s statistics storage, the coder might
have instead said, “well, there’s already a redis instance available, I’ll just
use that.” And so, compartmentalization would have been broken further. Perhaps
the two instances &lt;em&gt;could&lt;&#x2F;em&gt; be coalesced into the same instance for the sake of
resource efficiency, but that decision would be better made at runtime via the
configuration of the program, rather than being hardcoded into the code.&lt;&#x2F;p&gt;

&lt;p&gt;From the perspective of team management, global state-based patterns do nothing
except slow teams down. The person&#x2F;team responsible for maintaining the central
library in which shared components live (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt;, in the above examples)
becomes the bottleneck for creating new instances for new components, which
will further lead to re-using existing instances rather than creating new ones,
further breaking compartmentalization. Additionally the person&#x2F;team responsible
for the central library, rather than the team using it, often finds themselves
as the maintainers of the shared resource.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;component-structure&quot;&gt;Component Structure&lt;&#x2F;h3&gt;

&lt;p&gt;So what does proper program structure look like? In my mind the structure of a
program is a hierarchy of components, or, in other words, a tree. The leaf
nodes of the tree are almost &lt;em&gt;always&lt;&#x2F;em&gt; IO related components, e.g., database
connections, RPC server frameworks or clients, message queue consumers, etc.
The non-leaf nodes will &lt;em&gt;generally&lt;&#x2F;em&gt; be components that bring together the
functionalities of their children in some useful way, though they may also have
some IO functionality of their own.&lt;&#x2F;p&gt;

&lt;p&gt;Let’s look at an even more complex structure, still only using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;&#x2F;code&gt; component types:&lt;&#x2F;p&gt;

&lt;div style=&quot;
  box-sizing: border-box;
  text-align: center;
  padding-left: 2em;
  padding-right: 2em;
  margin-bottom: 1em;&quot;&gt;
  &lt;a href=&quot;&#x2F;img&#x2F;program-structure&#x2F;diag3.jpg&quot; target=&quot;_blank&quot;&gt;
    &lt;picture&gt;
      &lt;source srcset=&quot;&#x2F;img&#x2F;program-structure&#x2F;500px&#x2F;diag3.jpg&quot; &#x2F;&gt;
      &lt;img style=&quot;max-height: 60vh;&quot; src=&quot;&#x2F;img&#x2F;program-structure&#x2F;diag3.jpg&quot; alt=&quot;Example 3&quot; &#x2F;&gt;
    &lt;&#x2F;picture&gt;
  &lt;&#x2F;a&gt;&lt;br &#x2F;&gt;&lt;em&gt;Example 3&lt;&#x2F;em&gt;
&lt;&#x2F;div&gt;

&lt;p&gt;This component structure contains the addition of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug&lt;&#x2F;code&gt; component.
Clearly the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt; components are reusable in different contexts,
but for this example the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug&lt;&#x2F;code&gt; endpoint is as well. It creates a separate
http server that can be queried to perform runtime debugging of the program,
and can be tacked onto virtually any program. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rest-api&lt;&#x2F;code&gt; component is
specific to this program and is therefore not reusable. Let’s dive into it a
bit to see how it might be implemented:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; RestAPI is very much not thread-safe, hopefully it doesn&#x27;t have to handle&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; more than one request at once.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;RestAPI&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;redisConn&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RedisConn&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;httpSrv&lt;&#x2F;span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Statistics exported for other components to see&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;RequestCount&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;FooRequestCount&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;BarRequestCount&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;NewRestAPI&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RestAPI&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RestAPI&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;redisConn&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;NewConn&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1:6379&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; mux will route requests to different handlers based on their URL path.&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;mux&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;NewServeMux&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;mux&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;HandleFunc&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&#x2F;foo&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;fooHandler&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;mux&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;HandleFunc&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&#x2F;bar&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;barHandler&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;httpSrv&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;NewServer&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Listen for requests and serve them in the background.&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;go&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;httpSrv&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Listen&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:8000&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RestAPI&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;fooHandler&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;rw&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;redisConn&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INCR&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fooKey&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RequestCount&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;FooRequestCount&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RestAPI&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;barHandler&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;rw&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;redisConn&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INCR&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;barKey&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RequestCount&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;BarRequestCount&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;In that snippet &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rest-api&lt;&#x2F;code&gt; coalesced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt; into a simple REST-like
api using pre-made library components. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.go&lt;&#x2F;code&gt;, the root component, does much
the same:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Create debug server and start listening in the background&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;debugSrv&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;NewServer&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Set up the RestAPI, this will automatically start listening&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;restAPI&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;NewRestAPI&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Create another redis connection and use it to store statistics&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;statsRedisConn&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;NewConn&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1:6380&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
        &lt;span class=&quot;n&quot;&gt;statsRedisConn&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SET&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;numReqs&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;restAPI&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RequestCount&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
        &lt;span class=&quot;n&quot;&gt;statsRedisConn&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SET&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;numFooReqs&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;restAPI&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;FooRequestCount&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
        &lt;span class=&quot;n&quot;&gt;statsRedisConn&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SET&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;numBarReqs&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;restAPI&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;BarRequestCount&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;One thing that is clearly missing in this program is proper configuration,
whether from command-line or environment variables, etc. As it stands, all
configuration parameters, such as the redis addresses and http listen
addresses, are hardcoded. Proper configuration actually ends up being somewhat
difficult, as the ideal case would be for each component to set up its own
configuration variables without its parent needing to be aware. For example,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt; could set up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addr&lt;&#x2F;code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pool-size&lt;&#x2F;code&gt; parameters. The problem is that there
are two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt; components in the program, and their parameters would therefore
conflict with each other. An elegant solution to this problem is discussed in
the next section.&lt;&#x2F;p&gt;

&lt;h2 id=&quot;part-2-components-configuration-and-runtime&quot;&gt;Part 2: Components, Configuration, and Runtime&lt;&#x2F;h2&gt;

&lt;p&gt;The key to the configuration problem is to recognize that, even if there are
two of the same component in a program, they can’t occupy the same place in the
program’s structure. In the above example, there are two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;&#x2F;code&gt; components: one
under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rest-api&lt;&#x2F;code&gt; and the other under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug&lt;&#x2F;code&gt;. Because the structure is
represented as a tree of components, the “path” of any node in the tree
uniquely represents it in the structure. For example, the two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;&#x2F;code&gt; components
in the previous example have these paths:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root -&amp;gt; rest-api -&amp;gt; http
root -&amp;gt; debug -&amp;gt; http
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;If each component were to know its place in the component tree, then it would
easily be able to ensure that its configuration and initialization didn’t
conflict with other components of the same type. If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;&#x2F;code&gt; component sets
up a command-line parameter to know what address to listen on, the two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;&#x2F;code&gt;
components in that program would set up:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--rest-api-listen-addr
--debug-listen-addr
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;So how can we enable each component to know its path in the component structure?
To answer this, we’ll have to take a detour through a type, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;component-and-configuration&quot;&gt;Component and Configuration&lt;&#x2F;h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;&#x2F;code&gt; type is a made-up type (though you’ll be able to find an
implementation of it at the end of this post). It has a single primary purpose,
and that is to convey the program’s structure to new components.&lt;&#x2F;p&gt;

&lt;p&gt;To see how this is done, let’s look at a couple of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;&#x2F;code&gt;’s methods:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Package mcmp&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; New returns a new Component which has no parents or children. It is therefore&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; the root component of a component hierarchy.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Child returns a new child of the called upon Component.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Child&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Path returns the Component&#x27;s path in the component hierarchy. It will return&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; an empty slice if the Component is the root component.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Child&lt;&#x2F;code&gt; is used to create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;&#x2F;code&gt;, corresponding to a new child node
in the component structure, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path&lt;&#x2F;code&gt; is used retrieve the path of any
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;&#x2F;code&gt; within that structure. For the sake of keeping the examples simple,
let’s pretend these functions have been implemented in a package called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcmp&lt;&#x2F;code&gt;.
Here’s an example of how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;&#x2F;code&gt; might be used in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt; component’s
code:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Package redis&lt;&#x2F;span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;NewConn&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;mcmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;defaultAddr&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RedisConn&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Child&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redis&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;paramPrefix&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Join&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;n&quot;&gt;addrParam&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;paramPrefix&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-addr&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;defaultAddr&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Address of redis instance to connect to&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; finish setup&lt;&#x2F;span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;redisConn&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;In our above example, the two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt; components’ parameters would be:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&#x2F;&#x2F; This first parameter is for the stats redis, whose parent is the root and
&#x2F;&#x2F; therefore doesn&#x27;t have a prefix. Perhaps stats should be broken into its own
&#x2F;&#x2F; component in order to fix this.
--redis-addr
--rest-api-redis-addr
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;&#x2F;code&gt; definitely makes it easier to instantiate multiple redis components
in our program, since it allows them to know their place in the component
structure.&lt;&#x2F;p&gt;

&lt;p&gt;Having to construct the prefix for the parameters ourselves is pretty annoying,
so let’s introduce a new package, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcfg&lt;&#x2F;code&gt;, which acts like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;&#x2F;code&gt; but is aware
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;&#x2F;code&gt;. Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.NewConn&lt;&#x2F;code&gt; is reduced to:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Package redis&lt;&#x2F;span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;NewConn&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;mcmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;defaultAddr&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RedisConn&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Child&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redis&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;addrParam&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;mcfg&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;addr&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;defaultAddr&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Address of redis instance to connect to&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; finish setup&lt;&#x2F;span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;redisConn&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;Easy-peasy.&lt;&#x2F;p&gt;

&lt;h4 id=&quot;but-what-about-parse&quot;&gt;But What About Parse?&lt;&#x2F;h4&gt;

&lt;p&gt;Sharp-eyed gophers will notice that there is a key piece missing: When is
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.Parse&lt;&#x2F;code&gt;, or its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcfg&lt;&#x2F;code&gt; counterpart, called? When does &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addrParam&lt;&#x2F;code&gt; actually
get populated? It can’t happen inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.NewConn&lt;&#x2F;code&gt; because there might be
other components after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.NewConn&lt;&#x2F;code&gt; that want to set up parameters. To
illustrate the problem, let’s look at a simple program that wants to set up two
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt; components:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Create the root Component, an empty Component.&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;mcmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Create the Components for two sub-components, foo and bar.&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;cmpFoo&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Child&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;cmpBar&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Child&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Now we want to try to create a redis sub-component for each component.&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; This will set up the parameter &quot;--foo-redis-addr&quot;, but bar hasn&#x27;t had a&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; chance to set up its corresponding parameter, so the command-line can&#x27;t&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; be parsed yet.&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;fooRedis&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;NewConn&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmpFoo&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1:6379&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; This will set up the parameter &quot;--bar-redis-addr&quot;, but, as mentioned&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; before, redis.NewConn can&#x27;t parse command-line.&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;barRedis&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;NewConn&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmpBar&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1:6379&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; It is only after all components have been instantiated that the&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; command-line arguments can be parsed&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;mcfg&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Parse&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;While this solves our argument parsing problem, fooRedis and barRedis are not
usable yet because the actual connections have not been made. This is a classic
chicken and the egg problem. The func &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.NewConn&lt;&#x2F;code&gt; needs to make a connection
which it cannot do until &lt;em&gt;after&lt;&#x2F;em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcfg.Parse&lt;&#x2F;code&gt; is called, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcfg.Parse&lt;&#x2F;code&gt; cannot
be called until after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.NewConn&lt;&#x2F;code&gt; has returned. We will solve this problem
in the next section.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;instantiation-vs-initialization&quot;&gt;Instantiation vs Initialization&lt;&#x2F;h3&gt;

&lt;p&gt;Let’s break down &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.NewConn&lt;&#x2F;code&gt; into two phases: instantiation and
initialization. Instantiation refers to creating the component on the component
structure and having it declare what it needs in order to initialize (e.g.,
configuration parameters). During instantiation, nothing external to the
program is performed; no IO, no reading of the command-line, no logging, etc.
All that’s happened is that the empty template of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;&#x2F;code&gt; component has been
created.&lt;&#x2F;p&gt;

&lt;p&gt;Initialization is the phase during which the template is filled in.
Configuration parameters are read, startup actions like the creation of database
connections are performed, and logging is output for informational and debugging
purposes.&lt;&#x2F;p&gt;

&lt;p&gt;The key to making effective use of this dichotomy is to allow &lt;em&gt;all&lt;&#x2F;em&gt; components
to instantiate themselves before they initialize themselves. By doing this we
can ensure, for example, that all components have had the chance to declare
their configuration parameters before configuration parsing is done.&lt;&#x2F;p&gt;

&lt;p&gt;So let’s modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.NewConn&lt;&#x2F;code&gt; so that it follows this dichotomy. It makes
sense to leave instantiation-related code where it is, but we need a mechanism
by which we can declare initialization code before actually calling it. For
this, I will introduce the idea of a “hook.”&lt;&#x2F;p&gt;

&lt;h4 id=&quot;but-first-augment-component&quot;&gt;But First: Augment Component&lt;&#x2F;h4&gt;

&lt;p&gt;In order to support hooks, however, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;&#x2F;code&gt; will need to be augmented with
a few new methods. Right now, it can only carry with it information about the
component structure, but here we will add the ability to carry arbitrary
key&#x2F;value information as well:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Package mcmp&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; SetValue sets the given key to the given value on the Component, overwriting&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; any previous value for that key.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;SetValue&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Value returns the value which has been set for the given key, or nil if the&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; key was never set.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Children returns the Component&#x27;s children in the order they were created.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Children&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;The final method allows us to, starting at the root &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;&#x2F;code&gt;, traverse the
component structure and interact with each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;&#x2F;code&gt;’s key&#x2F;value store. This
will be useful for implementing hooks.&lt;&#x2F;p&gt;

&lt;h4 id=&quot;hooks&quot;&gt;Hooks&lt;&#x2F;h4&gt;

&lt;p&gt;A hook is simply a function that will run later. We will declare a new package,
calling it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mrun&lt;&#x2F;code&gt;, and say that it has two new functions:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Package mrun&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; InitHook registers the given hook to the given Component.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;InitHook&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;mcmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;hook&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Init runs all hooks registered using InitHook. Hooks are run in the order&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; they were registered.&lt;&#x2F;span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;Init&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;mcmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;p&gt;With these two functions, we are able to defer the initialization phase of
startup by using the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Components&lt;&#x2F;code&gt; we were passing around for the purpose
of denoting component structure.&lt;&#x2F;p&gt;

&lt;p&gt;Now, with these few extra pieces of functionality in place, let’s reconsider the
most recent example, and make a program that creates two redis components which
exist independently of each other:&lt;&#x2F;p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Package redis&lt;&#x2F;span&gt;

&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; NOTE that NewConn has been renamed to InstConn, to reflect that the returned&lt;&#x2F;span&gt;
&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; *RedisConn is merely instantiated, not initialized.&lt;&#x2F;span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;InstConn&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;mcmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;defaultAddr&lt;&#x2F;span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RedisConn&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Child&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redis&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; we instantiate an empty RedisConn instance and parameters for it. Neither&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; has been initialized yet. They will remain empty until initialization has&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; occurred.&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;redisConn&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;RedisConn&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;addrParam&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;mcfg&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;addr&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;defaultAddr&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Address of redis instance to connect to&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;n&quot;&gt;mrun&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;InitHook&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; This hook will run after parameter initialization has happened, and&lt;&#x2F;span&gt;
        &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; so addrParam will be usable. Once this hook as run, redisConn will be&lt;&#x2F;span&gt;
        &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; usable as well.&lt;&#x2F;span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;redisConn&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;makeRedisConnection&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;addrParam&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Now that cmp has had configuration parameters and intialization hooks&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; set into it, return the empty redisConn instance back to the parent.&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;redisConn&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Package main&lt;&#x2F;span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Create the root Component, an empty Component.&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;mcmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Create the Components for two sub-components, foo and bar.&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;cmpFoo&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Child&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;cmpBar&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Child&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Add redis components to each of the foo and bar sub-components.&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;redisFoo&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;InstConn&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmpFoo&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1:6379&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;redisBar&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;InstConn&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmpBar&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1:6379&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Parse will descend into the Component and all of its children,&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; discovering all registered configuration parameters and filling them from&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; the command-line.&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;mcfg&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Parse&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; Now that configuration parameters have been initialized, run the Init&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; hooks for all Components.&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;mrun&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Init&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; At this point the redis components have been fully initialized and may be&lt;&#x2F;span&gt;
    &lt;span class=&quot;c&quot;&gt;&#x2F;&#x2F; used. For this example we&#x27;ll copy all keys from one to the other.&lt;&#x2F;span&gt;
    &lt;span class=&quot;n&quot;&gt;keys&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;redisFoo&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;KEYS&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;&#x2F;span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;redisFoo&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;&#x2F;span&gt;
        &lt;span class=&quot;n&quot;&gt;redisBar&lt;&#x2F;span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SET&quot;&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;&#x2F;span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;&#x2F;span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;

&lt;p&gt;While the examples given here are fairly simplistic, the pattern itself is quite
powerful. Codebases naturally accumulate small, domain-specific behaviors and
optimizations over time, especially around the IO components of the program.
Databases are used with specific options that an organization finds useful,
logging is performed in particular places, metrics are counted around certain
pieces of code, etc.&lt;&#x2F;p&gt;

&lt;p&gt;By programming with component structure in mind, we are able to keep these
optimizations while also keeping the clarity and compartmentalization of the
code intact. We can keep our code flexible and configurable, while also
re-usable and testable. Also, the simplicity of the tools involved means they
can be extended and retrofitted for nearly any situation or use-case.&lt;&#x2F;p&gt;

&lt;p&gt;Overall, this is a powerful pattern that I’ve found myself unable to do without
once I began using it.&lt;&#x2F;p&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h3&gt;

&lt;p&gt;As a final note, you can find an example implementation of the packages
described in this post here:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;godoc.org&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mcmp&quot;&gt;mcmp&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;godoc.org&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mcfg&quot;&gt;mcfg&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;godoc.org&#x2F;github.com&#x2F;mediocregopher&#x2F;mediocre-go-lib&#x2F;mrun&quot;&gt;mrun&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;The packages are not stable and are likely to change frequently. You’ll also
find that they have been extended quite a bit from the simple descriptions found
here, based on what I’ve found useful as I’ve implemented programs using
component structures. With these two points in mind, I would encourage you to
look and take whatever functionality you find useful for yourself, and not use
the packages directly. The core pieces are not different from what has been
described in this post.&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Interacting with Go from React Native through JSI</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2019-06-27T00:00:00+00:00</published>
    <updated>2019-06-27T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-interacting-with-go-from-react-native-through-jsi/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-interacting-with-go-from-react-native-through-jsi/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/go-rn-jsi/</id>
        <link href="https://marcopolo.io/code/go-rn-jsi/"/>
        <title>Interacting with Go from React Native through JSI</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2019-06-27T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-interacting-with-go-from-react-native-through-jsi/</id>
    <content type="html">
        &lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h1&gt;
&lt;p&gt;There are 3 parts that let JS talk to Go:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The C++ binding&lt;&#x2F;li&gt;
&lt;li&gt;Installing the binding&lt;&#x2F;li&gt;
&lt;li&gt;Calling Go&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Not all the code is shown, check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoPolo&#x2F;react-native-hostobject-demo&quot;&gt;source code&lt;&#x2F;a&gt; for specifics.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-1-the-c-binding&quot;&gt;Part 1 - The C++ Binding&lt;&#x2F;h3&gt;
&lt;p&gt;The binding is the C++ glue code that will hook up your Go code to the JS runtime. The binding itself is composed of two main parts.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;part-1-1-the-c-binding&quot;&gt;Part 1.1 - The C++ Binding&lt;&#x2F;h4&gt;
&lt;p&gt;The binding is a c++ class that implements the &lt;code&gt;jsi::HostObject&lt;&#x2F;code&gt; interface. At the very least it&#x27;s useful for it to have a &lt;code&gt;get&lt;&#x2F;code&gt; method defined. The type of the &lt;code&gt;get&lt;&#x2F;code&gt; method is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;jsi::Value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(jsi::Runtime &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runtime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; jsi::PropNameID &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;override&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It returns a &lt;code&gt;jsi::Value&lt;&#x2F;code&gt; (a value that is safe for JS). It&#x27;s given the JS runtime and the prop string used by JS when it &lt;code&gt;get&lt;&#x2F;code&gt;s the field. e.g. &lt;code&gt;global.nativeTest.foo&lt;&#x2F;code&gt; will call this method with PropNameID === &lt;code&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;part-1-2-the-c-binding-s-install&quot;&gt;Part 1.2 - The C++ Binding&#x27;s install&lt;&#x2F;h4&gt;
&lt;p&gt;Now that we&#x27;ve defined our HostObject, we need to install it into the runtime. We use a static member function that we&#x27;ll call later to set this up. It looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;TestBinding::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(jsi::Runtime &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runtime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
                          std::shared_ptr&amp;lt;TestBinding&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;testBinding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; What is the name that js will use when it reaches for this?
  &#x2F;&#x2F; i.e. `global.nativeTest` in JS
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; testModuleName = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nativeTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Create a JS object version of our binding
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; object = jsi::Object::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createFromHostObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(runtime, testBinding);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set the &amp;quot;nativeTest&amp;quot; propert
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  runtime.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setProperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(runtime, testModuleName, std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(object));
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;part-2-installing-the-binding-on-android&quot;&gt;Part 2. Installing the binding (on Android)&lt;&#x2F;h3&gt;
&lt;p&gt;Since we have a reference to the runtime in Java land, we&#x27;ll have to create a JNI method to pass the runtime ptr to the native C++ land. We can add this JNI method to our TestBinding file with a guard.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ANDROID
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; {
JNIEXPORT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; JNICALL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Java_com_testmodule_MainActivity_install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    JNIEnv *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, jobject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thiz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, jlong &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runtimePtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; testBinding = std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_shared&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;example::TestBinding&amp;gt;();
  jsi::Runtime *runtime = (jsi::Runtime *)runtimePtr;

  example::TestBinding::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*runtime, testBinding);
}
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then on the Java side (after we compile this into a shared library), we register this native function and call it when we&#x27;re ready.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; In MainActivity

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MainActivity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ReactActivity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ReactInstanceManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ReactInstanceEventListener &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Load our jni
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loadLibrary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_module_jni&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;... ellided ...

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onReactContextInitialized&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ReactContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Call our native function with the runtime pointer
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getJavaScriptContextHolder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;());
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;  declare our native function
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public native void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jsContextNativePointer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;part-3-calling-go&quot;&gt;Part 3. Calling Go&lt;&#x2F;h3&gt;
&lt;p&gt;Now that our binding is installed in the runtime, we can make it do something useful.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;jsi::Value TestBinding::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(jsi::Runtime &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runtime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; jsi::PropNameID &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; methodName = name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;utf8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(runtime);

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(methodName == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;jsi::Function::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createFromHostFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
        runtime, name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
        [](jsi::Runtime &amp;amp;runtime, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; jsi::Value &amp;amp;thisValue,
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; jsi::Value *arguments,
           size_t count) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jsi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TestNum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(); });
  }
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;jsi::Value::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
}

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we return a &lt;code&gt;jsi::Function&lt;&#x2F;code&gt; when JS calls &lt;code&gt;global.nativeTest.runTest&lt;&#x2F;code&gt;. When JS calls it (as in &lt;code&gt;global.nativeTest.runTest()&lt;&#x2F;code&gt;) we execute the code inside the closure, which just returns &lt;code&gt;TestNum()&lt;&#x2F;code&gt;. TestNum is a Go function that&#x27;s exported through cgo so that it is available to c&#x2F;c++. Our Go code looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; TestNum returns a test number to be used in JSI
&#x2F;&#x2F;export TestNum
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;TestNum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;cgo builds a header and creates a shared library that is used by our binding.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building&quot;&gt;Building&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Look at the CMakeLists.txt for specifics on building the C++ code.&lt;&#x2F;li&gt;
&lt;li&gt;Look at from-go&#x2F;build.sh for specifics on building the go code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;a-go-shared-library-for-c-java&quot;&gt;A Go Shared Library for C + Java&lt;&#x2F;h3&gt;
&lt;p&gt;It&#x27;s possible to build the Go code as a shared library for both C and Java, but you&#x27;ll have to define your own JNI methods. It would be nice if gomobile bind also generated C headers for android, but it doesn&#x27;t seem possible right now. Instead you&#x27;ll have to run &lt;code&gt;go build -buildmode=c-shared&lt;&#x2F;code&gt; directly and define your jni methods yourself. Take a look at &lt;code&gt;from-go&#x2F;build.sh&lt;&#x2F;code&gt; and testnum.go for specifics.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@christian.falch&#x2F;https-medium-com-christian-falch-react-native-jsi-challenge-1201a69c8fbf&quot;&gt;JSI Challenge #1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@christian.falch&#x2F;react-native-jsi-challenge-2-56fc4dd91613&quot;&gt;JSI Challenge #2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.nparashuram.com&#x2F;2019&#x2F;01&#x2F;react-natives-new-architecture-glossary.html&quot;&gt;RN Glossary of Terms&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.dogan.io&#x2F;2015&#x2F;08&#x2F;15&#x2F;java-jni-jnr-go&#x2F;&quot;&gt;GO JNI&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rakyll.org&#x2F;cross-compilation&#x2F;&quot;&gt;GO Cross Compilation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;

      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Visualization 1</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2018-11-12T00:00:00+00:00</published>
    <updated>2018-11-12T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-visualization-1/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-visualization-1/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2018/11/12/viz-1.html</id>
        <link href="https://blog.mediocregopher.com/2018/11/12/viz-1.html"/>
        <title>Visualization 1</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2018-11-12T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-visualization-1/</id>
    <content type="html">
        &lt;p&gt;First I want to appologize if you’ve seen this already, I originally had this up
on my normal website, but I’ve decided to instead consolidate all my work to my
blog.&lt;&#x2F;p&gt;

&lt;p&gt;This is the first of a series of visualization posts I intend to work on, each
building from the previous one.&lt;&#x2F;p&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;viz&#x2F;1&#x2F;goog&#x2F;base.js&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;viz&#x2F;1&#x2F;cljs_deps.js&quot;&gt;&lt;&#x2F;script&gt;

&lt;script&gt;goog.require(&quot;viz.core&quot;);&lt;&#x2F;script&gt;

&lt;p align=&quot;center&quot;&gt;&lt;canvas id=&quot;viz&quot;&gt;&lt;&#x2F;canvas&gt;&lt;&#x2F;p&gt;

&lt;p&gt;This visualization follows a few simple rules:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Any point can only be occupied by a single node. A point may be alive (filled)
or dead (empty).&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;On every tick each live point picks from 0 to N new points to spawn, where N is
the number of empty adjacent points to it. If it picks 0, it becomes dead.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Each line indicates the parent of a point. Lines have an arbitrary lifetime of
a few ticks, and occupy the points they connect (so new points may not spawn
on top of a line).&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;When a dead point has no lines it is cleaned up, and its point is no longer
occupied.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;The resulting behavior is somewhere between &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Conway%27s_Game_of_Life&quot;&gt;Conway’s Game of
Life&lt;&#x2F;a&gt; and white noise.
Though each point operates independently, they tend to move together in groups.
When two groups collide head on they tend to cancel each other out, killing most
of both. When they meet while both heading in a common direction they tend to
peacefully merge towards that direction.&lt;&#x2F;p&gt;

&lt;p&gt;Sometimes their world becomes so cluttered there’s hardly room to move.
Sometimes a major coincidence of events leads to multiple groups canceling each
other at once, opening up the world and allowing for an explosion of new growth.&lt;&#x2F;p&gt;

&lt;p&gt;Some groups spiral about a single point, sustaining themselves and defending
from outside groups in the same movement. This doesn’t last for very long.&lt;&#x2F;p&gt;

&lt;p&gt;The performance of this visualization is not very optimized, and will probably
eat up your CPU like nothing else. Most of the slowness comes from drawing the
lines; since there’s so many individual small ones it’s quite cumbersome to do.&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>Visualization 2</title>
        <author>
            <name>Brian Picciano</name>
        </author>
    <published>2018-11-12T00:00:00+00:00</published>
    <updated>2018-11-12T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/brian-picciano-visualization-2/"/>
    <link rel="alternate" href="https://blog.cryptic.io/brian-picciano-visualization-2/" type="text/html"/>
      <source>
        <id>https://blog.mediocregopher.com/2018/11/12/viz-2.html</id>
        <link href="https://blog.mediocregopher.com/2018/11/12/viz-2.html"/>
        <title>Visualization 2</title>
        <author>
            <name>Brian Picciano</name>
        </author>
        <updated>2018-11-12T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/brian-picciano-visualization-2/</id>
    <content type="html">
        &lt;script src=&quot;&#x2F;assets&#x2F;viz&#x2F;2&#x2F;goog&#x2F;base.js&quot;&gt;&lt;&#x2F;script&gt;

&lt;script src=&quot;&#x2F;assets&#x2F;viz&#x2F;2&#x2F;cljs_deps.js&quot;&gt;&lt;&#x2F;script&gt;

&lt;script&gt;goog.require(&quot;viz.core&quot;);&lt;&#x2F;script&gt;

&lt;p align=&quot;center&quot;&gt;&lt;canvas id=&quot;viz&quot;&gt;&lt;&#x2F;canvas&gt;&lt;&#x2F;p&gt;

&lt;p&gt;This visualization builds on the previous. Structurally the cartesian grid has
been turned into an isometric one, but this is more of an environmental change
than a behavioral one.&lt;&#x2F;p&gt;

&lt;p&gt;Behavioral changes which were made:&lt;&#x2F;p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;When a live point is deciding its next spawn points, it first sorts the set of
empty adjacent points from closest-to-the-center to farthest. It then chooses
a number &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt; between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;&#x2F;code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;&#x2F;code&gt; (where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;&#x2F;code&gt; is the sorted set’s size) and
spawns new points from the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt; points of the sorted set. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;&#x2F;code&gt; is chosen
based on:&lt;&#x2F;p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;The live point’s linear distance from the center.&lt;&#x2F;p&gt;
      &lt;&#x2F;li&gt;
      &lt;li&gt;
        &lt;p&gt;A random multiplier.&lt;&#x2F;p&gt;
      &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;
    &lt;p&gt;Each point is spawned with an attached color, where the color chosen is a
slightly different hue than its parent. The change is deterministic, so all
child points of the same generation have the same color.&lt;&#x2F;p&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;p&gt;The second change is purely cosmetic, but does create a mesmerizing effect. The
first change alters the behavior dramatically. Only the points which compete for
the center are able to reproduce, but by the same token are more likely to be
starved out by other points doing the same.&lt;&#x2F;p&gt;

&lt;p&gt;In the previous visualization the points moved around in groups aimlessly. Now
the groups are all competing for the same thing, the center. As a result they
congregate and are able to be viewed as a larger whole.&lt;&#x2F;p&gt;

&lt;p&gt;The constant churn of the whole takes many forms, from a spiral in the center,
to waves crashing against each other, to outright chaos, to random purges of
nearly all points. Each form lasts for only a few seconds before giving way to
another.&lt;&#x2F;p&gt;
      
    </content>
  </entry>
  <entry xml:lang="en">
    <title>An Intro to Functional Reactive Programming in UIs</title>
        <author>
            <name>Marco</name>
        </author>
    <published>2014-11-16T00:00:00+00:00</published>
    <updated>2014-11-16T00:00:00+00:00</updated>
    <link href="https://blog.cryptic.io/marco-an-intro-to-functional-reactive-programming-in-uis/"/>
    <link rel="alternate" href="https://blog.cryptic.io/marco-an-intro-to-functional-reactive-programming-in-uis/" type="text/html"/>
      <source>
        <id>https://marcopolo.io/code/frp/</id>
        <link href="https://marcopolo.io/code/frp/"/>
        <title>An Intro to Functional Reactive Programming in UIs</title>
        <author>
            <name>Marco</name>
        </author>
        <updated>2014-11-16T00:00:00+00:00</updated>
      </source>

    <id>https://blog.cryptic.io/marco-an-intro-to-functional-reactive-programming-in-uis/</id>
    <content type="html">
        &lt;p&gt;Maybe you&#x27;ve heard of &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;&quot;&gt;React&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swannodette&#x2F;om&quot;&gt;Om&lt;&#x2F;a&gt;,
or &lt;a href=&quot;http:&#x2F;&#x2F;elm-lang.org&#x2F;&quot;&gt;Elm&lt;&#x2F;a&gt;, and wondering: what&#x27;s the deal with
functional reactive programming (FRP)?&lt;&#x2F;p&gt;
&lt;p&gt;This post will act as primer on FRP using vanilla JS, but the ideas presented
here translate pretty easily in any language and UI system.&lt;&#x2F;p&gt;
&lt;p&gt;So let&#x27;s start with an informal, pragmatic definition of FRP:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use streams of data to create the application state (data)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Build a UI given only the application state with pure functions (view)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;streams-and-arrays&quot;&gt;Streams and arrays&lt;&#x2F;h2&gt;
&lt;p&gt;You can imagine streams of data as a set of values over time.&lt;&#x2F;p&gt;
&lt;p&gt;A stream of numbers representing a counter would look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[0,1,2,3,4,5,6,...]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each number is essentially a snapshot of the value at that time.&lt;&#x2F;p&gt;
&lt;p&gt;Streams are similar to arrays, but the main difference is time.
An immutable array has all the values it will ever have when it is created, while a stream represents all the values that have happened and will
happen.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a concrete example: You are an owner of an exclusive restaurant.
It&#x27;s so exclusive that people have to make reservations months in advance.
Every night you have a list of people at your restaurant (because they&#x27;ve
already made reservations). Imagine the list being &lt;code&gt;[amy, sally, bob]&lt;&#x2F;code&gt;.
To count the number of guests, we would just reduce over the list
adding 1 for every guest. If we wanted to know how much each guest spent
we would map against a function that tells us the guest&#x27;s bill.&lt;&#x2F;p&gt;
&lt;p&gt;This is just a normal array with normal map&#x2F;reduce construct.
For completeness here&#x27;s the equivalent code.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sally&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bills &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= { amy: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, sally: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;67.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, bob: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Count the guests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(sum, guest) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 3
&#x2F;&#x2F; Get the bills
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(guest) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bills&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
});
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; =&amp;gt; [22.5, 67, 6]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately Sally had some bad fish and died after eating at your
restaurant, so everyone has cancelled their reservations and you are
now a fast food place. In this case you don&#x27;t have a list of guests,
instead you have a &lt;em&gt;stream&lt;&#x2F;em&gt; of people who come in and order food.
&lt;code&gt;Frank&lt;&#x2F;code&gt; might come in at 10 am, followed by &lt;code&gt;Jack&lt;&#x2F;code&gt; at 2 pm. To get
similar data as before we would again map&#x2F;reduce over the stream,
but since we are operating over a stream that never ends, the values
from map&#x2F;reduce themselves become streams that never end.&lt;&#x2F;p&gt;
&lt;p&gt;Here is some equivalent pseudo code for streams that calculates
the &lt;code&gt;guestCounts&lt;&#x2F;code&gt; and the &lt;code&gt;guestBills&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guests      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time passes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;..., &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Frank&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, ... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time passes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;..., &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, ... ]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guestCounts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time passes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;..., &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,     ... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time passes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;..., &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, ... ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guestBills &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=  [... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time passes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;..., &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5.50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,  ... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time passes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;..., &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6.50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, ... ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So a stream is just like an array that never ends, and represents
snapshots of time.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have an intuitive idea what streams are, we can actually
implement them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;streams-of-data&quot;&gt;Streams of data&lt;&#x2F;h2&gt;
&lt;p&gt;A stream of numbers representing a counter would look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[0,1,2,3,4,5,6,...]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we wanted to keep track of how long someone was on our page,
we could just display the latest value of the counter stream
in our UI and that would be enough.&lt;&#x2F;p&gt;
&lt;p&gt;A more involved example: Imagine we had a stream of data
that represents the keys pressed on the keyboard.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&amp;quot;p&amp;quot;,&amp;quot;w&amp;quot;,&amp;quot;n&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;o&amp;quot;,&amp;quot;w&amp;quot;,&amp;quot;n&amp;quot;,...]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we want to have a stream that represents the state of the system,
say the amount of keys pressed.&lt;&#x2F;p&gt;
&lt;p&gt;Our key count stream would look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&amp;quot;p&amp;quot;,&amp;quot;w&amp;quot;,&amp;quot;n&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;o&amp;quot;,&amp;quot;w&amp;quot;,&amp;quot;n&amp;quot;,...]
=&amp;gt;
[ 1,  2,  3,  4,  5,  6,  7, ...]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This transformation would happen with a reducing function.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keyCountReducer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(reducedValue, streamSnapshot) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reducedValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This function takes in the stream value, and a reduced value so far, and
returns a new reduced value. In this case a simple increment.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve talked about streams for a while now, let&#x27;s implement them.&lt;&#x2F;p&gt;
&lt;p&gt;In the following code, we create a function that will return an object with two
methods: &lt;code&gt;observe&lt;&#x2F;code&gt; for registering event listeners and &lt;code&gt;update&lt;&#x2F;code&gt; for adding a value
to the stream.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; A function to make streams for us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamMaker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;registeredListeners &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [];
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Have an observe function, so
    &#x2F;&#x2F; people who are interested can
    &#x2F;&#x2F; get notified when there is an update
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(callback) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;registeredListeners&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    },

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add a value to this stream
    &#x2F;&#x2F; Once added, will notify all
    &#x2F;&#x2F; interested parties
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(value) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;registeredListeners&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(cb) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
      });
    }
  };
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also want to make a helper function that will create a new reduced stream
given an existing &lt;code&gt;stream&lt;&#x2F;code&gt;, a &lt;code&gt;reducingFunction&lt;&#x2F;code&gt;, and an &lt;code&gt;initialReducedValue&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; A function to make a new stream from an existing stream
&#x2F;&#x2F; a reducing function, and an initial reduced value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reducedStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stream, reducingFunction, initialReducedValue) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamMaker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reducedValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialReducedValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(streamSnapshotValue) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reducedValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reducingFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reducedValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamSnapshotValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reducedValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  });
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now to implement the keypress stream and count stream.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Our reducer from before
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keyCountReducer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(reducedValue, streamSnapshot) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reducedValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Create the keypress stream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamMaker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; an observer will have that side effect of printing out to the console
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(v) {
  console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
});

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Whenever we press a key, we&amp;#39;ll update the stream to be the char code.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;onkeypress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(e) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fromCharCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.charCode));
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Using our reducedStream helper function we can make a new stream
&#x2F;&#x2F; That reduces the keypresses into a stream of key counts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;countStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reducedStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keyCountReducer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;countStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(v) {
  console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now with the new stream we can display it like we did before.&lt;&#x2F;p&gt;
&lt;p&gt;Which leads us into our next point...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rendering-uis-given-data&quot;&gt;Rendering UIs given data&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have a system for generating state through streams,
let&#x27;s actually show something off.&lt;&#x2F;p&gt;
&lt;p&gt;This is where React.js shines, but for the purpose of this post we&#x27;ll
build our own system.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say at one point in time our data looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we want to render a UI that represents this information.
So we&#x27;ll write a simple piece of JS that renders html directly from the map.
To keep it easy, we&#x27;ll use the keys as div ids.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Pure Function to create the dom nodes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createDOMNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(key, dataMapOrValue) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createElement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setAttribute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Recurse for children
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataMapOrValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=== &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataMapOrValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataMapOrValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(childKey) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createDOMNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;childKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataMapOrValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;childKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]);
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appendChild&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    });
  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; There are no children just a value.
    &#x2F;&#x2F; We set the data to be the content of the node
    &#x2F;&#x2F; Note this does not protect against XSS
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.innerHTML = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataMapOrValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
  }
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Render Data

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;render &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rootID, appState) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Check if the root id is even defined
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rootID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) === &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We need to add this root id so we can use it later
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createElement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setAttribute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rootID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    document.body.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appendChild&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rootID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Clear all the existing content in the page
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.innerHTML = &amp;quot;&amp;quot;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; render the appState back in
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appendChild&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createDOMNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rootID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, { Count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After running this code on a &lt;a href=&quot;about:blank&quot;&gt;blank page&lt;&#x2F;a&gt; we have a page
that says &lt;code&gt;1&lt;&#x2F;code&gt;, it worked!&lt;&#x2F;p&gt;
&lt;p&gt;A bit boring though, how about we make it a bit more interesting by updating
on the stream.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rendering-streams-of-data&quot;&gt;Rendering Streams of data&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve figured out how streams work, how to work with streams, and how to
render a page given some data. Now we&#x27;ll tie all the parts together; render
the stream as it changes over time.&lt;&#x2F;p&gt;
&lt;p&gt;It really is simple. All we have to do is re-render whenever we receive
a new value on the stream.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Let&amp;#39;s observe the countstream and render when we get an update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;countStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(value) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
});

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; And if we wanted to render what the keypress stream tells us, we can do so
&#x2F;&#x2F; just as easily
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(value) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keypress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;single-app-state&quot;&gt;Single App State&lt;&#x2F;h2&gt;
&lt;p&gt;A single app state means that there is only one object that encapsulates the
state of your application.&lt;&#x2F;p&gt;
&lt;p&gt;Benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;All changes to the frontend happen from this app state.&lt;&#x2F;li&gt;
&lt;li&gt;You can snapshot this state and be able to recreate the
frontend at any point in time (facilitates undo&#x2F;redo).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Downsides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You may conflate things that shouldn&#x27;t be together.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Having a single place that reflects the whole state is pretty amazing,
how often have you had your app get messed up because of some rogue event?
or hidden state affecting the application, or an ever growing state
scattered around the application.&lt;&#x2F;p&gt;
&lt;p&gt;No more.&lt;&#x2F;p&gt;
&lt;p&gt;A single app state is a natural end to the directed acyclic graph that
we&#x27;ve created with streams.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;stream1 -&amp;gt; mappedStream
                        \
                         mergedStream -&amp;gt; appStateStream
                        &#x2F;
stream2 -&amp;gt; reducedStream
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;implementing-single-app-state&quot;&gt;Implementing Single App State&lt;&#x2F;h2&gt;
&lt;p&gt;In our previous example we had two pieces of state,
the counter and the keypress. We could merge these together into one stream, and
then form a single app state from that stream.&lt;&#x2F;p&gt;
&lt;p&gt;First let&#x27;s make a helper function that will merge streams for us. To keep it
general and simple we&#x27;ll take only two streams and a merging function.
It will return a new stream which is the merge of both streams with the mergeFn.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; A merge streams helper function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mergeStreams &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(streamA, streamB, mergeFn) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamMaker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(value) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mergeFn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
  });
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(value) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mergeFn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
  });

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This implementation will call the merge function with the latest value from the
streams or null if the stream hasn&#x27;t emitted anything yet. This means the output
can return duplicate values of one of the streams.&lt;&#x2F;p&gt;
&lt;p&gt;(As a side note, the performance impact of duplicate values can be mitigated
with immutable datastructures)&lt;&#x2F;p&gt;
&lt;p&gt;We want to put both the keypress and the counter in one object, so our
merge function will do just that.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mergeIntoObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(keypress, counter) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{ counter: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, keypress: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now to create the single app state stream, and render that single app state.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appStateStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mergeStreams&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;countStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mergeIntoObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appStateStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(value) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;final-code&quot;&gt;Final Code&lt;&#x2F;h2&gt;
&lt;p&gt;Most of these functions are library functions that you wouldn&#x27;t need to implement
yourself. The final application specific code would look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Create the keypress stream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamMaker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Whenever we press a key, we&amp;#39;ll update the stream to be the char code.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;onkeypress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(e) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fromCharCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.charCode));
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keyCountReducer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(reducedValue, streamSnapshot) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reducedValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Using our reducedStream helper function we can make a new stream
&#x2F;&#x2F; That reduces the keypresses into a stream of key counts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;countStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reducedStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keyCountReducer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mergeIntoObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(keypress, counter) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{ counter: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, keypress: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appStateStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mergeStreams&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;countStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mergeIntoObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appStateStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(value) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can see a running version of this code &lt;a href=&quot;http:&#x2F;&#x2F;jsfiddle.net&#x2F;Ld3o1Lm5&#x2F;2&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-render-a-closer-look&quot;&gt;The render, a closer look&lt;&#x2F;h2&gt;
&lt;p&gt;So what does the render actually do?&lt;&#x2F;p&gt;
&lt;p&gt;Well, it clears the inner html of a containing div and adds an element inside of it.
But that&#x27;s pretty standard, how are we defining what element is created?
Why yes, it&#x27;s the createDOMNode function. In fact, if you wanted your data displayed
differently (e.g. in color, or upside down) all you&#x27;d have to do is write your own
createDOMNode function that adds the necessary styles or elements.&lt;&#x2F;p&gt;
&lt;p&gt;Essentially, the &lt;code&gt;createDOMNode&lt;&#x2F;code&gt; function controls what your UI will look like.
createDOMNode is a pure function, meaning for the same set of inputs, you&#x27;ll
always get the same set of outputs, and has no side effects (like an api call).
This wasn&#x27;t a happy accident, FRP leads to a
design where the functions which build your UI are pure functions!
This means UI components are significantly easier to reason about.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;time-travel&quot;&gt;Time travel&lt;&#x2F;h2&gt;
&lt;p&gt;Often when people talk about FRP, time travel is bound to get brought up.
Specifically the ability to undo and redo the state of your UI. Hopefully, if
you&#x27;ve gotten this far, you can see how trivial it would be to store the data
used to render the UIs in an array and just move forward and backward to
implement redo and undo.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h2&gt;
&lt;p&gt;If you care about performance in the slightest, you probably shuddered when
I nuked the containing element and recreated all the children nodes. I don&#x27;t
blame you; however, that is an implementation detail. While my implementation
is slow, there are implementations (e.g. React) that only update the items and
attributes that have changed, thus reaping performance benefits with no cost
to the programmer! You are getting a better system for modeling UIs and
the performance boosts for free! Furthermore a lot of smart people are working
on React, and as it gets faster, so will your app. Without any effort on your
part.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;now-with-actual-libraries&quot;&gt;Now with actual libraries&lt;&#x2F;h2&gt;
&lt;p&gt;A lot of what we wrote was the library to get streams up and running,
however those already exists (e.g. &lt;a href=&quot;http:&#x2F;&#x2F;baconjs.github.io&#x2F;&quot;&gt;Bacon.js&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;&quot;&gt;React.js&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;A couple quick notes if this is your first time looking at React.js or Bacon.js.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;getInitialState&lt;&#x2F;code&gt; defines the initial local state of the component.
&lt;code&gt;componentWillMount&lt;&#x2F;code&gt; is a function that gets called before the component
is placed on the DOM.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;stream&amp;gt;.scan&lt;&#x2F;code&gt; is our reducing function in Bacon.js parlance.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Our streams just like before
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Bacon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fromEventTarget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(document.body, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keypress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(e) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fromCharCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.charCode);
  }
);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;countStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(count, key) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
});

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;KeyPressComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;React&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;({
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getInitialState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{ count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, keypress: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;press a key&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, totalWords: &amp;quot;&amp;quot; };
  },
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;componentWillMount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.props.countStream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;onValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(count) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;({ count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;});
      }.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
    );

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.props.keypressStream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;onValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(key) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;({ keypress: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;});
      }.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
    );

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add something extra because why not
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.props.keypressStream
      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(totalWords, key) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;totalWords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
      })
      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;onValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(totalWords) {
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;({ totalWords: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;totalWords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;});
        }.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
      );
  },
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;React&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.DOM.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;React&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createElement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.state.count),
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;React&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createElement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Keypress: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.state.keypress),
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;React&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createElement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Total words: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.state.totalWords)
    );
  }
});

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;React&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;React&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createElement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;KeyPressComponent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, {
    keypressStream: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypressStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    countStream: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;countStream
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}),
  document.body
);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;jsfiddle for this code &lt;a href=&quot;http:&#x2F;&#x2F;jsfiddle.net&#x2F;jf2j62wj&#x2F;10&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing-notes&quot;&gt;Closing Notes&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;&quot;&gt;React&lt;&#x2F;a&gt; is great for reactively rendering the ui.
&lt;a href=&quot;http:&#x2F;&#x2F;baconjs.github.io&#x2F;&quot;&gt;Bacon.js&lt;&#x2F;a&gt; is a great library that implements these streams.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re looking to really delve into FRP:
&lt;a href=&quot;http:&#x2F;&#x2F;elm-lang.org&#x2F;&quot;&gt;Elm&lt;&#x2F;a&gt; has a well thought out FRP system in a haskell like language.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re feeling adventurous give Om &amp;amp; Clojurescript a shot.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swannodette&#x2F;om&quot;&gt;Om&lt;&#x2F;a&gt; is a great tool that adds immutability
to React, and brings React to Clojurescript&lt;&#x2F;p&gt;
&lt;p&gt;Finally, Evan Czaplicki (Elm creator) did a &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Agu6jipKfYw&quot;&gt;great talk on FRP&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;

      
    </content>
  </entry>
</feed>
